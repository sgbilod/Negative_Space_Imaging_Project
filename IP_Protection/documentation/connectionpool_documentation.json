{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\connectionpool.py",
  "classes": [
    {
      "name": "ConnectionPool",
      "docstring": "Base class for all connection pools, such as\n:class:`.HTTPConnectionPool` and :class:`.HTTPSConnectionPool`.\n\n.. note::\n   ConnectionPool.urlopen() does not normalize or percent-encode target URIs\n   which is useful if your target server doesn't support percent-encoded\n   target URIs.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "close",
          "docstring": "Close all pooled connections and disable the pool."
        }
      ]
    },
    {
      "name": "HTTPConnectionPool",
      "docstring": "Thread-safe connection pool for one host.\n\n:param host:\n    Host used for this HTTP Connection (e.g. \"localhost\"), passed into\n    :class:`http.client.HTTPConnection`.\n\n:param port:\n    Port used for this HTTP Connection (None is equivalent to 80), passed\n    into :class:`http.client.HTTPConnection`.\n\n:param strict:\n    Causes BadStatusLine to be raised if the status line can't be parsed\n    as a valid HTTP/1.0 or 1.1 status line, passed into\n    :class:`http.client.HTTPConnection`.\n\n    .. note::\n       Only works in Python 2. This parameter is ignored in Python 3.\n\n:param timeout:\n    Socket timeout in seconds for each individual connection. This can\n    be a float or integer, which sets the timeout for the HTTP request,\n    or an instance of :class:`urllib3.util.Timeout` which gives you more\n    fine-grained control over request timeouts. After the constructor has\n    been parsed, this is always a `urllib3.util.Timeout` object.\n\n:param maxsize:\n    Number of connections to save that can be reused. More than 1 is useful\n    in multithreaded situations. If ``block`` is set to False, more\n    connections will be created but they will not be saved once they've\n    been used.\n\n:param block:\n    If set to True, no more than ``maxsize`` connections will be used at\n    a time. When no free connections are available, the call will block\n    until a connection has been released. This is a useful side effect for\n    particular multithreaded situations where one does not want to use more\n    than maxsize connections per host to prevent flooding.\n\n:param headers:\n    Headers to include with all requests, unless other headers are given\n    explicitly.\n\n:param retries:\n    Retry configuration to use by default with requests in this pool.\n\n:param _proxy:\n    Parsed proxy URL, should not be used directly, instead, see\n    :class:`urllib3.ProxyManager`\n\n:param _proxy_headers:\n    A dictionary with proxy headers, should not be used directly,\n    instead, see :class:`urllib3.ProxyManager`\n\n:param \\**conn_kw:\n    Additional parameters are used to create fresh :class:`urllib3.connection.HTTPConnection`,\n    :class:`urllib3.connection.HTTPSConnection` instances.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "close",
          "docstring": "Close all pooled connections and disable the pool."
        },
        {
          "name": "is_same_host",
          "docstring": "Check if the given ``url`` is a member of the same host as this\nconnection pool."
        },
        {
          "name": "urlopen",
          "docstring": "Get a connection from the pool and perform an HTTP request. This is the\nlowest level call for making a request, so you'll need to specify all\nthe raw details.\n\n.. note::\n\n   More commonly, it's appropriate to use a convenience method provided\n   by :class:`.RequestMethods`, such as :meth:`request`.\n\n.. note::\n\n   `release_conn` will only behave as expected if\n   `preload_content=False` because we want to make\n   `preload_content=False` the default behaviour someday soon without\n   breaking backwards compatibility.\n\n:param method:\n    HTTP request method (such as GET, POST, PUT, etc.)\n\n:param url:\n    The URL to perform the request on.\n\n:param body:\n    Data to send in the request body, either :class:`str`, :class:`bytes`,\n    an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n\n:param headers:\n    Dictionary of custom headers to send, such as User-Agent,\n    If-None-Match, etc. If None, pool headers are used. If provided,\n    these headers completely replace any pool-specific headers.\n\n:param retries:\n    Configure the number of retries to allow before raising a\n    :class:`~urllib3.exceptions.MaxRetryError` exception.\n\n    Pass ``None`` to retry until you receive a response. Pass a\n    :class:`~urllib3.util.retry.Retry` object for fine-grained control\n    over different types of retries.\n    Pass an integer number to retry connection errors that many times,\n    but no other types of errors. Pass zero to never retry.\n\n    If ``False``, then retries are disabled and any exception is raised\n    immediately. Also, instead of raising a MaxRetryError on redirects,\n    the redirect response will be returned.\n\n:type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n\n:param redirect:\n    If True, automatically handle redirects (status codes 301, 302,\n    303, 307, 308). Each redirect counts as a retry. Disabling retries\n    will disable redirect, too.\n\n:param assert_same_host:\n    If ``True``, will make sure that the host of the pool requests is\n    consistent else will raise HostChangedError. When ``False``, you can\n    use the pool on an HTTP proxy and request foreign hosts.\n\n:param timeout:\n    If specified, overrides the default timeout for this one\n    request. It may be a float (in seconds) or an instance of\n    :class:`urllib3.util.Timeout`.\n\n:param pool_timeout:\n    If set and the pool is set to block=True, then this method will\n    block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n    connection is available within the time period.\n\n:param release_conn:\n    If False, then the urlopen call will not release the connection\n    back into the pool once a response is received (but will release if\n    you read the entire contents of the response such as when\n    `preload_content=True`). This is useful if you're not preloading\n    the response's content immediately. You will need to call\n    ``r.release_conn()`` on the response ``r`` to return the connection\n    back into the pool. If None, it takes the value of\n    ``response_kw.get('preload_content', True)``.\n\n:param chunked:\n    If True, urllib3 will send the body using chunked transfer\n    encoding. Otherwise, urllib3 will send the body using the standard\n    content-length form. Defaults to False.\n\n:param int body_pos:\n    Position to seek to in file-like body in the event of a retry or\n    redirect. Typically this won't need to be set because urllib3 will\n    auto-populate the value when needed.\n\n:param \\**response_kw:\n    Additional parameters are passed to\n    :meth:`urllib3.response.HTTPResponse.from_httplib`"
        }
      ]
    },
    {
      "name": "HTTPSConnectionPool",
      "docstring": "Same as :class:`.HTTPConnectionPool`, but HTTPS.\n\n:class:`.HTTPSConnection` uses one of ``assert_fingerprint``,\n``assert_hostname`` and ``host`` in this order to verify connections.\nIf ``assert_hostname`` is False, no verification is done.\n\nThe ``key_file``, ``cert_file``, ``cert_reqs``, ``ca_certs``,\n``ca_cert_dir``, ``ssl_version``, ``key_password`` are only used if :mod:`ssl`\nis available and are fed into :meth:`urllib3.util.ssl_wrap_socket` to upgrade\nthe connection socket into an SSL socket.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "connection_from_url",
      "docstring": "Given a url, return an :class:`.ConnectionPool` instance of its host.\n\nThis is a shortcut for not having to parse out the scheme, host, and port\nof the url before creating an :class:`.ConnectionPool` instance.\n\n:param url:\n    Absolute URL string that must include the scheme. Port is optional.\n\n:param \\**kw:\n    Passes additional parameters to the constructor of the appropriate\n    :class:`.ConnectionPool`. Useful for specifying things like\n    timeout, maxsize, headers, etc.\n\nExample::\n\n    >>> conn = connection_from_url('http://google.com/')\n    >>> r = conn.request('GET', '/')"
    },
    {
      "name": "close",
      "docstring": "Close all pooled connections and disable the pool."
    },
    {
      "name": "close",
      "docstring": "Close all pooled connections and disable the pool."
    },
    {
      "name": "is_same_host",
      "docstring": "Check if the given ``url`` is a member of the same host as this\nconnection pool."
    },
    {
      "name": "urlopen",
      "docstring": "Get a connection from the pool and perform an HTTP request. This is the\nlowest level call for making a request, so you'll need to specify all\nthe raw details.\n\n.. note::\n\n   More commonly, it's appropriate to use a convenience method provided\n   by :class:`.RequestMethods`, such as :meth:`request`.\n\n.. note::\n\n   `release_conn` will only behave as expected if\n   `preload_content=False` because we want to make\n   `preload_content=False` the default behaviour someday soon without\n   breaking backwards compatibility.\n\n:param method:\n    HTTP request method (such as GET, POST, PUT, etc.)\n\n:param url:\n    The URL to perform the request on.\n\n:param body:\n    Data to send in the request body, either :class:`str`, :class:`bytes`,\n    an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n\n:param headers:\n    Dictionary of custom headers to send, such as User-Agent,\n    If-None-Match, etc. If None, pool headers are used. If provided,\n    these headers completely replace any pool-specific headers.\n\n:param retries:\n    Configure the number of retries to allow before raising a\n    :class:`~urllib3.exceptions.MaxRetryError` exception.\n\n    Pass ``None`` to retry until you receive a response. Pass a\n    :class:`~urllib3.util.retry.Retry` object for fine-grained control\n    over different types of retries.\n    Pass an integer number to retry connection errors that many times,\n    but no other types of errors. Pass zero to never retry.\n\n    If ``False``, then retries are disabled and any exception is raised\n    immediately. Also, instead of raising a MaxRetryError on redirects,\n    the redirect response will be returned.\n\n:type retries: :class:`~urllib3.util.retry.Retry`, False, or an int.\n\n:param redirect:\n    If True, automatically handle redirects (status codes 301, 302,\n    303, 307, 308). Each redirect counts as a retry. Disabling retries\n    will disable redirect, too.\n\n:param assert_same_host:\n    If ``True``, will make sure that the host of the pool requests is\n    consistent else will raise HostChangedError. When ``False``, you can\n    use the pool on an HTTP proxy and request foreign hosts.\n\n:param timeout:\n    If specified, overrides the default timeout for this one\n    request. It may be a float (in seconds) or an instance of\n    :class:`urllib3.util.Timeout`.\n\n:param pool_timeout:\n    If set and the pool is set to block=True, then this method will\n    block for ``pool_timeout`` seconds and raise EmptyPoolError if no\n    connection is available within the time period.\n\n:param release_conn:\n    If False, then the urlopen call will not release the connection\n    back into the pool once a response is received (but will release if\n    you read the entire contents of the response such as when\n    `preload_content=True`). This is useful if you're not preloading\n    the response's content immediately. You will need to call\n    ``r.release_conn()`` on the response ``r`` to return the connection\n    back into the pool. If None, it takes the value of\n    ``response_kw.get('preload_content', True)``.\n\n:param chunked:\n    If True, urllib3 will send the body using chunked transfer\n    encoding. Otherwise, urllib3 will send the body using the standard\n    content-length form. Defaults to False.\n\n:param int body_pos:\n    Position to seek to in file-like body in the event of a retry or\n    redirect. Typically this won't need to be set because urllib3 will\n    auto-populate the value when needed.\n\n:param \\**response_kw:\n    Additional parameters are passed to\n    :meth:`urllib3.response.HTTPResponse.from_httplib`"
    }
  ],
  "innovations": []
}