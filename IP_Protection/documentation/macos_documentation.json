{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\macos.py",
  "classes": [
    {
      "name": "MacOS",
      "docstring": "Platform directories for the macOS operating system.\n\nFollows the guidance from\n`Apple documentation <https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html>`_.\nMakes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`,\n`version <platformdirs.api.PlatformDirsABC.version>`,\n`ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.",
      "methods": [
        {
          "name": "user_data_dir",
          "docstring": ":return: data directory tied to the user, e.g. ``~/Library/Application Support/$appname/$version``"
        },
        {
          "name": "site_data_dir",
          "docstring": ":return: data directory shared by users, e.g. ``/Library/Application Support/$appname/$version``.\n  If we're using a Python binary managed by `Homebrew <https://brew.sh>`_, the directory\n  will be under the Homebrew prefix, e.g. ``/opt/homebrew/share/$appname/$version``.\n  If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n  the response is a multi-path string separated by \":\", e.g.\n  ``/opt/homebrew/share/$appname/$version:/Library/Application Support/$appname/$version``"
        },
        {
          "name": "site_data_path",
          "docstring": ":return: data path shared by users. Only return the first item, even if ``multipath`` is set to ``True``"
        },
        {
          "name": "user_config_dir",
          "docstring": ":return: config directory tied to the user, same as `user_data_dir`"
        },
        {
          "name": "site_config_dir",
          "docstring": ":return: config directory shared by the users, same as `site_data_dir`"
        },
        {
          "name": "user_cache_dir",
          "docstring": ":return: cache directory tied to the user, e.g. ``~/Library/Caches/$appname/$version``"
        },
        {
          "name": "site_cache_dir",
          "docstring": ":return: cache directory shared by users, e.g. ``/Library/Caches/$appname/$version``.\n  If we're using a Python binary managed by `Homebrew <https://brew.sh>`_, the directory\n  will be under the Homebrew prefix, e.g. ``/opt/homebrew/var/cache/$appname/$version``.\n  If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n  the response is a multi-path string separated by \":\", e.g.\n  ``/opt/homebrew/var/cache/$appname/$version:/Library/Caches/$appname/$version``"
        },
        {
          "name": "site_cache_path",
          "docstring": ":return: cache path shared by users. Only return the first item, even if ``multipath`` is set to ``True``"
        },
        {
          "name": "user_state_dir",
          "docstring": ":return: state directory tied to the user, same as `user_data_dir`"
        },
        {
          "name": "user_log_dir",
          "docstring": ":return: log directory tied to the user, e.g. ``~/Library/Logs/$appname/$version``"
        },
        {
          "name": "user_documents_dir",
          "docstring": ":return: documents directory tied to the user, e.g. ``~/Documents``"
        },
        {
          "name": "user_downloads_dir",
          "docstring": ":return: downloads directory tied to the user, e.g. ``~/Downloads``"
        },
        {
          "name": "user_pictures_dir",
          "docstring": ":return: pictures directory tied to the user, e.g. ``~/Pictures``"
        },
        {
          "name": "user_videos_dir",
          "docstring": ":return: videos directory tied to the user, e.g. ``~/Movies``"
        },
        {
          "name": "user_music_dir",
          "docstring": ":return: music directory tied to the user, e.g. ``~/Music``"
        },
        {
          "name": "user_desktop_dir",
          "docstring": ":return: desktop directory tied to the user, e.g. ``~/Desktop``"
        },
        {
          "name": "user_runtime_dir",
          "docstring": ":return: runtime directory tied to the user, e.g. ``~/Library/Caches/TemporaryItems/$appname/$version``"
        },
        {
          "name": "site_runtime_dir",
          "docstring": ":return: runtime directory shared by users, same as `user_runtime_dir`"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "user_data_dir",
      "docstring": ":return: data directory tied to the user, e.g. ``~/Library/Application Support/$appname/$version``"
    },
    {
      "name": "site_data_dir",
      "docstring": ":return: data directory shared by users, e.g. ``/Library/Application Support/$appname/$version``.\n  If we're using a Python binary managed by `Homebrew <https://brew.sh>`_, the directory\n  will be under the Homebrew prefix, e.g. ``/opt/homebrew/share/$appname/$version``.\n  If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n  the response is a multi-path string separated by \":\", e.g.\n  ``/opt/homebrew/share/$appname/$version:/Library/Application Support/$appname/$version``"
    },
    {
      "name": "site_data_path",
      "docstring": ":return: data path shared by users. Only return the first item, even if ``multipath`` is set to ``True``"
    },
    {
      "name": "user_config_dir",
      "docstring": ":return: config directory tied to the user, same as `user_data_dir`"
    },
    {
      "name": "site_config_dir",
      "docstring": ":return: config directory shared by the users, same as `site_data_dir`"
    },
    {
      "name": "user_cache_dir",
      "docstring": ":return: cache directory tied to the user, e.g. ``~/Library/Caches/$appname/$version``"
    },
    {
      "name": "site_cache_dir",
      "docstring": ":return: cache directory shared by users, e.g. ``/Library/Caches/$appname/$version``.\n  If we're using a Python binary managed by `Homebrew <https://brew.sh>`_, the directory\n  will be under the Homebrew prefix, e.g. ``/opt/homebrew/var/cache/$appname/$version``.\n  If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n  the response is a multi-path string separated by \":\", e.g.\n  ``/opt/homebrew/var/cache/$appname/$version:/Library/Caches/$appname/$version``"
    },
    {
      "name": "site_cache_path",
      "docstring": ":return: cache path shared by users. Only return the first item, even if ``multipath`` is set to ``True``"
    },
    {
      "name": "user_state_dir",
      "docstring": ":return: state directory tied to the user, same as `user_data_dir`"
    },
    {
      "name": "user_log_dir",
      "docstring": ":return: log directory tied to the user, e.g. ``~/Library/Logs/$appname/$version``"
    },
    {
      "name": "user_documents_dir",
      "docstring": ":return: documents directory tied to the user, e.g. ``~/Documents``"
    },
    {
      "name": "user_downloads_dir",
      "docstring": ":return: downloads directory tied to the user, e.g. ``~/Downloads``"
    },
    {
      "name": "user_pictures_dir",
      "docstring": ":return: pictures directory tied to the user, e.g. ``~/Pictures``"
    },
    {
      "name": "user_videos_dir",
      "docstring": ":return: videos directory tied to the user, e.g. ``~/Movies``"
    },
    {
      "name": "user_music_dir",
      "docstring": ":return: music directory tied to the user, e.g. ``~/Music``"
    },
    {
      "name": "user_desktop_dir",
      "docstring": ":return: desktop directory tied to the user, e.g. ``~/Desktop``"
    },
    {
      "name": "user_runtime_dir",
      "docstring": ":return: runtime directory tied to the user, e.g. ``~/Library/Caches/TemporaryItems/$appname/$version``"
    },
    {
      "name": "site_runtime_dir",
      "docstring": ":return: runtime directory shared by users, same as `user_runtime_dir`"
    }
  ],
  "innovations": []
}