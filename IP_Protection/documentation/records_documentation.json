{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\_core\\records.py",
  "classes": [
    {
      "name": "format_parser",
      "docstring": "Class to convert formats, names, titles description to a dtype.\n\nAfter constructing the format_parser object, the dtype attribute is\nthe converted data-type:\n``dtype = format_parser(formats, names, titles).dtype``\n\nAttributes\n----------\ndtype : dtype\n    The converted data-type.\n\nParameters\n----------\nformats : str or list of str\n    The format description, either specified as a string with\n    comma-separated format descriptions in the form ``'f8, i4, S5'``, or\n    a list of format description strings  in the form\n    ``['f8', 'i4', 'S5']``.\nnames : str or list/tuple of str\n    The field names, either specified as a comma-separated string in the\n    form ``'col1, col2, col3'``, or as a list or tuple of strings in the\n    form ``['col1', 'col2', 'col3']``.\n    An empty list can be used, in that case default field names\n    ('f0', 'f1', ...) are used.\ntitles : sequence\n    Sequence of title strings. An empty list can be used to leave titles\n    out.\naligned : bool, optional\n    If True, align the fields by padding as the C-compiler would.\n    Default is False.\nbyteorder : str, optional\n    If specified, all the fields will be changed to the\n    provided byte-order.  Otherwise, the default byte-order is\n    used. For all available string specifiers, see `dtype.newbyteorder`.\n\nSee Also\n--------\nnumpy.dtype, numpy.typename\n\nExamples\n--------\n>>> import numpy as np\n>>> np.rec.format_parser(['<f8', '<i4'], ['col1', 'col2'],\n...                      ['T1', 'T2']).dtype\ndtype([(('T1', 'col1'), '<f8'), (('T2', 'col2'), '<i4')])\n\n`names` and/or `titles` can be empty lists. If `titles` is an empty list,\ntitles will simply not appear. If `names` is empty, default field names\nwill be used.\n\n>>> np.rec.format_parser(['f8', 'i4', 'a5'], ['col1', 'col2', 'col3'],\n...                      []).dtype\ndtype([('col1', '<f8'), ('col2', '<i4'), ('col3', '<S5')])\n>>> np.rec.format_parser(['<f8', '<i4', '<a5'], [], []).dtype\ndtype([('f0', '<f8'), ('f1', '<i4'), ('f2', 'S5')])",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "record",
      "docstring": "A data-type scalar that allows field access as attribute lookup.\n    ",
      "methods": [
        {
          "name": "pprint",
          "docstring": "Pretty-print all fields."
        }
      ]
    },
    {
      "name": "recarray",
      "docstring": "Construct an ndarray that allows field access using attributes.\n\nArrays may have a data-types containing fields, analogous\nto columns in a spread sheet.  An example is ``[(x, int), (y, float)]``,\nwhere each entry in the array is a pair of ``(int, float)``.  Normally,\nthese attributes are accessed using dictionary lookups such as ``arr['x']``\nand ``arr['y']``.  Record arrays allow the fields to be accessed as members\nof the array, using ``arr.x`` and ``arr.y``.\n\nParameters\n----------\nshape : tuple\n    Shape of output array.\ndtype : data-type, optional\n    The desired data-type.  By default, the data-type is determined\n    from `formats`, `names`, `titles`, `aligned` and `byteorder`.\nformats : list of data-types, optional\n    A list containing the data-types for the different columns, e.g.\n    ``['i4', 'f8', 'i4']``.  `formats` does *not* support the new\n    convention of using types directly, i.e. ``(int, float, int)``.\n    Note that `formats` must be a list, not a tuple.\n    Given that `formats` is somewhat limited, we recommend specifying\n    `dtype` instead.\nnames : tuple of str, optional\n    The name of each column, e.g. ``('x', 'y', 'z')``.\nbuf : buffer, optional\n    By default, a new array is created of the given shape and data-type.\n    If `buf` is specified and is an object exposing the buffer interface,\n    the array will use the memory from the existing buffer.  In this case,\n    the `offset` and `strides` keywords are available.\n\nOther Parameters\n----------------\ntitles : tuple of str, optional\n    Aliases for column names.  For example, if `names` were\n    ``('x', 'y', 'z')`` and `titles` is\n    ``('x_coordinate', 'y_coordinate', 'z_coordinate')``, then\n    ``arr['x']`` is equivalent to both ``arr.x`` and ``arr.x_coordinate``.\nbyteorder : {'<', '>', '='}, optional\n    Byte-order for all fields.\naligned : bool, optional\n    Align the fields in memory as the C-compiler would.\nstrides : tuple of ints, optional\n    Buffer (`buf`) is interpreted according to these strides (strides\n    define how many bytes each array element, row, column, etc.\n    occupy in memory).\noffset : int, optional\n    Start reading buffer (`buf`) from this offset onwards.\norder : {'C', 'F'}, optional\n    Row-major (C-style) or column-major (Fortran-style) order.\n\nReturns\n-------\nrec : recarray\n    Empty array of the given shape and type.\n\nSee Also\n--------\nnumpy.rec.fromrecords : Construct a record array from data.\nnumpy.record : fundamental data-type for `recarray`.\nnumpy.rec.format_parser : determine data-type from formats, names, titles.\n\nNotes\n-----\nThis constructor can be compared to ``empty``: it creates a new record\narray but does not fill it with data.  To create a record array from data,\nuse one of the following methods:\n\n1. Create a standard ndarray and convert it to a record array,\n   using ``arr.view(np.recarray)``\n2. Use the `buf` keyword.\n3. Use `np.rec.fromrecords`.\n\nExamples\n--------\nCreate an array with two fields, ``x`` and ``y``:\n\n>>> import numpy as np\n>>> x = np.array([(1.0, 2), (3.0, 4)], dtype=[('x', '<f8'), ('y', '<i8')])\n>>> x\narray([(1., 2), (3., 4)], dtype=[('x', '<f8'), ('y', '<i8')])\n\n>>> x['x']\narray([1., 3.])\n\nView the array as a record array:\n\n>>> x = x.view(np.recarray)\n\n>>> x.x\narray([1., 3.])\n\n>>> x.y\narray([2, 4])\n\nCreate a new, empty record array:\n\n>>> np.recarray((2,),\n... dtype=[('x', int), ('y', float), ('z', int)]) #doctest: +SKIP\nrec.array([(-1073741821, 1.2249118382103472e-301, 24547520),\n       (3471280, 1.2134086255804012e-316, 0)],\n      dtype=[('x', '<i4'), ('y', '<f8'), ('z', '<i4')])",
      "methods": [
        {
          "name": "field",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "find_duplicate",
      "docstring": "Find duplication in a list, return a list of duplicated elements"
    },
    {
      "name": "fromarrays",
      "docstring": "Create a record array from a (flat) list of arrays\n\nParameters\n----------\narrayList : list or tuple\n    List of array-like objects (such as lists, tuples,\n    and ndarrays).\ndtype : data-type, optional\n    valid dtype for all arrays\nshape : int or tuple of ints, optional\n    Shape of the resulting array. If not provided, inferred from\n    ``arrayList[0]``.\nformats, names, titles, aligned, byteorder :\n    If `dtype` is ``None``, these arguments are passed to\n    `numpy.rec.format_parser` to construct a dtype. See that function for\n    detailed documentation.\n\nReturns\n-------\nnp.recarray\n    Record array consisting of given arrayList columns.\n\nExamples\n--------\n>>> x1=np.array([1,2,3,4])\n>>> x2=np.array(['a','dd','xyz','12'])\n>>> x3=np.array([1.1,2,3,4])\n>>> r = np.rec.fromarrays([x1,x2,x3],names='a,b,c')\n>>> print(r[1])\n(2, 'dd', 2.0) # may vary\n>>> x1[1]=34\n>>> r.a\narray([1, 2, 3, 4])\n\n>>> x1 = np.array([1, 2, 3, 4])\n>>> x2 = np.array(['a', 'dd', 'xyz', '12'])\n>>> x3 = np.array([1.1, 2, 3,4])\n>>> r = np.rec.fromarrays(\n...     [x1, x2, x3],\n...     dtype=np.dtype([('a', np.int32), ('b', 'S3'), ('c', np.float32)]))\n>>> r\nrec.array([(1, b'a', 1.1), (2, b'dd', 2. ), (3, b'xyz', 3. ),\n           (4, b'12', 4. )],\n          dtype=[('a', '<i4'), ('b', 'S3'), ('c', '<f4')])"
    },
    {
      "name": "fromrecords",
      "docstring": "Create a recarray from a list of records in text form.\n\nParameters\n----------\nrecList : sequence\n    data in the same field may be heterogeneous - they will be promoted\n    to the highest data type.\ndtype : data-type, optional\n    valid dtype for all arrays\nshape : int or tuple of ints, optional\n    shape of each array.\nformats, names, titles, aligned, byteorder :\n    If `dtype` is ``None``, these arguments are passed to\n    `numpy.format_parser` to construct a dtype. See that function for\n    detailed documentation.\n\n    If both `formats` and `dtype` are None, then this will auto-detect\n    formats. Use list of tuples rather than list of lists for faster\n    processing.\n\nReturns\n-------\nnp.recarray\n    record array consisting of given recList rows.\n\nExamples\n--------\n>>> r=np.rec.fromrecords([(456,'dbe',1.2),(2,'de',1.3)],\n... names='col1,col2,col3')\n>>> print(r[0])\n(456, 'dbe', 1.2)\n>>> r.col1\narray([456,   2])\n>>> r.col2\narray(['dbe', 'de'], dtype='<U3')\n>>> import pickle\n>>> pickle.loads(pickle.dumps(r))\nrec.array([(456, 'dbe', 1.2), (  2, 'de', 1.3)],\n          dtype=[('col1', '<i8'), ('col2', '<U3'), ('col3', '<f8')])"
    },
    {
      "name": "fromstring",
      "docstring": "Create a record array from binary data\n\nNote that despite the name of this function it does not accept `str`\ninstances.\n\nParameters\n----------\ndatastring : bytes-like\n    Buffer of binary data\ndtype : data-type, optional\n    Valid dtype for all arrays\nshape : int or tuple of ints, optional\n    Shape of each array.\noffset : int, optional\n    Position in the buffer to start reading from.\nformats, names, titles, aligned, byteorder :\n    If `dtype` is ``None``, these arguments are passed to\n    `numpy.format_parser` to construct a dtype. See that function for\n    detailed documentation.\n\n\nReturns\n-------\nnp.recarray\n    Record array view into the data in datastring. This will be readonly\n    if `datastring` is readonly.\n\nSee Also\n--------\nnumpy.frombuffer\n\nExamples\n--------\n>>> a = b'\\x01\\x02\\x03abc'\n>>> np.rec.fromstring(a, dtype='u1,u1,u1,S3')\nrec.array([(1, 2, 3, b'abc')],\n        dtype=[('f0', 'u1'), ('f1', 'u1'), ('f2', 'u1'), ('f3', 'S3')])\n\n>>> grades_dtype = [('Name', (np.str_, 10)), ('Marks', np.float64),\n...                 ('GradeLevel', np.int32)]\n>>> grades_array = np.array([('Sam', 33.3, 3), ('Mike', 44.4, 5),\n...                         ('Aadi', 66.6, 6)], dtype=grades_dtype)\n>>> np.rec.fromstring(grades_array.tobytes(), dtype=grades_dtype)\nrec.array([('Sam', 33.3, 3), ('Mike', 44.4, 5), ('Aadi', 66.6, 6)],\n        dtype=[('Name', '<U10'), ('Marks', '<f8'), ('GradeLevel', '<i4')])\n\n>>> s = '\\x01\\x02\\x03abc'\n>>> np.rec.fromstring(s, dtype='u1,u1,u1,S3')\nTraceback (most recent call last):\n   ...\nTypeError: a bytes-like object is required, not 'str'"
    },
    {
      "name": "get_remaining_size",
      "docstring": null
    },
    {
      "name": "fromfile",
      "docstring": "Create an array from binary file data\n\nParameters\n----------\nfd : str or file type\n    If file is a string or a path-like object then that file is opened,\n    else it is assumed to be a file object. The file object must\n    support random access (i.e. it must have tell and seek methods).\ndtype : data-type, optional\n    valid dtype for all arrays\nshape : int or tuple of ints, optional\n    shape of each array.\noffset : int, optional\n    Position in the file to start reading from.\nformats, names, titles, aligned, byteorder :\n    If `dtype` is ``None``, these arguments are passed to\n    `numpy.format_parser` to construct a dtype. See that function for\n    detailed documentation\n\nReturns\n-------\nnp.recarray\n    record array consisting of data enclosed in file.\n\nExamples\n--------\n>>> from tempfile import TemporaryFile\n>>> a = np.empty(10,dtype='f8,i4,a5')\n>>> a[5] = (0.5,10,'abcde')\n>>>\n>>> fd=TemporaryFile()\n>>> a = a.view(a.dtype.newbyteorder('<'))\n>>> a.tofile(fd)\n>>>\n>>> _ = fd.seek(0)\n>>> r=np.rec.fromfile(fd, formats='f8,i4,a5', shape=10,\n... byteorder='<')\n>>> print(r[5])\n(0.5, 10, b'abcde')\n>>> r.shape\n(10,)"
    },
    {
      "name": "array",
      "docstring": "Construct a record array from a wide-variety of objects.\n\nA general-purpose record array constructor that dispatches to the\nappropriate `recarray` creation function based on the inputs (see Notes).\n\nParameters\n----------\nobj : any\n    Input object. See Notes for details on how various input types are\n    treated.\ndtype : data-type, optional\n    Valid dtype for array.\nshape : int or tuple of ints, optional\n    Shape of each array.\noffset : int, optional\n    Position in the file or buffer to start reading from.\nstrides : tuple of ints, optional\n    Buffer (`buf`) is interpreted according to these strides (strides\n    define how many bytes each array element, row, column, etc.\n    occupy in memory).\nformats, names, titles, aligned, byteorder :\n    If `dtype` is ``None``, these arguments are passed to\n    `numpy.format_parser` to construct a dtype. See that function for\n    detailed documentation.\ncopy : bool, optional\n    Whether to copy the input object (True), or to use a reference instead.\n    This option only applies when the input is an ndarray or recarray.\n    Defaults to True.\n\nReturns\n-------\nnp.recarray\n    Record array created from the specified object.\n\nNotes\n-----\nIf `obj` is ``None``, then call the `~numpy.recarray` constructor. If\n`obj` is a string, then call the `fromstring` constructor. If `obj` is a\nlist or a tuple, then if the first object is an `~numpy.ndarray`, call\n`fromarrays`, otherwise call `fromrecords`. If `obj` is a\n`~numpy.recarray`, then make a copy of the data in the recarray\n(if ``copy=True``) and use the new formats, names, and titles. If `obj`\nis a file, then call `fromfile`. Finally, if obj is an `ndarray`, then\nreturn ``obj.view(recarray)``, making a copy of the data if ``copy=True``.\n\nExamples\n--------\n>>> a = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n>>> a\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n>>> np.rec.array(a)\nrec.array([[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]],\n          dtype=int64)\n\n>>> b = [(1, 1), (2, 4), (3, 9)]\n>>> c = np.rec.array(b, formats = ['i2', 'f2'], names = ('x', 'y'))\n>>> c\nrec.array([(1, 1.), (2, 4.), (3, 9.)],\n          dtype=[('x', '<i2'), ('y', '<f2')])\n\n>>> c.x\narray([1, 2, 3], dtype=int16)\n\n>>> c.y\narray([1.,  4.,  9.], dtype=float16)\n\n>>> r = np.rec.array(['abc','def'], names=['col1','col2'])\n>>> print(r.col1)\nabc\n\n>>> r.col1\narray('abc', dtype='<U3')\n\n>>> r.col2\narray('def', dtype='<U3')"
    },
    {
      "name": "pprint",
      "docstring": "Pretty-print all fields."
    },
    {
      "name": "field",
      "docstring": null
    }
  ],
  "innovations": []
}