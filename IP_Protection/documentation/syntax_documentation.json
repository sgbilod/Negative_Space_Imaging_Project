{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\rich\\syntax.py",
  "classes": [
    {
      "name": "SyntaxTheme",
      "docstring": "Base class for a syntax theme.",
      "methods": [
        {
          "name": "get_style_for_token",
          "docstring": "Get a style for a given Pygments token."
        },
        {
          "name": "get_background_style",
          "docstring": "Get the background color."
        }
      ]
    },
    {
      "name": "PygmentsSyntaxTheme",
      "docstring": "Syntax theme that delegates to Pygments theme.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_style_for_token",
          "docstring": "Get a style from a Pygments class."
        },
        {
          "name": "get_background_style",
          "docstring": null
        }
      ]
    },
    {
      "name": "ANSISyntaxTheme",
      "docstring": "Syntax theme to use standard colors.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_style_for_token",
          "docstring": "Look up style in the style map."
        },
        {
          "name": "get_background_style",
          "docstring": null
        }
      ]
    },
    {
      "name": "_SyntaxHighlightRange",
      "docstring": "A range to highlight in a Syntax object.\n`start` and `end` are 2-integers tuples, where the first integer is the line number\n(starting from 1) and the second integer is the column index (starting from 0).",
      "methods": []
    },
    {
      "name": "Syntax",
      "docstring": "Construct a Syntax object to render syntax highlighted code.\n\nArgs:\n    code (str): Code to highlight.\n    lexer (Lexer | str): Lexer to use (see https://pygments.org/docs/lexers/)\n    theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to \"monokai\".\n    dedent (bool, optional): Enable stripping of initial whitespace. Defaults to False.\n    line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.\n    start_line (int, optional): Starting number for line numbers. Defaults to 1.\n    line_range (Tuple[int | None, int | None], optional): If given should be a tuple of the start and end line to render.\n        A value of None in the tuple indicates the range is open in that direction.\n    highlight_lines (Set[int]): A set of line numbers to highlight.\n    code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.\n    tab_size (int, optional): Size of tabs. Defaults to 4.\n    word_wrap (bool, optional): Enable word wrapping.\n    background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.\n    indent_guides (bool, optional): Show indent guides. Defaults to False.\n    padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).",
      "methods": [
        {
          "name": "get_theme",
          "docstring": "Get a syntax theme instance."
        },
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "from_path",
          "docstring": "Construct a Syntax object from a file.\n\nArgs:\n    path (str): Path to file to highlight.\n    encoding (str): Encoding of file.\n    lexer (str | Lexer, optional): Lexer to use. If None, lexer will be auto-detected from path/file content.\n    theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to \"emacs\".\n    dedent (bool, optional): Enable stripping of initial whitespace. Defaults to True.\n    line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.\n    start_line (int, optional): Starting number for line numbers. Defaults to 1.\n    line_range (Tuple[int, int], optional): If given should be a tuple of the start and end line to render.\n    highlight_lines (Set[int]): A set of line numbers to highlight.\n    code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.\n    tab_size (int, optional): Size of tabs. Defaults to 4.\n    word_wrap (bool, optional): Enable word wrapping of code.\n    background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.\n    indent_guides (bool, optional): Show indent guides. Defaults to False.\n    padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).\n\nReturns:\n    [Syntax]: A Syntax object that may be printed to the console"
        },
        {
          "name": "guess_lexer",
          "docstring": "Guess the alias of the Pygments lexer to use based on a path and an optional string of code.\nIf code is supplied, it will use a combination of the code and the filename to determine the\nbest lexer to use. For example, if the file is ``index.html`` and the file contains Django\ntemplating syntax, then \"html+django\" will be returned. If the file is ``index.html``, and no\ntemplating language is used, the \"html\" lexer will be used. If no string of code\nis supplied, the lexer will be chosen based on the file extension..\n\nArgs:\n     path (AnyStr): The path to the file containing the code you wish to know the lexer for.\n     code (str, optional): Optional string of code that will be used as a fallback if no lexer\n        is found for the supplied path.\n\nReturns:\n    str: The name of the Pygments lexer that best matches the supplied path/code."
        },
        {
          "name": "lexer",
          "docstring": "The lexer for this syntax, or None if no lexer was found.\n\nTries to find the lexer by name if a string was passed to the constructor."
        },
        {
          "name": "default_lexer",
          "docstring": "A Pygments Lexer to use if one is not specified or invalid."
        },
        {
          "name": "highlight",
          "docstring": "Highlight code and return a Text instance.\n\nArgs:\n    code (str): Code to highlight.\n    line_range(Tuple[int, int], optional): Optional line range to highlight.\n\nReturns:\n    Text: A text instance containing highlighted syntax."
        },
        {
          "name": "stylize_range",
          "docstring": "Adds a custom style on a part of the code, that will be applied to the syntax display when it's rendered.\nLine numbers are 1-based, while column indexes are 0-based.\n\nArgs:\n    style (StyleType): The style to apply.\n    start (Tuple[int, int]): The start of the range, in the form `[line number, column index]`.\n    end (Tuple[int, int]): The end of the range, in the form `[line number, column index]`.\n    style_before (bool): Apply the style before any existing styles."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_style_for_token",
      "docstring": "Get a style for a given Pygments token."
    },
    {
      "name": "get_background_style",
      "docstring": "Get the background color."
    },
    {
      "name": "get_style_for_token",
      "docstring": "Get a style from a Pygments class."
    },
    {
      "name": "get_background_style",
      "docstring": null
    },
    {
      "name": "get_style_for_token",
      "docstring": "Look up style in the style map."
    },
    {
      "name": "get_background_style",
      "docstring": null
    },
    {
      "name": "get_theme",
      "docstring": "Get a syntax theme instance."
    },
    {
      "name": "from_path",
      "docstring": "Construct a Syntax object from a file.\n\nArgs:\n    path (str): Path to file to highlight.\n    encoding (str): Encoding of file.\n    lexer (str | Lexer, optional): Lexer to use. If None, lexer will be auto-detected from path/file content.\n    theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to \"emacs\".\n    dedent (bool, optional): Enable stripping of initial whitespace. Defaults to True.\n    line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.\n    start_line (int, optional): Starting number for line numbers. Defaults to 1.\n    line_range (Tuple[int, int], optional): If given should be a tuple of the start and end line to render.\n    highlight_lines (Set[int]): A set of line numbers to highlight.\n    code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.\n    tab_size (int, optional): Size of tabs. Defaults to 4.\n    word_wrap (bool, optional): Enable word wrapping of code.\n    background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.\n    indent_guides (bool, optional): Show indent guides. Defaults to False.\n    padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).\n\nReturns:\n    [Syntax]: A Syntax object that may be printed to the console"
    },
    {
      "name": "guess_lexer",
      "docstring": "Guess the alias of the Pygments lexer to use based on a path and an optional string of code.\nIf code is supplied, it will use a combination of the code and the filename to determine the\nbest lexer to use. For example, if the file is ``index.html`` and the file contains Django\ntemplating syntax, then \"html+django\" will be returned. If the file is ``index.html``, and no\ntemplating language is used, the \"html\" lexer will be used. If no string of code\nis supplied, the lexer will be chosen based on the file extension..\n\nArgs:\n     path (AnyStr): The path to the file containing the code you wish to know the lexer for.\n     code (str, optional): Optional string of code that will be used as a fallback if no lexer\n        is found for the supplied path.\n\nReturns:\n    str: The name of the Pygments lexer that best matches the supplied path/code."
    },
    {
      "name": "lexer",
      "docstring": "The lexer for this syntax, or None if no lexer was found.\n\nTries to find the lexer by name if a string was passed to the constructor."
    },
    {
      "name": "default_lexer",
      "docstring": "A Pygments Lexer to use if one is not specified or invalid."
    },
    {
      "name": "highlight",
      "docstring": "Highlight code and return a Text instance.\n\nArgs:\n    code (str): Code to highlight.\n    line_range(Tuple[int, int], optional): Optional line range to highlight.\n\nReturns:\n    Text: A text instance containing highlighted syntax."
    },
    {
      "name": "stylize_range",
      "docstring": "Adds a custom style on a part of the code, that will be applied to the syntax display when it's rendered.\nLine numbers are 1-based, while column indexes are 0-based.\n\nArgs:\n    style (StyleType): The style to apply.\n    start (Tuple[int, int]): The start of the range, in the form `[line number, column index]`.\n    end (Tuple[int, int]): The end of the range, in the form `[line number, column index]`.\n    style_before (bool): Apply the style before any existing styles."
    },
    {
      "name": "line_tokenize",
      "docstring": "Split tokens to one per line."
    },
    {
      "name": "tokens_to_spans",
      "docstring": "Convert tokens to spans."
    }
  ],
  "innovations": []
}