{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\tri\\_trifinder.py",
  "classes": [
    {
      "name": "TriFinder",
      "docstring": "Abstract base class for classes used to find the triangles of a\nTriangulation in which (x, y) points lie.\n\nRather than instantiate an object of a class derived from TriFinder, it is\nusually better to use the function `.Triangulation.get_trifinder`.\n\nDerived classes implement __call__(x, y) where x and y are array-like point\ncoordinates of the same shape.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "TrapezoidMapTriFinder",
      "docstring": "`~matplotlib.tri.TriFinder` class implemented using the trapezoid\nmap algorithm from the book \"Computational Geometry, Algorithms and\nApplications\", second edition, by M. de Berg, M. van Kreveld, M. Overmars\nand O. Schwarzkopf.\n\nThe triangulation must be valid, i.e. it must not have duplicate points,\ntriangles formed from colinear points, or overlapping triangles.  The\nalgorithm has some tolerance to triangles formed from colinear points, but\nthis should not be relied upon.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [],
  "innovations": []
}