{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\lib\\_arraysetops_impl.py",
  "classes": [
    {
      "name": "UniqueAllResult",
      "docstring": null,
      "methods": []
    },
    {
      "name": "UniqueCountsResult",
      "docstring": null,
      "methods": []
    },
    {
      "name": "UniqueInverseResult",
      "docstring": null,
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "ediff1d",
      "docstring": "The differences between consecutive elements of an array.\n\nParameters\n----------\nary : array_like\n    If necessary, will be flattened before the differences are taken.\nto_end : array_like, optional\n    Number(s) to append at the end of the returned differences.\nto_begin : array_like, optional\n    Number(s) to prepend at the beginning of the returned differences.\n\nReturns\n-------\nediff1d : ndarray\n    The differences. Loosely, this is ``ary.flat[1:] - ary.flat[:-1]``.\n\nSee Also\n--------\ndiff, gradient\n\nNotes\n-----\nWhen applied to masked arrays, this function drops the mask information\nif the `to_begin` and/or `to_end` parameters are used.\n\nExamples\n--------\n>>> import numpy as np\n>>> x = np.array([1, 2, 4, 7, 0])\n>>> np.ediff1d(x)\narray([ 1,  2,  3, -7])\n\n>>> np.ediff1d(x, to_begin=-99, to_end=np.array([88, 99]))\narray([-99,   1,   2, ...,  -7,  88,  99])\n\nThe returned array is always 1D.\n\n>>> y = [[1, 2, 4], [1, 6, 24]]\n>>> np.ediff1d(y)\narray([ 1,  2, -3,  5, 18])"
    },
    {
      "name": "unique",
      "docstring": "Find the unique elements of an array.\n\nReturns the sorted unique elements of an array. There are three optional\noutputs in addition to the unique elements:\n\n* the indices of the input array that give the unique values\n* the indices of the unique array that reconstruct the input array\n* the number of times each unique value comes up in the input array\n\nParameters\n----------\nar : array_like\n    Input array. Unless `axis` is specified, this will be flattened if it\n    is not already 1-D.\nreturn_index : bool, optional\n    If True, also return the indices of `ar` (along the specified axis,\n    if provided, or in the flattened array) that result in the unique array.\nreturn_inverse : bool, optional\n    If True, also return the indices of the unique array (for the specified\n    axis, if provided) that can be used to reconstruct `ar`.\nreturn_counts : bool, optional\n    If True, also return the number of times each unique item appears\n    in `ar`.\naxis : int or None, optional\n    The axis to operate on. If None, `ar` will be flattened. If an integer,\n    the subarrays indexed by the given axis will be flattened and treated\n    as the elements of a 1-D array with the dimension of the given axis,\n    see the notes for more details.  Object arrays or structured arrays\n    that contain objects are not supported if the `axis` kwarg is used. The\n    default is None.\n\nequal_nan : bool, optional\n    If True, collapses multiple NaN values in the return array into one.\n\n    .. versionadded:: 1.24\n\nReturns\n-------\nunique : ndarray\n    The sorted unique values.\nunique_indices : ndarray, optional\n    The indices of the first occurrences of the unique values in the\n    original array. Only provided if `return_index` is True.\nunique_inverse : ndarray, optional\n    The indices to reconstruct the original array from the\n    unique array. Only provided if `return_inverse` is True.\nunique_counts : ndarray, optional\n    The number of times each of the unique values comes up in the\n    original array. Only provided if `return_counts` is True.\n\nSee Also\n--------\nrepeat : Repeat elements of an array.\nsort : Return a sorted copy of an array.\n\nNotes\n-----\nWhen an axis is specified the subarrays indexed by the axis are sorted.\nThis is done by making the specified axis the first dimension of the array\n(move the axis to the first dimension to keep the order of the other axes)\nand then flattening the subarrays in C order. The flattened subarrays are\nthen viewed as a structured type with each element given a label, with the\neffect that we end up with a 1-D array of structured types that can be\ntreated in the same way as any other 1-D array. The result is that the\nflattened subarrays are sorted in lexicographic order starting with the\nfirst element.\n\n.. versionchanged:: 1.21\n    Like np.sort, NaN will sort to the end of the values.\n    For complex arrays all NaN values are considered equivalent\n    (no matter whether the NaN is in the real or imaginary part).\n    As the representant for the returned array the smallest one in the\n    lexicographical order is chosen - see np.sort for how the lexicographical\n    order is defined for complex arrays.\n\n.. versionchanged:: 2.0\n    For multi-dimensional inputs, ``unique_inverse`` is reshaped\n    such that the input can be reconstructed using\n    ``np.take(unique, unique_inverse, axis=axis)``. The result is\n    now not 1-dimensional when ``axis=None``.\n\n    Note that in NumPy 2.0.0 a higher dimensional array was returned also\n    when ``axis`` was not ``None``.  This was reverted, but\n    ``inverse.reshape(-1)`` can be used to ensure compatibility with both\n    versions.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.unique([1, 1, 2, 2, 3, 3])\narray([1, 2, 3])\n>>> a = np.array([[1, 1], [2, 3]])\n>>> np.unique(a)\narray([1, 2, 3])\n\nReturn the unique rows of a 2D array\n\n>>> a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])\n>>> np.unique(a, axis=0)\narray([[1, 0, 0], [2, 3, 4]])\n\nReturn the indices of the original array that give the unique values:\n\n>>> a = np.array(['a', 'b', 'b', 'c', 'a'])\n>>> u, indices = np.unique(a, return_index=True)\n>>> u\narray(['a', 'b', 'c'], dtype='<U1')\n>>> indices\narray([0, 1, 3])\n>>> a[indices]\narray(['a', 'b', 'c'], dtype='<U1')\n\nReconstruct the input array from the unique values and inverse:\n\n>>> a = np.array([1, 2, 6, 4, 2, 3, 2])\n>>> u, indices = np.unique(a, return_inverse=True)\n>>> u\narray([1, 2, 3, 4, 6])\n>>> indices\narray([0, 1, 4, 3, 1, 2, 1])\n>>> u[indices]\narray([1, 2, 6, 4, 2, 3, 2])\n\nReconstruct the input values from the unique values and counts:\n\n>>> a = np.array([1, 2, 6, 4, 2, 3, 2])\n>>> values, counts = np.unique(a, return_counts=True)\n>>> values\narray([1, 2, 3, 4, 6])\n>>> counts\narray([1, 3, 1, 1, 1])\n>>> np.repeat(values, counts)\narray([1, 2, 2, 2, 3, 4, 6])    # original order not preserved"
    },
    {
      "name": "unique_all",
      "docstring": "Find the unique elements of an array, and counts, inverse, and indices.\n\nThis function is an Array API compatible alternative to::\n\n    np.unique(x, return_index=True, return_inverse=True,\n              return_counts=True, equal_nan=False)\n\nbut returns a namedtuple for easier access to each output.\n\nParameters\n----------\nx : array_like\n    Input array. It will be flattened if it is not already 1-D.\n\nReturns\n-------\nout : namedtuple\n    The result containing:\n\n    * values - The unique elements of an input array.\n    * indices - The first occurring indices for each unique element.\n    * inverse_indices - The indices from the set of unique elements\n      that reconstruct `x`.\n    * counts - The corresponding counts for each unique element.\n\nSee Also\n--------\nunique : Find the unique elements of an array.\n\nExamples\n--------\n>>> import numpy as np\n>>> x = [1, 1, 2]\n>>> uniq = np.unique_all(x)\n>>> uniq.values\narray([1, 2])\n>>> uniq.indices\narray([0, 2])\n>>> uniq.inverse_indices\narray([0, 0, 1])\n>>> uniq.counts\narray([2, 1])"
    },
    {
      "name": "unique_counts",
      "docstring": "Find the unique elements and counts of an input array `x`.\n\nThis function is an Array API compatible alternative to::\n\n    np.unique(x, return_counts=True, equal_nan=False)\n\nbut returns a namedtuple for easier access to each output.\n\nParameters\n----------\nx : array_like\n    Input array. It will be flattened if it is not already 1-D.\n\nReturns\n-------\nout : namedtuple\n    The result containing:\n\n    * values - The unique elements of an input array.\n    * counts - The corresponding counts for each unique element.\n\nSee Also\n--------\nunique : Find the unique elements of an array.\n\nExamples\n--------\n>>> import numpy as np\n>>> x = [1, 1, 2]\n>>> uniq = np.unique_counts(x)\n>>> uniq.values\narray([1, 2])\n>>> uniq.counts\narray([2, 1])"
    },
    {
      "name": "unique_inverse",
      "docstring": "Find the unique elements of `x` and indices to reconstruct `x`.\n\nThis function is an Array API compatible alternative to::\n\n    np.unique(x, return_inverse=True, equal_nan=False)\n\nbut returns a namedtuple for easier access to each output.\n\nParameters\n----------\nx : array_like\n    Input array. It will be flattened if it is not already 1-D.\n\nReturns\n-------\nout : namedtuple\n    The result containing:\n\n    * values - The unique elements of an input array.\n    * inverse_indices - The indices from the set of unique elements\n      that reconstruct `x`.\n\nSee Also\n--------\nunique : Find the unique elements of an array.\n\nExamples\n--------\n>>> import numpy as np\n>>> x = [1, 1, 2]\n>>> uniq = np.unique_inverse(x)\n>>> uniq.values\narray([1, 2])\n>>> uniq.inverse_indices\narray([0, 0, 1])"
    },
    {
      "name": "unique_values",
      "docstring": "Returns the unique elements of an input array `x`.\n\nThis function is an Array API compatible alternative to::\n\n    np.unique(x, equal_nan=False)\n\nParameters\n----------\nx : array_like\n    Input array. It will be flattened if it is not already 1-D.\n\nReturns\n-------\nout : ndarray\n    The unique elements of an input array.\n\nSee Also\n--------\nunique : Find the unique elements of an array.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.unique_values([1, 1, 2])\narray([1, 2])"
    },
    {
      "name": "intersect1d",
      "docstring": "Find the intersection of two arrays.\n\nReturn the sorted, unique values that are in both of the input arrays.\n\nParameters\n----------\nar1, ar2 : array_like\n    Input arrays. Will be flattened if not already 1D.\nassume_unique : bool\n    If True, the input arrays are both assumed to be unique, which\n    can speed up the calculation.  If True but ``ar1`` or ``ar2`` are not\n    unique, incorrect results and out-of-bounds indices could result.\n    Default is False.\nreturn_indices : bool\n    If True, the indices which correspond to the intersection of the two\n    arrays are returned. The first instance of a value is used if there are\n    multiple. Default is False.\n\nReturns\n-------\nintersect1d : ndarray\n    Sorted 1D array of common and unique elements.\ncomm1 : ndarray\n    The indices of the first occurrences of the common values in `ar1`.\n    Only provided if `return_indices` is True.\ncomm2 : ndarray\n    The indices of the first occurrences of the common values in `ar2`.\n    Only provided if `return_indices` is True.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.intersect1d([1, 3, 4, 3], [3, 1, 2, 1])\narray([1, 3])\n\nTo intersect more than two arrays, use functools.reduce:\n\n>>> from functools import reduce\n>>> reduce(np.intersect1d, ([1, 3, 4, 3], [3, 1, 2, 1], [6, 3, 4, 2]))\narray([3])\n\nTo return the indices of the values common to the input arrays\nalong with the intersected values:\n\n>>> x = np.array([1, 1, 2, 3, 4])\n>>> y = np.array([2, 1, 4, 6])\n>>> xy, x_ind, y_ind = np.intersect1d(x, y, return_indices=True)\n>>> x_ind, y_ind\n(array([0, 2, 4]), array([1, 0, 2]))\n>>> xy, x[x_ind], y[y_ind]\n(array([1, 2, 4]), array([1, 2, 4]), array([1, 2, 4]))"
    },
    {
      "name": "setxor1d",
      "docstring": "Find the set exclusive-or of two arrays.\n\nReturn the sorted, unique values that are in only one (not both) of the\ninput arrays.\n\nParameters\n----------\nar1, ar2 : array_like\n    Input arrays.\nassume_unique : bool\n    If True, the input arrays are both assumed to be unique, which\n    can speed up the calculation. Default is False.\n\nReturns\n-------\nsetxor1d : ndarray\n    Sorted 1D array of unique values that are in only one of the input\n    arrays.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([1, 2, 3, 2, 4])\n>>> b = np.array([2, 3, 5, 7, 5])\n>>> np.setxor1d(a,b)\narray([1, 4, 5, 7])"
    },
    {
      "name": "in1d",
      "docstring": "Test whether each element of a 1-D array is also present in a second array.\n\n.. deprecated:: 2.0\n    Use :func:`isin` instead of `in1d` for new code.\n\nReturns a boolean array the same length as `ar1` that is True\nwhere an element of `ar1` is in `ar2` and False otherwise.\n\nParameters\n----------\nar1 : (M,) array_like\n    Input array.\nar2 : array_like\n    The values against which to test each value of `ar1`.\nassume_unique : bool, optional\n    If True, the input arrays are both assumed to be unique, which\n    can speed up the calculation.  Default is False.\ninvert : bool, optional\n    If True, the values in the returned array are inverted (that is,\n    False where an element of `ar1` is in `ar2` and True otherwise).\n    Default is False. ``np.in1d(a, b, invert=True)`` is equivalent\n    to (but is faster than) ``np.invert(in1d(a, b))``.\nkind : {None, 'sort', 'table'}, optional\n    The algorithm to use. This will not affect the final result,\n    but will affect the speed and memory use. The default, None,\n    will select automatically based on memory considerations.\n\n    * If 'sort', will use a mergesort-based approach. This will have\n      a memory usage of roughly 6 times the sum of the sizes of\n      `ar1` and `ar2`, not accounting for size of dtypes.\n    * If 'table', will use a lookup table approach similar\n      to a counting sort. This is only available for boolean and\n      integer arrays. This will have a memory usage of the\n      size of `ar1` plus the max-min value of `ar2`. `assume_unique`\n      has no effect when the 'table' option is used.\n    * If None, will automatically choose 'table' if\n      the required memory allocation is less than or equal to\n      6 times the sum of the sizes of `ar1` and `ar2`,\n      otherwise will use 'sort'. This is done to not use\n      a large amount of memory by default, even though\n      'table' may be faster in most cases. If 'table' is chosen,\n      `assume_unique` will have no effect.\n\nReturns\n-------\nin1d : (M,) ndarray, bool\n    The values `ar1[in1d]` are in `ar2`.\n\nSee Also\n--------\nisin                  : Version of this function that preserves the\n                        shape of ar1.\n\nNotes\n-----\n`in1d` can be considered as an element-wise function version of the\npython keyword `in`, for 1-D sequences. ``in1d(a, b)`` is roughly\nequivalent to ``np.array([item in b for item in a])``.\nHowever, this idea fails if `ar2` is a set, or similar (non-sequence)\ncontainer:  As ``ar2`` is converted to an array, in those cases\n``asarray(ar2)`` is an object array rather than the expected array of\ncontained values.\n\nUsing ``kind='table'`` tends to be faster than `kind='sort'` if the\nfollowing relationship is true:\n``log10(len(ar2)) > (log10(max(ar2)-min(ar2)) - 2.27) / 0.927``,\nbut may use greater memory. The default value for `kind` will\nbe automatically selected based only on memory usage, so one may\nmanually set ``kind='table'`` if memory constraints can be relaxed.\n\nExamples\n--------\n>>> import numpy as np\n>>> test = np.array([0, 1, 2, 5, 0])\n>>> states = [0, 2]\n>>> mask = np.in1d(test, states)\n>>> mask\narray([ True, False,  True, False,  True])\n>>> test[mask]\narray([0, 2, 0])\n>>> mask = np.in1d(test, states, invert=True)\n>>> mask\narray([False,  True, False,  True, False])\n>>> test[mask]\narray([1, 5])"
    },
    {
      "name": "isin",
      "docstring": "Calculates ``element in test_elements``, broadcasting over `element` only.\nReturns a boolean array of the same shape as `element` that is True\nwhere an element of `element` is in `test_elements` and False otherwise.\n\nParameters\n----------\nelement : array_like\n    Input array.\ntest_elements : array_like\n    The values against which to test each value of `element`.\n    This argument is flattened if it is an array or array_like.\n    See notes for behavior with non-array-like parameters.\nassume_unique : bool, optional\n    If True, the input arrays are both assumed to be unique, which\n    can speed up the calculation.  Default is False.\ninvert : bool, optional\n    If True, the values in the returned array are inverted, as if\n    calculating `element not in test_elements`. Default is False.\n    ``np.isin(a, b, invert=True)`` is equivalent to (but faster\n    than) ``np.invert(np.isin(a, b))``.\nkind : {None, 'sort', 'table'}, optional\n    The algorithm to use. This will not affect the final result,\n    but will affect the speed and memory use. The default, None,\n    will select automatically based on memory considerations.\n\n    * If 'sort', will use a mergesort-based approach. This will have\n      a memory usage of roughly 6 times the sum of the sizes of\n      `element` and `test_elements`, not accounting for size of dtypes.\n    * If 'table', will use a lookup table approach similar\n      to a counting sort. This is only available for boolean and\n      integer arrays. This will have a memory usage of the\n      size of `element` plus the max-min value of `test_elements`.\n      `assume_unique` has no effect when the 'table' option is used.\n    * If None, will automatically choose 'table' if\n      the required memory allocation is less than or equal to\n      6 times the sum of the sizes of `element` and `test_elements`,\n      otherwise will use 'sort'. This is done to not use\n      a large amount of memory by default, even though\n      'table' may be faster in most cases. If 'table' is chosen,\n      `assume_unique` will have no effect.\n\n\nReturns\n-------\nisin : ndarray, bool\n    Has the same shape as `element`. The values `element[isin]`\n    are in `test_elements`.\n\nNotes\n-----\n`isin` is an element-wise function version of the python keyword `in`.\n``isin(a, b)`` is roughly equivalent to\n``np.array([item in b for item in a])`` if `a` and `b` are 1-D sequences.\n\n`element` and `test_elements` are converted to arrays if they are not\nalready. If `test_elements` is a set (or other non-sequence collection)\nit will be converted to an object array with one element, rather than an\narray of the values contained in `test_elements`. This is a consequence\nof the `array` constructor's way of handling non-sequence collections.\nConverting the set to a list usually gives the desired behavior.\n\nUsing ``kind='table'`` tends to be faster than `kind='sort'` if the\nfollowing relationship is true:\n``log10(len(test_elements)) >\n(log10(max(test_elements)-min(test_elements)) - 2.27) / 0.927``,\nbut may use greater memory. The default value for `kind` will\nbe automatically selected based only on memory usage, so one may\nmanually set ``kind='table'`` if memory constraints can be relaxed.\n\nExamples\n--------\n>>> import numpy as np\n>>> element = 2*np.arange(4).reshape((2, 2))\n>>> element\narray([[0, 2],\n       [4, 6]])\n>>> test_elements = [1, 2, 4, 8]\n>>> mask = np.isin(element, test_elements)\n>>> mask\narray([[False,  True],\n       [ True, False]])\n>>> element[mask]\narray([2, 4])\n\nThe indices of the matched values can be obtained with `nonzero`:\n\n>>> np.nonzero(mask)\n(array([0, 1]), array([1, 0]))\n\nThe test can also be inverted:\n\n>>> mask = np.isin(element, test_elements, invert=True)\n>>> mask\narray([[ True, False],\n       [False,  True]])\n>>> element[mask]\narray([0, 6])\n\nBecause of how `array` handles sets, the following does not\nwork as expected:\n\n>>> test_set = {1, 2, 4, 8}\n>>> np.isin(element, test_set)\narray([[False, False],\n       [False, False]])\n\nCasting the set to a list gives the expected result:\n\n>>> np.isin(element, list(test_set))\narray([[False,  True],\n       [ True, False]])"
    },
    {
      "name": "union1d",
      "docstring": "Find the union of two arrays.\n\nReturn the unique, sorted array of values that are in either of the two\ninput arrays.\n\nParameters\n----------\nar1, ar2 : array_like\n    Input arrays. They are flattened if they are not already 1D.\n\nReturns\n-------\nunion1d : ndarray\n    Unique, sorted union of the input arrays.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.union1d([-1, 0, 1], [-2, 0, 2])\narray([-2, -1,  0,  1,  2])\n\nTo find the union of more than two arrays, use functools.reduce:\n\n>>> from functools import reduce\n>>> reduce(np.union1d, ([1, 3, 4, 3], [3, 1, 2, 1], [6, 3, 4, 2]))\narray([1, 2, 3, 4, 6])"
    },
    {
      "name": "setdiff1d",
      "docstring": "Find the set difference of two arrays.\n\nReturn the unique values in `ar1` that are not in `ar2`.\n\nParameters\n----------\nar1 : array_like\n    Input array.\nar2 : array_like\n    Input comparison array.\nassume_unique : bool\n    If True, the input arrays are both assumed to be unique, which\n    can speed up the calculation.  Default is False.\n\nReturns\n-------\nsetdiff1d : ndarray\n    1D array of values in `ar1` that are not in `ar2`. The result\n    is sorted when `assume_unique=False`, but otherwise only sorted\n    if the input is sorted.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([1, 2, 3, 2, 4, 1])\n>>> b = np.array([3, 4, 5, 6])\n>>> np.setdiff1d(a, b)\narray([1, 2])"
    },
    {
      "name": "reshape_uniq",
      "docstring": null
    }
  ],
  "innovations": []
}