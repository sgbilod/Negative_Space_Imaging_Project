{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\backends\\backend_mixed.py",
  "classes": [
    {
      "name": "MixedModeRenderer",
      "docstring": "A helper class to implement a renderer that switches between\nvector and raster drawing.  An example may be a PDF writer, where\nmost things are drawn with PDF vector commands, but some very\ncomplex objects, such as quad meshes, are rasterised and then\noutput as images.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Parameters\n----------\nfigure : `~matplotlib.figure.Figure`\n    The figure instance.\nwidth : float\n    The width of the canvas in logical units\nheight : float\n    The height of the canvas in logical units\ndpi : float\n    The dpi of the canvas\nvector_renderer : `~matplotlib.backend_bases.RendererBase`\n    An instance of a subclass of\n    `~matplotlib.backend_bases.RendererBase` that will be used for the\n    vector drawing.\nraster_renderer_class : `~matplotlib.backend_bases.RendererBase`\n    The renderer class to use for the raster drawing.  If not provided,\n    this will use the Agg backend (which is currently the only viable\n    option anyway.)"
        },
        {
          "name": "start_rasterizing",
          "docstring": "Enter \"raster\" mode.  All subsequent drawing commands (until\n`stop_rasterizing` is called) will be drawn with the raster backend."
        },
        {
          "name": "stop_rasterizing",
          "docstring": "Exit \"raster\" mode.  All of the drawing that was done since\nthe last `start_rasterizing` call will be copied to the\nvector backend by calling draw_image."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "start_rasterizing",
      "docstring": "Enter \"raster\" mode.  All subsequent drawing commands (until\n`stop_rasterizing` is called) will be drawn with the raster backend."
    },
    {
      "name": "stop_rasterizing",
      "docstring": "Exit \"raster\" mode.  All of the drawing that was done since\nthe last `start_rasterizing` call will be copied to the\nvector backend by calling draw_image."
    }
  ],
  "innovations": []
}