{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\tri\\_tripcolor.py",
  "classes": [],
  "functions": [
    {
      "name": "tripcolor",
      "docstring": "Create a pseudocolor plot of an unstructured triangular grid.\n\nCall signatures::\n\n  tripcolor(triangulation, c, *, ...)\n  tripcolor(x, y, c, *, [triangles=triangles], [mask=mask], ...)\n\nThe triangular grid can be specified either by passing a `.Triangulation`\nobject as the first parameter, or by passing the points *x*, *y* and\noptionally the *triangles* and a *mask*. See `.Triangulation` for an\nexplanation of these parameters.\n\nIt is possible to pass the triangles positionally, i.e.\n``tripcolor(x, y, triangles, c, ...)``. However, this is discouraged.\nFor more clarity, pass *triangles* via keyword argument.\n\nIf neither of *triangulation* or *triangles* are given, the triangulation\nis calculated on the fly. In this case, it does not make sense to provide\ncolors at the triangle faces via *c* or *facecolors* because there are\nmultiple possible triangulations for a group of points and you don't know\nwhich triangles will be constructed.\n\nParameters\n----------\ntriangulation : `.Triangulation`\n    An already created triangular grid.\nx, y, triangles, mask\n    Parameters defining the triangular grid. See `.Triangulation`.\n    This is mutually exclusive with specifying *triangulation*.\nc : array-like\n    The color values, either for the points or for the triangles. Which one\n    is automatically inferred from the length of *c*, i.e. does it match\n    the number of points or the number of triangles. If there are the same\n    number of points and triangles in the triangulation it is assumed that\n    color values are defined at points; to force the use of color values at\n    triangles use the keyword argument ``facecolors=c`` instead of just\n    ``c``.\n    This parameter is position-only.\nfacecolors : array-like, optional\n    Can be used alternatively to *c* to specify colors at the triangle\n    faces. This parameter takes precedence over *c*.\nshading : {'flat', 'gouraud'}, default: 'flat'\n    If  'flat' and the color values *c* are defined at points, the color\n    values used for each triangle are from the mean c of the triangle's\n    three points. If *shading* is 'gouraud' then color values must be\n    defined at points.\n%(cmap_doc)s\n\n%(norm_doc)s\n\n%(vmin_vmax_doc)s\n\n%(colorizer_doc)s\n\nReturns\n-------\n`~matplotlib.collections.PolyCollection` or `~matplotlib.collections.TriMesh`\n    The result depends on *shading*: For ``shading='flat'`` the result is a\n    `.PolyCollection`, for ``shading='gouraud'`` the result is a `.TriMesh`.\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.collections.Collection` properties\n\n    %(Collection:kwdoc)s"
    }
  ],
  "innovations": []
}