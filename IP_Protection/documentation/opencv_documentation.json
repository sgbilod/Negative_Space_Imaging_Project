{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\imageio\\plugins\\opencv.py",
  "classes": [
    {
      "name": "OpenCVPlugin",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "read",
          "docstring": "Read an image from the ImageResource.\n\nParameters\n----------\nindex : int, Ellipsis\n    If int, read the index-th image from the ImageResource. If ``...``,\n    read all images from the ImageResource and stack them along a new,\n    prepended, batch dimension. If None (default), use ``index=0`` if\n    the image contains exactly one image and ``index=...`` otherwise.\ncolorspace : str, int\n    The colorspace to convert into after loading and before returning\n    the image. If None (default) keep grayscale images as is, convert\n    images with an alpha channel to ``RGBA`` and all other images to\n    ``RGB``. If int, interpret ``colorspace`` as one of OpenCVs\n    `conversion flags\n    <https://docs.opencv.org/4.x/d8/d01/group__imgproc__color__conversions.html>`_\n    and use it for conversion. If str, convert the image into the given\n    colorspace. Possible string values are: ``\"RGB\"``, ``\"BGR\"``,\n    ``\"RGBA\"``, ``\"BGRA\"``, ``\"GRAY\"``, ``\"HSV\"``, or ``\"LAB\"``.\nflags : int\n    The OpenCV flag(s) to pass to the reader. Refer to the `OpenCV docs\n    <https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56>`_\n    for details.\n\nReturns\n-------\nndimage : np.ndarray\n    The decoded image as a numpy array."
        },
        {
          "name": "iter",
          "docstring": "Yield images from the ImageResource.\n\nParameters\n----------\ncolorspace : str, int\n    The colorspace to convert into after loading and before returning\n    the image. If None (default) keep grayscale images as is, convert\n    images with an alpha channel to ``RGBA`` and all other images to\n    ``RGB``. If int, interpret ``colorspace`` as one of OpenCVs\n    `conversion flags\n    <https://docs.opencv.org/4.x/d8/d01/group__imgproc__color__conversions.html>`_\n    and use it for conversion. If str, convert the image into the given\n    colorspace. Possible string values are: ``\"RGB\"``, ``\"BGR\"``,\n    ``\"RGBA\"``, ``\"BGRA\"``, ``\"GRAY\"``, ``\"HSV\"``, or ``\"LAB\"``.\nflags : int\n    The OpenCV flag(s) to pass to the reader. Refer to the `OpenCV docs\n    <https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56>`_\n    for details.\n\nYields\n------\nndimage : np.ndarray\n    The decoded image as a numpy array."
        },
        {
          "name": "write",
          "docstring": "Save an ndimage in the ImageResource.\n\nParameters\n----------\nndimage : ArrayLike, List[ArrayLike]\n    The image data that will be written to the file. It is either a\n    single image, a batch of images, or a list of images.\nis_batch : bool\n    If True, the provided ndimage is a batch of images. If False (default), the\n    provided ndimage is a single image. If the provided ndimage is a list of images,\n    this parameter has no effect.\nparams : List[int]\n    A list of parameters that will be passed to OpenCVs imwrite or\n    imwritemulti functions. Possible values are documented in the\n    `OpenCV documentation\n    <https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce>`_.\n\nReturns\n-------\nencoded_image : bytes, None\n    If the ImageResource is ``\"<bytes>\"`` the call to write returns the\n    encoded image as a bytes string. Otherwise it returns None."
        },
        {
          "name": "properties",
          "docstring": "Standardized image metadata.\n\nParameters\n----------\nindex : int, Ellipsis\n    If int, get the properties of the index-th image in the\n    ImageResource. If ``...``, get the properties of the image stack\n    that contains all images. If None (default), use ``index=0`` if the\n    image contains exactly one image and ``index=...`` otherwise.\ncolorspace : str, int\n    The colorspace to convert into after loading and before returning\n    the image. If None (default) keep grayscale images as is, convert\n    images with an alpha channel to ``RGBA`` and all other images to\n    ``RGB``. If int, interpret ``colorspace`` as one of OpenCVs\n    `conversion flags\n    <https://docs.opencv.org/4.x/d8/d01/group__imgproc__color__conversions.html>`_\n    and use it for conversion. If str, convert the image into the given\n    colorspace. Possible string values are: ``\"RGB\"``, ``\"BGR\"``,\n    ``\"RGBA\"``, ``\"BGRA\"``, ``\"GRAY\"``, ``\"HSV\"``, or ``\"LAB\"``.\nflags : int\n    The OpenCV flag(s) to pass to the reader. Refer to the `OpenCV docs\n    <https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56>`_\n    for details.\n\nReturns\n-------\nprops : ImageProperties\n    A dataclass filled with standardized image metadata.\n\nNotes\n-----\nReading properties with OpenCV involves decoding pixel data, because\nOpenCV doesn't provide a direct way to access metadata."
        },
        {
          "name": "metadata",
          "docstring": "Format-specific metadata.\n\n.. warning::\n    OpenCV does not support reading metadata. When called, this function\n    will raise a ``NotImplementedError``.\n\nParameters\n----------\nindex : int\n    This parameter has no effect.\nexclude_applied : bool\n    This parameter has no effect."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "read",
      "docstring": "Read an image from the ImageResource.\n\nParameters\n----------\nindex : int, Ellipsis\n    If int, read the index-th image from the ImageResource. If ``...``,\n    read all images from the ImageResource and stack them along a new,\n    prepended, batch dimension. If None (default), use ``index=0`` if\n    the image contains exactly one image and ``index=...`` otherwise.\ncolorspace : str, int\n    The colorspace to convert into after loading and before returning\n    the image. If None (default) keep grayscale images as is, convert\n    images with an alpha channel to ``RGBA`` and all other images to\n    ``RGB``. If int, interpret ``colorspace`` as one of OpenCVs\n    `conversion flags\n    <https://docs.opencv.org/4.x/d8/d01/group__imgproc__color__conversions.html>`_\n    and use it for conversion. If str, convert the image into the given\n    colorspace. Possible string values are: ``\"RGB\"``, ``\"BGR\"``,\n    ``\"RGBA\"``, ``\"BGRA\"``, ``\"GRAY\"``, ``\"HSV\"``, or ``\"LAB\"``.\nflags : int\n    The OpenCV flag(s) to pass to the reader. Refer to the `OpenCV docs\n    <https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56>`_\n    for details.\n\nReturns\n-------\nndimage : np.ndarray\n    The decoded image as a numpy array."
    },
    {
      "name": "iter",
      "docstring": "Yield images from the ImageResource.\n\nParameters\n----------\ncolorspace : str, int\n    The colorspace to convert into after loading and before returning\n    the image. If None (default) keep grayscale images as is, convert\n    images with an alpha channel to ``RGBA`` and all other images to\n    ``RGB``. If int, interpret ``colorspace`` as one of OpenCVs\n    `conversion flags\n    <https://docs.opencv.org/4.x/d8/d01/group__imgproc__color__conversions.html>`_\n    and use it for conversion. If str, convert the image into the given\n    colorspace. Possible string values are: ``\"RGB\"``, ``\"BGR\"``,\n    ``\"RGBA\"``, ``\"BGRA\"``, ``\"GRAY\"``, ``\"HSV\"``, or ``\"LAB\"``.\nflags : int\n    The OpenCV flag(s) to pass to the reader. Refer to the `OpenCV docs\n    <https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56>`_\n    for details.\n\nYields\n------\nndimage : np.ndarray\n    The decoded image as a numpy array."
    },
    {
      "name": "write",
      "docstring": "Save an ndimage in the ImageResource.\n\nParameters\n----------\nndimage : ArrayLike, List[ArrayLike]\n    The image data that will be written to the file. It is either a\n    single image, a batch of images, or a list of images.\nis_batch : bool\n    If True, the provided ndimage is a batch of images. If False (default), the\n    provided ndimage is a single image. If the provided ndimage is a list of images,\n    this parameter has no effect.\nparams : List[int]\n    A list of parameters that will be passed to OpenCVs imwrite or\n    imwritemulti functions. Possible values are documented in the\n    `OpenCV documentation\n    <https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#gabbc7ef1aa2edfaa87772f1202d67e0ce>`_.\n\nReturns\n-------\nencoded_image : bytes, None\n    If the ImageResource is ``\"<bytes>\"`` the call to write returns the\n    encoded image as a bytes string. Otherwise it returns None."
    },
    {
      "name": "properties",
      "docstring": "Standardized image metadata.\n\nParameters\n----------\nindex : int, Ellipsis\n    If int, get the properties of the index-th image in the\n    ImageResource. If ``...``, get the properties of the image stack\n    that contains all images. If None (default), use ``index=0`` if the\n    image contains exactly one image and ``index=...`` otherwise.\ncolorspace : str, int\n    The colorspace to convert into after loading and before returning\n    the image. If None (default) keep grayscale images as is, convert\n    images with an alpha channel to ``RGBA`` and all other images to\n    ``RGB``. If int, interpret ``colorspace`` as one of OpenCVs\n    `conversion flags\n    <https://docs.opencv.org/4.x/d8/d01/group__imgproc__color__conversions.html>`_\n    and use it for conversion. If str, convert the image into the given\n    colorspace. Possible string values are: ``\"RGB\"``, ``\"BGR\"``,\n    ``\"RGBA\"``, ``\"BGRA\"``, ``\"GRAY\"``, ``\"HSV\"``, or ``\"LAB\"``.\nflags : int\n    The OpenCV flag(s) to pass to the reader. Refer to the `OpenCV docs\n    <https://docs.opencv.org/4.x/d4/da8/group__imgcodecs.html#ga288b8b3da0892bd651fce07b3bbd3a56>`_\n    for details.\n\nReturns\n-------\nprops : ImageProperties\n    A dataclass filled with standardized image metadata.\n\nNotes\n-----\nReading properties with OpenCV involves decoding pixel data, because\nOpenCV doesn't provide a direct way to access metadata."
    },
    {
      "name": "metadata",
      "docstring": "Format-specific metadata.\n\n.. warning::\n    OpenCV does not support reading metadata. When called, this function\n    will raise a ``NotImplementedError``.\n\nParameters\n----------\nindex : int\n    This parameter has no effect.\nexclude_applied : bool\n    This parameter has no effect."
    }
  ],
  "innovations": []
}