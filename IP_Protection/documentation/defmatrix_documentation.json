{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\matrixlib\\defmatrix.py",
  "classes": [
    {
      "name": "matrix",
      "docstring": "matrix(data, dtype=None, copy=True)\n\nReturns a matrix from an array-like object, or from a string of data.\n\nA matrix is a specialized 2-D array that retains its 2-D nature\nthrough operations.  It has certain special operators, such as ``*``\n(matrix multiplication) and ``**`` (matrix power).\n\n.. note:: It is no longer recommended to use this class, even for linear\n          algebra. Instead use regular arrays. The class may be removed\n          in the future.\n\nParameters\n----------\ndata : array_like or string\n   If `data` is a string, it is interpreted as a matrix with commas\n   or spaces separating columns, and semicolons separating rows.\ndtype : data-type\n   Data-type of the output matrix.\ncopy : bool\n   If `data` is already an `ndarray`, then this flag determines\n   whether the data is copied (the default), or whether a view is\n   constructed.\n\nSee Also\n--------\narray\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.matrix('1 2; 3 4')\n>>> a\nmatrix([[1, 2],\n        [3, 4]])\n\n>>> np.matrix([[1, 2], [3, 4]])\nmatrix([[1, 2],\n        [3, 4]])",
      "methods": [
        {
          "name": "tolist",
          "docstring": "Return the matrix as a (possibly nested) list.\n\nSee `ndarray.tolist` for full documentation.\n\nSee Also\n--------\nndarray.tolist\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.tolist()\n[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]"
        },
        {
          "name": "sum",
          "docstring": "Returns the sum of the matrix elements, along the given axis.\n\nRefer to `numpy.sum` for full documentation.\n\nSee Also\n--------\nnumpy.sum\n\nNotes\n-----\nThis is the same as `ndarray.sum`, except that where an `ndarray` would\nbe returned, a `matrix` object is returned instead.\n\nExamples\n--------\n>>> x = np.matrix([[1, 2], [4, 3]])\n>>> x.sum()\n10\n>>> x.sum(axis=1)\nmatrix([[3],\n        [7]])\n>>> x.sum(axis=1, dtype='float')\nmatrix([[3.],\n        [7.]])\n>>> out = np.zeros((2, 1), dtype='float')\n>>> x.sum(axis=1, dtype='float', out=np.asmatrix(out))\nmatrix([[3.],\n        [7.]])"
        },
        {
          "name": "squeeze",
          "docstring": "Return a possibly reshaped matrix.\n\nRefer to `numpy.squeeze` for more documentation.\n\nParameters\n----------\naxis : None or int or tuple of ints, optional\n    Selects a subset of the axes of length one in the shape.\n    If an axis is selected with shape entry greater than one,\n    an error is raised.\n\nReturns\n-------\nsqueezed : matrix\n    The matrix, but as a (1, N) matrix if it had shape (N, 1).\n\nSee Also\n--------\nnumpy.squeeze : related function\n\nNotes\n-----\nIf `m` has a single column then that column is returned\nas the single row of a matrix.  Otherwise `m` is returned.\nThe returned matrix is always either `m` itself or a view into `m`.\nSupplying an axis keyword argument will not affect the returned matrix\nbut it may cause an error to be raised.\n\nExamples\n--------\n>>> c = np.matrix([[1], [2]])\n>>> c\nmatrix([[1],\n        [2]])\n>>> c.squeeze()\nmatrix([[1, 2]])\n>>> r = c.T\n>>> r\nmatrix([[1, 2]])\n>>> r.squeeze()\nmatrix([[1, 2]])\n>>> m = np.matrix([[1, 2], [3, 4]])\n>>> m.squeeze()\nmatrix([[1, 2],\n        [3, 4]])"
        },
        {
          "name": "flatten",
          "docstring": "Return a flattened copy of the matrix.\n\nAll `N` elements of the matrix are placed into a single row.\n\nParameters\n----------\norder : {'C', 'F', 'A', 'K'}, optional\n    'C' means to flatten in row-major (C-style) order. 'F' means to\n    flatten in column-major (Fortran-style) order. 'A' means to\n    flatten in column-major order if `m` is Fortran *contiguous* in\n    memory, row-major order otherwise. 'K' means to flatten `m` in\n    the order the elements occur in memory. The default is 'C'.\n\nReturns\n-------\ny : matrix\n    A copy of the matrix, flattened to a `(1, N)` matrix where `N`\n    is the number of elements in the original matrix.\n\nSee Also\n--------\nravel : Return a flattened array.\nflat : A 1-D flat iterator over the matrix.\n\nExamples\n--------\n>>> m = np.matrix([[1,2], [3,4]])\n>>> m.flatten()\nmatrix([[1, 2, 3, 4]])\n>>> m.flatten('F')\nmatrix([[1, 3, 2, 4]])"
        },
        {
          "name": "mean",
          "docstring": "Returns the average of the matrix elements along the given axis.\n\nRefer to `numpy.mean` for full documentation.\n\nSee Also\n--------\nnumpy.mean\n\nNotes\n-----\nSame as `ndarray.mean` except that, where that returns an `ndarray`,\nthis returns a `matrix` object.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3, 4)))\n>>> x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.mean()\n5.5\n>>> x.mean(0)\nmatrix([[4., 5., 6., 7.]])\n>>> x.mean(1)\nmatrix([[ 1.5],\n        [ 5.5],\n        [ 9.5]])"
        },
        {
          "name": "std",
          "docstring": "Return the standard deviation of the array elements along the given axis.\n\nRefer to `numpy.std` for full documentation.\n\nSee Also\n--------\nnumpy.std\n\nNotes\n-----\nThis is the same as `ndarray.std`, except that where an `ndarray` would\nbe returned, a `matrix` object is returned instead.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3, 4)))\n>>> x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.std()\n3.4520525295346629 # may vary\n>>> x.std(0)\nmatrix([[ 3.26598632,  3.26598632,  3.26598632,  3.26598632]]) # may vary\n>>> x.std(1)\nmatrix([[ 1.11803399],\n        [ 1.11803399],\n        [ 1.11803399]])"
        },
        {
          "name": "var",
          "docstring": "Returns the variance of the matrix elements, along the given axis.\n\nRefer to `numpy.var` for full documentation.\n\nSee Also\n--------\nnumpy.var\n\nNotes\n-----\nThis is the same as `ndarray.var`, except that where an `ndarray` would\nbe returned, a `matrix` object is returned instead.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3, 4)))\n>>> x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.var()\n11.916666666666666\n>>> x.var(0)\nmatrix([[ 10.66666667,  10.66666667,  10.66666667,  10.66666667]]) # may vary\n>>> x.var(1)\nmatrix([[1.25],\n        [1.25],\n        [1.25]])"
        },
        {
          "name": "prod",
          "docstring": "Return the product of the array elements over the given axis.\n\nRefer to `prod` for full documentation.\n\nSee Also\n--------\nprod, ndarray.prod\n\nNotes\n-----\nSame as `ndarray.prod`, except, where that returns an `ndarray`, this\nreturns a `matrix` object instead.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.prod()\n0\n>>> x.prod(0)\nmatrix([[  0,  45, 120, 231]])\n>>> x.prod(1)\nmatrix([[   0],\n        [ 840],\n        [7920]])"
        },
        {
          "name": "any",
          "docstring": "Test whether any array element along a given axis evaluates to True.\n\nRefer to `numpy.any` for full documentation.\n\nParameters\n----------\naxis : int, optional\n    Axis along which logical OR is performed\nout : ndarray, optional\n    Output to existing array instead of creating new one, must have\n    same shape as expected output\n\nReturns\n-------\n    any : bool, ndarray\n        Returns a single bool if `axis` is ``None``; otherwise,\n        returns `ndarray`"
        },
        {
          "name": "all",
          "docstring": "Test whether all matrix elements along a given axis evaluate to True.\n\nParameters\n----------\nSee `numpy.all` for complete descriptions\n\nSee Also\n--------\nnumpy.all\n\nNotes\n-----\nThis is the same as `ndarray.all`, but it returns a `matrix` object.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> y = x[0]; y\nmatrix([[0, 1, 2, 3]])\n>>> (x == y)\nmatrix([[ True,  True,  True,  True],\n        [False, False, False, False],\n        [False, False, False, False]])\n>>> (x == y).all()\nFalse\n>>> (x == y).all(0)\nmatrix([[False, False, False, False]])\n>>> (x == y).all(1)\nmatrix([[ True],\n        [False],\n        [False]])"
        },
        {
          "name": "max",
          "docstring": "Return the maximum value along an axis.\n\nParameters\n----------\nSee `amax` for complete descriptions\n\nSee Also\n--------\namax, ndarray.max\n\nNotes\n-----\nThis is the same as `ndarray.max`, but returns a `matrix` object\nwhere `ndarray.max` would return an ndarray.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.max()\n11\n>>> x.max(0)\nmatrix([[ 8,  9, 10, 11]])\n>>> x.max(1)\nmatrix([[ 3],\n        [ 7],\n        [11]])"
        },
        {
          "name": "argmax",
          "docstring": "Indexes of the maximum values along an axis.\n\nReturn the indexes of the first occurrences of the maximum values\nalong the specified axis.  If axis is None, the index is for the\nflattened matrix.\n\nParameters\n----------\nSee `numpy.argmax` for complete descriptions\n\nSee Also\n--------\nnumpy.argmax\n\nNotes\n-----\nThis is the same as `ndarray.argmax`, but returns a `matrix` object\nwhere `ndarray.argmax` would return an `ndarray`.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.argmax()\n11\n>>> x.argmax(0)\nmatrix([[2, 2, 2, 2]])\n>>> x.argmax(1)\nmatrix([[3],\n        [3],\n        [3]])"
        },
        {
          "name": "min",
          "docstring": "Return the minimum value along an axis.\n\nParameters\n----------\nSee `amin` for complete descriptions.\n\nSee Also\n--------\namin, ndarray.min\n\nNotes\n-----\nThis is the same as `ndarray.min`, but returns a `matrix` object\nwhere `ndarray.min` would return an ndarray.\n\nExamples\n--------\n>>> x = -np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]])\n>>> x.min()\n-11\n>>> x.min(0)\nmatrix([[ -8,  -9, -10, -11]])\n>>> x.min(1)\nmatrix([[ -3],\n        [ -7],\n        [-11]])"
        },
        {
          "name": "argmin",
          "docstring": "Indexes of the minimum values along an axis.\n\nReturn the indexes of the first occurrences of the minimum values\nalong the specified axis.  If axis is None, the index is for the\nflattened matrix.\n\nParameters\n----------\nSee `numpy.argmin` for complete descriptions.\n\nSee Also\n--------\nnumpy.argmin\n\nNotes\n-----\nThis is the same as `ndarray.argmin`, but returns a `matrix` object\nwhere `ndarray.argmin` would return an `ndarray`.\n\nExamples\n--------\n>>> x = -np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]])\n>>> x.argmin()\n11\n>>> x.argmin(0)\nmatrix([[2, 2, 2, 2]])\n>>> x.argmin(1)\nmatrix([[3],\n        [3],\n        [3]])"
        },
        {
          "name": "ptp",
          "docstring": "Peak-to-peak (maximum - minimum) value along the given axis.\n\nRefer to `numpy.ptp` for full documentation.\n\nSee Also\n--------\nnumpy.ptp\n\nNotes\n-----\nSame as `ndarray.ptp`, except, where that would return an `ndarray` object,\nthis returns a `matrix` object.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.ptp()\n11\n>>> x.ptp(0)\nmatrix([[8, 8, 8, 8]])\n>>> x.ptp(1)\nmatrix([[3],\n        [3],\n        [3]])"
        },
        {
          "name": "I",
          "docstring": "Returns the (multiplicative) inverse of invertible `self`.\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : matrix object\n    If `self` is non-singular, `ret` is such that ``ret * self`` ==\n    ``self * ret`` == ``np.matrix(np.eye(self[0,:].size))`` all return\n    ``True``.\n\nRaises\n------\nnumpy.linalg.LinAlgError: Singular matrix\n    If `self` is singular.\n\nSee Also\n--------\nlinalg.inv\n\nExamples\n--------\n>>> m = np.matrix('[1, 2; 3, 4]'); m\nmatrix([[1, 2],\n        [3, 4]])\n>>> m.getI()\nmatrix([[-2. ,  1. ],\n        [ 1.5, -0.5]])\n>>> m.getI() * m\nmatrix([[ 1.,  0.], # may vary\n        [ 0.,  1.]])"
        },
        {
          "name": "A",
          "docstring": "Return `self` as an `ndarray` object.\n\nEquivalent to ``np.asarray(self)``.\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : ndarray\n    `self` as an `ndarray`\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.getA()\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])"
        },
        {
          "name": "A1",
          "docstring": "Return `self` as a flattened `ndarray`.\n\nEquivalent to ``np.asarray(x).ravel()``\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : ndarray\n    `self`, 1-D, as an `ndarray`\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.getA1()\narray([ 0,  1,  2, ...,  9, 10, 11])"
        },
        {
          "name": "ravel",
          "docstring": "Return a flattened matrix.\n\nRefer to `numpy.ravel` for more documentation.\n\nParameters\n----------\norder : {'C', 'F', 'A', 'K'}, optional\n    The elements of `m` are read using this index order. 'C' means to\n    index the elements in C-like order, with the last axis index\n    changing fastest, back to the first axis index changing slowest.\n    'F' means to index the elements in Fortran-like index order, with\n    the first index changing fastest, and the last index changing\n    slowest. Note that the 'C' and 'F' options take no account of the\n    memory layout of the underlying array, and only refer to the order\n    of axis indexing.  'A' means to read the elements in Fortran-like\n    index order if `m` is Fortran *contiguous* in memory, C-like order\n    otherwise.  'K' means to read the elements in the order they occur\n    in memory, except for reversing the data when strides are negative.\n    By default, 'C' index order is used.\n\nReturns\n-------\nret : matrix\n    Return the matrix flattened to shape `(1, N)` where `N`\n    is the number of elements in the original matrix.\n    A copy is made only if necessary.\n\nSee Also\n--------\nmatrix.flatten : returns a similar output matrix but always a copy\nmatrix.flat : a flat iterator on the array.\nnumpy.ravel : related function which returns an ndarray"
        },
        {
          "name": "T",
          "docstring": "Returns the transpose of the matrix.\n\nDoes *not* conjugate!  For the complex conjugate transpose, use ``.H``.\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : matrix object\n    The (non-conjugated) transpose of the matrix.\n\nSee Also\n--------\ntranspose, getH\n\nExamples\n--------\n>>> m = np.matrix('[1, 2; 3, 4]')\n>>> m\nmatrix([[1, 2],\n        [3, 4]])\n>>> m.getT()\nmatrix([[1, 3],\n        [2, 4]])"
        },
        {
          "name": "H",
          "docstring": "Returns the (complex) conjugate transpose of `self`.\n\nEquivalent to ``np.transpose(self)`` if `self` is real-valued.\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : matrix object\n    complex conjugate transpose of `self`\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4)))\n>>> z = x - 1j*x; z\nmatrix([[  0. +0.j,   1. -1.j,   2. -2.j,   3. -3.j],\n        [  4. -4.j,   5. -5.j,   6. -6.j,   7. -7.j],\n        [  8. -8.j,   9. -9.j,  10.-10.j,  11.-11.j]])\n>>> z.getH()\nmatrix([[ 0. -0.j,  4. +4.j,  8. +8.j],\n        [ 1. +1.j,  5. +5.j,  9. +9.j],\n        [ 2. +2.j,  6. +6.j, 10.+10.j],\n        [ 3. +3.j,  7. +7.j, 11.+11.j]])"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "asmatrix",
      "docstring": "Interpret the input as a matrix.\n\nUnlike `matrix`, `asmatrix` does not make a copy if the input is already\na matrix or an ndarray.  Equivalent to ``matrix(data, copy=False)``.\n\nParameters\n----------\ndata : array_like\n    Input data.\ndtype : data-type\n   Data-type of the output matrix.\n\nReturns\n-------\nmat : matrix\n    `data` interpreted as a matrix.\n\nExamples\n--------\n>>> import numpy as np\n>>> x = np.array([[1, 2], [3, 4]])\n\n>>> m = np.asmatrix(x)\n\n>>> x[0,0] = 5\n\n>>> m\nmatrix([[5, 2],\n        [3, 4]])"
    },
    {
      "name": "bmat",
      "docstring": "Build a matrix object from a string, nested sequence, or array.\n\nParameters\n----------\nobj : str or array_like\n    Input data. If a string, variables in the current scope may be\n    referenced by name.\nldict : dict, optional\n    A dictionary that replaces local operands in current frame.\n    Ignored if `obj` is not a string or `gdict` is None.\ngdict : dict, optional\n    A dictionary that replaces global operands in current frame.\n    Ignored if `obj` is not a string.\n\nReturns\n-------\nout : matrix\n    Returns a matrix object, which is a specialized 2-D array.\n\nSee Also\n--------\nblock :\n    A generalization of this function for N-d arrays, that returns normal\n    ndarrays.\n\nExamples\n--------\n>>> import numpy as np\n>>> A = np.asmatrix('1 1; 1 1')\n>>> B = np.asmatrix('2 2; 2 2')\n>>> C = np.asmatrix('3 4; 5 6')\n>>> D = np.asmatrix('7 8; 9 0')\n\nAll the following expressions construct the same block matrix:\n\n>>> np.bmat([[A, B], [C, D]])\nmatrix([[1, 1, 2, 2],\n        [1, 1, 2, 2],\n        [3, 4, 7, 8],\n        [5, 6, 9, 0]])\n>>> np.bmat(np.r_[np.c_[A, B], np.c_[C, D]])\nmatrix([[1, 1, 2, 2],\n        [1, 1, 2, 2],\n        [3, 4, 7, 8],\n        [5, 6, 9, 0]])\n>>> np.bmat('A,B; C,D')\nmatrix([[1, 1, 2, 2],\n        [1, 1, 2, 2],\n        [3, 4, 7, 8],\n        [5, 6, 9, 0]])"
    },
    {
      "name": "tolist",
      "docstring": "Return the matrix as a (possibly nested) list.\n\nSee `ndarray.tolist` for full documentation.\n\nSee Also\n--------\nndarray.tolist\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.tolist()\n[[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]]"
    },
    {
      "name": "sum",
      "docstring": "Returns the sum of the matrix elements, along the given axis.\n\nRefer to `numpy.sum` for full documentation.\n\nSee Also\n--------\nnumpy.sum\n\nNotes\n-----\nThis is the same as `ndarray.sum`, except that where an `ndarray` would\nbe returned, a `matrix` object is returned instead.\n\nExamples\n--------\n>>> x = np.matrix([[1, 2], [4, 3]])\n>>> x.sum()\n10\n>>> x.sum(axis=1)\nmatrix([[3],\n        [7]])\n>>> x.sum(axis=1, dtype='float')\nmatrix([[3.],\n        [7.]])\n>>> out = np.zeros((2, 1), dtype='float')\n>>> x.sum(axis=1, dtype='float', out=np.asmatrix(out))\nmatrix([[3.],\n        [7.]])"
    },
    {
      "name": "squeeze",
      "docstring": "Return a possibly reshaped matrix.\n\nRefer to `numpy.squeeze` for more documentation.\n\nParameters\n----------\naxis : None or int or tuple of ints, optional\n    Selects a subset of the axes of length one in the shape.\n    If an axis is selected with shape entry greater than one,\n    an error is raised.\n\nReturns\n-------\nsqueezed : matrix\n    The matrix, but as a (1, N) matrix if it had shape (N, 1).\n\nSee Also\n--------\nnumpy.squeeze : related function\n\nNotes\n-----\nIf `m` has a single column then that column is returned\nas the single row of a matrix.  Otherwise `m` is returned.\nThe returned matrix is always either `m` itself or a view into `m`.\nSupplying an axis keyword argument will not affect the returned matrix\nbut it may cause an error to be raised.\n\nExamples\n--------\n>>> c = np.matrix([[1], [2]])\n>>> c\nmatrix([[1],\n        [2]])\n>>> c.squeeze()\nmatrix([[1, 2]])\n>>> r = c.T\n>>> r\nmatrix([[1, 2]])\n>>> r.squeeze()\nmatrix([[1, 2]])\n>>> m = np.matrix([[1, 2], [3, 4]])\n>>> m.squeeze()\nmatrix([[1, 2],\n        [3, 4]])"
    },
    {
      "name": "flatten",
      "docstring": "Return a flattened copy of the matrix.\n\nAll `N` elements of the matrix are placed into a single row.\n\nParameters\n----------\norder : {'C', 'F', 'A', 'K'}, optional\n    'C' means to flatten in row-major (C-style) order. 'F' means to\n    flatten in column-major (Fortran-style) order. 'A' means to\n    flatten in column-major order if `m` is Fortran *contiguous* in\n    memory, row-major order otherwise. 'K' means to flatten `m` in\n    the order the elements occur in memory. The default is 'C'.\n\nReturns\n-------\ny : matrix\n    A copy of the matrix, flattened to a `(1, N)` matrix where `N`\n    is the number of elements in the original matrix.\n\nSee Also\n--------\nravel : Return a flattened array.\nflat : A 1-D flat iterator over the matrix.\n\nExamples\n--------\n>>> m = np.matrix([[1,2], [3,4]])\n>>> m.flatten()\nmatrix([[1, 2, 3, 4]])\n>>> m.flatten('F')\nmatrix([[1, 3, 2, 4]])"
    },
    {
      "name": "mean",
      "docstring": "Returns the average of the matrix elements along the given axis.\n\nRefer to `numpy.mean` for full documentation.\n\nSee Also\n--------\nnumpy.mean\n\nNotes\n-----\nSame as `ndarray.mean` except that, where that returns an `ndarray`,\nthis returns a `matrix` object.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3, 4)))\n>>> x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.mean()\n5.5\n>>> x.mean(0)\nmatrix([[4., 5., 6., 7.]])\n>>> x.mean(1)\nmatrix([[ 1.5],\n        [ 5.5],\n        [ 9.5]])"
    },
    {
      "name": "std",
      "docstring": "Return the standard deviation of the array elements along the given axis.\n\nRefer to `numpy.std` for full documentation.\n\nSee Also\n--------\nnumpy.std\n\nNotes\n-----\nThis is the same as `ndarray.std`, except that where an `ndarray` would\nbe returned, a `matrix` object is returned instead.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3, 4)))\n>>> x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.std()\n3.4520525295346629 # may vary\n>>> x.std(0)\nmatrix([[ 3.26598632,  3.26598632,  3.26598632,  3.26598632]]) # may vary\n>>> x.std(1)\nmatrix([[ 1.11803399],\n        [ 1.11803399],\n        [ 1.11803399]])"
    },
    {
      "name": "var",
      "docstring": "Returns the variance of the matrix elements, along the given axis.\n\nRefer to `numpy.var` for full documentation.\n\nSee Also\n--------\nnumpy.var\n\nNotes\n-----\nThis is the same as `ndarray.var`, except that where an `ndarray` would\nbe returned, a `matrix` object is returned instead.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3, 4)))\n>>> x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.var()\n11.916666666666666\n>>> x.var(0)\nmatrix([[ 10.66666667,  10.66666667,  10.66666667,  10.66666667]]) # may vary\n>>> x.var(1)\nmatrix([[1.25],\n        [1.25],\n        [1.25]])"
    },
    {
      "name": "prod",
      "docstring": "Return the product of the array elements over the given axis.\n\nRefer to `prod` for full documentation.\n\nSee Also\n--------\nprod, ndarray.prod\n\nNotes\n-----\nSame as `ndarray.prod`, except, where that returns an `ndarray`, this\nreturns a `matrix` object instead.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.prod()\n0\n>>> x.prod(0)\nmatrix([[  0,  45, 120, 231]])\n>>> x.prod(1)\nmatrix([[   0],\n        [ 840],\n        [7920]])"
    },
    {
      "name": "any",
      "docstring": "Test whether any array element along a given axis evaluates to True.\n\nRefer to `numpy.any` for full documentation.\n\nParameters\n----------\naxis : int, optional\n    Axis along which logical OR is performed\nout : ndarray, optional\n    Output to existing array instead of creating new one, must have\n    same shape as expected output\n\nReturns\n-------\n    any : bool, ndarray\n        Returns a single bool if `axis` is ``None``; otherwise,\n        returns `ndarray`"
    },
    {
      "name": "all",
      "docstring": "Test whether all matrix elements along a given axis evaluate to True.\n\nParameters\n----------\nSee `numpy.all` for complete descriptions\n\nSee Also\n--------\nnumpy.all\n\nNotes\n-----\nThis is the same as `ndarray.all`, but it returns a `matrix` object.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> y = x[0]; y\nmatrix([[0, 1, 2, 3]])\n>>> (x == y)\nmatrix([[ True,  True,  True,  True],\n        [False, False, False, False],\n        [False, False, False, False]])\n>>> (x == y).all()\nFalse\n>>> (x == y).all(0)\nmatrix([[False, False, False, False]])\n>>> (x == y).all(1)\nmatrix([[ True],\n        [False],\n        [False]])"
    },
    {
      "name": "max",
      "docstring": "Return the maximum value along an axis.\n\nParameters\n----------\nSee `amax` for complete descriptions\n\nSee Also\n--------\namax, ndarray.max\n\nNotes\n-----\nThis is the same as `ndarray.max`, but returns a `matrix` object\nwhere `ndarray.max` would return an ndarray.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.max()\n11\n>>> x.max(0)\nmatrix([[ 8,  9, 10, 11]])\n>>> x.max(1)\nmatrix([[ 3],\n        [ 7],\n        [11]])"
    },
    {
      "name": "argmax",
      "docstring": "Indexes of the maximum values along an axis.\n\nReturn the indexes of the first occurrences of the maximum values\nalong the specified axis.  If axis is None, the index is for the\nflattened matrix.\n\nParameters\n----------\nSee `numpy.argmax` for complete descriptions\n\nSee Also\n--------\nnumpy.argmax\n\nNotes\n-----\nThis is the same as `ndarray.argmax`, but returns a `matrix` object\nwhere `ndarray.argmax` would return an `ndarray`.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.argmax()\n11\n>>> x.argmax(0)\nmatrix([[2, 2, 2, 2]])\n>>> x.argmax(1)\nmatrix([[3],\n        [3],\n        [3]])"
    },
    {
      "name": "min",
      "docstring": "Return the minimum value along an axis.\n\nParameters\n----------\nSee `amin` for complete descriptions.\n\nSee Also\n--------\namin, ndarray.min\n\nNotes\n-----\nThis is the same as `ndarray.min`, but returns a `matrix` object\nwhere `ndarray.min` would return an ndarray.\n\nExamples\n--------\n>>> x = -np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]])\n>>> x.min()\n-11\n>>> x.min(0)\nmatrix([[ -8,  -9, -10, -11]])\n>>> x.min(1)\nmatrix([[ -3],\n        [ -7],\n        [-11]])"
    },
    {
      "name": "argmin",
      "docstring": "Indexes of the minimum values along an axis.\n\nReturn the indexes of the first occurrences of the minimum values\nalong the specified axis.  If axis is None, the index is for the\nflattened matrix.\n\nParameters\n----------\nSee `numpy.argmin` for complete descriptions.\n\nSee Also\n--------\nnumpy.argmin\n\nNotes\n-----\nThis is the same as `ndarray.argmin`, but returns a `matrix` object\nwhere `ndarray.argmin` would return an `ndarray`.\n\nExamples\n--------\n>>> x = -np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[  0,  -1,  -2,  -3],\n        [ -4,  -5,  -6,  -7],\n        [ -8,  -9, -10, -11]])\n>>> x.argmin()\n11\n>>> x.argmin(0)\nmatrix([[2, 2, 2, 2]])\n>>> x.argmin(1)\nmatrix([[3],\n        [3],\n        [3]])"
    },
    {
      "name": "ptp",
      "docstring": "Peak-to-peak (maximum - minimum) value along the given axis.\n\nRefer to `numpy.ptp` for full documentation.\n\nSee Also\n--------\nnumpy.ptp\n\nNotes\n-----\nSame as `ndarray.ptp`, except, where that would return an `ndarray` object,\nthis returns a `matrix` object.\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.ptp()\n11\n>>> x.ptp(0)\nmatrix([[8, 8, 8, 8]])\n>>> x.ptp(1)\nmatrix([[3],\n        [3],\n        [3]])"
    },
    {
      "name": "I",
      "docstring": "Returns the (multiplicative) inverse of invertible `self`.\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : matrix object\n    If `self` is non-singular, `ret` is such that ``ret * self`` ==\n    ``self * ret`` == ``np.matrix(np.eye(self[0,:].size))`` all return\n    ``True``.\n\nRaises\n------\nnumpy.linalg.LinAlgError: Singular matrix\n    If `self` is singular.\n\nSee Also\n--------\nlinalg.inv\n\nExamples\n--------\n>>> m = np.matrix('[1, 2; 3, 4]'); m\nmatrix([[1, 2],\n        [3, 4]])\n>>> m.getI()\nmatrix([[-2. ,  1. ],\n        [ 1.5, -0.5]])\n>>> m.getI() * m\nmatrix([[ 1.,  0.], # may vary\n        [ 0.,  1.]])"
    },
    {
      "name": "A",
      "docstring": "Return `self` as an `ndarray` object.\n\nEquivalent to ``np.asarray(self)``.\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : ndarray\n    `self` as an `ndarray`\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.getA()\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])"
    },
    {
      "name": "A1",
      "docstring": "Return `self` as a flattened `ndarray`.\n\nEquivalent to ``np.asarray(x).ravel()``\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : ndarray\n    `self`, 1-D, as an `ndarray`\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4))); x\nmatrix([[ 0,  1,  2,  3],\n        [ 4,  5,  6,  7],\n        [ 8,  9, 10, 11]])\n>>> x.getA1()\narray([ 0,  1,  2, ...,  9, 10, 11])"
    },
    {
      "name": "ravel",
      "docstring": "Return a flattened matrix.\n\nRefer to `numpy.ravel` for more documentation.\n\nParameters\n----------\norder : {'C', 'F', 'A', 'K'}, optional\n    The elements of `m` are read using this index order. 'C' means to\n    index the elements in C-like order, with the last axis index\n    changing fastest, back to the first axis index changing slowest.\n    'F' means to index the elements in Fortran-like index order, with\n    the first index changing fastest, and the last index changing\n    slowest. Note that the 'C' and 'F' options take no account of the\n    memory layout of the underlying array, and only refer to the order\n    of axis indexing.  'A' means to read the elements in Fortran-like\n    index order if `m` is Fortran *contiguous* in memory, C-like order\n    otherwise.  'K' means to read the elements in the order they occur\n    in memory, except for reversing the data when strides are negative.\n    By default, 'C' index order is used.\n\nReturns\n-------\nret : matrix\n    Return the matrix flattened to shape `(1, N)` where `N`\n    is the number of elements in the original matrix.\n    A copy is made only if necessary.\n\nSee Also\n--------\nmatrix.flatten : returns a similar output matrix but always a copy\nmatrix.flat : a flat iterator on the array.\nnumpy.ravel : related function which returns an ndarray"
    },
    {
      "name": "T",
      "docstring": "Returns the transpose of the matrix.\n\nDoes *not* conjugate!  For the complex conjugate transpose, use ``.H``.\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : matrix object\n    The (non-conjugated) transpose of the matrix.\n\nSee Also\n--------\ntranspose, getH\n\nExamples\n--------\n>>> m = np.matrix('[1, 2; 3, 4]')\n>>> m\nmatrix([[1, 2],\n        [3, 4]])\n>>> m.getT()\nmatrix([[1, 3],\n        [2, 4]])"
    },
    {
      "name": "H",
      "docstring": "Returns the (complex) conjugate transpose of `self`.\n\nEquivalent to ``np.transpose(self)`` if `self` is real-valued.\n\nParameters\n----------\nNone\n\nReturns\n-------\nret : matrix object\n    complex conjugate transpose of `self`\n\nExamples\n--------\n>>> x = np.matrix(np.arange(12).reshape((3,4)))\n>>> z = x - 1j*x; z\nmatrix([[  0. +0.j,   1. -1.j,   2. -2.j,   3. -3.j],\n        [  4. -4.j,   5. -5.j,   6. -6.j,   7. -7.j],\n        [  8. -8.j,   9. -9.j,  10.-10.j,  11.-11.j]])\n>>> z.getH()\nmatrix([[ 0. -0.j,  4. +4.j,  8. +8.j],\n        [ 1. +1.j,  5. +5.j,  9. +9.j],\n        [ 2. +2.j,  6. +6.j, 10.+10.j],\n        [ 3. +3.j,  7. +7.j, 11.+11.j]])"
    }
  ],
  "innovations": []
}