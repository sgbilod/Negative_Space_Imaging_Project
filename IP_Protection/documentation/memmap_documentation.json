{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\_core\\memmap.py",
  "classes": [
    {
      "name": "memmap",
      "docstring": "Create a memory-map to an array stored in a *binary* file on disk.\n\nMemory-mapped files are used for accessing small segments of large files\non disk, without reading the entire file into memory.  NumPy's\nmemmap's are array-like objects.  This differs from Python's ``mmap``\nmodule, which uses file-like objects.\n\nThis subclass of ndarray has some unpleasant interactions with\nsome operations, because it doesn't quite fit properly as a subclass.\nAn alternative to using this subclass is to create the ``mmap``\nobject yourself, then create an ndarray with ndarray.__new__ directly,\npassing the object created in its 'buffer=' parameter.\n\nThis class may at some point be turned into a factory function\nwhich returns a view into an mmap buffer.\n\nFlush the memmap instance to write the changes to the file. Currently there\nis no API to close the underlying ``mmap``. It is tricky to ensure the\nresource is actually closed, since it may be shared between different\nmemmap instances.\n\n\nParameters\n----------\nfilename : str, file-like object, or pathlib.Path instance\n    The file name or file object to be used as the array data buffer.\ndtype : data-type, optional\n    The data-type used to interpret the file contents.\n    Default is `uint8`.\nmode : {'r+', 'r', 'w+', 'c'}, optional\n    The file is opened in this mode:\n\n    +------+-------------------------------------------------------------+\n    | 'r'  | Open existing file for reading only.                        |\n    +------+-------------------------------------------------------------+\n    | 'r+' | Open existing file for reading and writing.                 |\n    +------+-------------------------------------------------------------+\n    | 'w+' | Create or overwrite existing file for reading and writing.  |\n    |      | If ``mode == 'w+'`` then `shape` must also be specified.    |\n    +------+-------------------------------------------------------------+\n    | 'c'  | Copy-on-write: assignments affect data in memory, but       |\n    |      | changes are not saved to disk.  The file on disk is         |\n    |      | read-only.                                                  |\n    +------+-------------------------------------------------------------+\n\n    Default is 'r+'.\noffset : int, optional\n    In the file, array data starts at this offset. Since `offset` is\n    measured in bytes, it should normally be a multiple of the byte-size\n    of `dtype`. When ``mode != 'r'``, even positive offsets beyond end of\n    file are valid; The file will be extended to accommodate the\n    additional data. By default, ``memmap`` will start at the beginning of\n    the file, even if ``filename`` is a file pointer ``fp`` and\n    ``fp.tell() != 0``.\nshape : int or sequence of ints, optional\n    The desired shape of the array. If ``mode == 'r'`` and the number\n    of remaining bytes after `offset` is not a multiple of the byte-size\n    of `dtype`, you must specify `shape`. By default, the returned array\n    will be 1-D with the number of elements determined by file size\n    and data-type.\n\n    .. versionchanged:: 2.0\n     The shape parameter can now be any integer sequence type, previously\n     types were limited to tuple and int.\n\norder : {'C', 'F'}, optional\n    Specify the order of the ndarray memory layout:\n    :term:`row-major`, C-style or :term:`column-major`,\n    Fortran-style.  This only has an effect if the shape is\n    greater than 1-D.  The default order is 'C'.\n\nAttributes\n----------\nfilename : str or pathlib.Path instance\n    Path to the mapped file.\noffset : int\n    Offset position in the file.\nmode : str\n    File mode.\n\nMethods\n-------\nflush\n    Flush any changes in memory to file on disk.\n    When you delete a memmap object, flush is called first to write\n    changes to disk.\n\n\nSee also\n--------\nlib.format.open_memmap : Create or load a memory-mapped ``.npy`` file.\n\nNotes\n-----\nThe memmap object can be used anywhere an ndarray is accepted.\nGiven a memmap ``fp``, ``isinstance(fp, numpy.ndarray)`` returns\n``True``.\n\nMemory-mapped files cannot be larger than 2GB on 32-bit systems.\n\nWhen a memmap causes a file to be created or extended beyond its\ncurrent size in the filesystem, the contents of the new part are\nunspecified. On systems with POSIX filesystem semantics, the extended\npart will be filled with zero bytes.\n\nExamples\n--------\n>>> import numpy as np\n>>> data = np.arange(12, dtype='float32')\n>>> data.resize((3,4))\n\nThis example uses a temporary file so that doctest doesn't write\nfiles to your directory. You would use a 'normal' filename.\n\n>>> from tempfile import mkdtemp\n>>> import os.path as path\n>>> filename = path.join(mkdtemp(), 'newfile.dat')\n\nCreate a memmap with dtype and shape that matches our data:\n\n>>> fp = np.memmap(filename, dtype='float32', mode='w+', shape=(3,4))\n>>> fp\nmemmap([[0., 0., 0., 0.],\n        [0., 0., 0., 0.],\n        [0., 0., 0., 0.]], dtype=float32)\n\nWrite data to memmap array:\n\n>>> fp[:] = data[:]\n>>> fp\nmemmap([[  0.,   1.,   2.,   3.],\n        [  4.,   5.,   6.,   7.],\n        [  8.,   9.,  10.,  11.]], dtype=float32)\n\n>>> fp.filename == path.abspath(filename)\nTrue\n\nFlushes memory changes to disk in order to read them back\n\n>>> fp.flush()\n\nLoad the memmap and verify data was stored:\n\n>>> newfp = np.memmap(filename, dtype='float32', mode='r', shape=(3,4))\n>>> newfp\nmemmap([[  0.,   1.,   2.,   3.],\n        [  4.,   5.,   6.,   7.],\n        [  8.,   9.,  10.,  11.]], dtype=float32)\n\nRead-only memmap:\n\n>>> fpr = np.memmap(filename, dtype='float32', mode='r', shape=(3,4))\n>>> fpr.flags.writeable\nFalse\n\nCopy-on-write memmap:\n\n>>> fpc = np.memmap(filename, dtype='float32', mode='c', shape=(3,4))\n>>> fpc.flags.writeable\nTrue\n\nIt's possible to assign to copy-on-write array, but values are only\nwritten into the memory copy of the array, and not written to disk:\n\n>>> fpc\nmemmap([[  0.,   1.,   2.,   3.],\n        [  4.,   5.,   6.,   7.],\n        [  8.,   9.,  10.,  11.]], dtype=float32)\n>>> fpc[0,:] = 0\n>>> fpc\nmemmap([[  0.,   0.,   0.,   0.],\n        [  4.,   5.,   6.,   7.],\n        [  8.,   9.,  10.,  11.]], dtype=float32)\n\nFile on disk is unchanged:\n\n>>> fpr\nmemmap([[  0.,   1.,   2.,   3.],\n        [  4.,   5.,   6.,   7.],\n        [  8.,   9.,  10.,  11.]], dtype=float32)\n\nOffset into a memmap:\n\n>>> fpo = np.memmap(filename, dtype='float32', mode='r', offset=16)\n>>> fpo\nmemmap([  4.,   5.,   6.,   7.,   8.,   9.,  10.,  11.], dtype=float32)",
      "methods": [
        {
          "name": "flush",
          "docstring": "Write any changes in the array to the file on disk.\n\nFor further information, see `memmap`.\n\nParameters\n----------\nNone\n\nSee Also\n--------\nmemmap"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "flush",
      "docstring": "Write any changes in the array to the file on disk.\n\nFor further information, see `memmap`.\n\nParameters\n----------\nNone\n\nSee Also\n--------\nmemmap"
    }
  ],
  "innovations": []
}