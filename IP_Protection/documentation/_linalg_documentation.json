{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\linalg\\_linalg.py",
  "classes": [
    {
      "name": "EigResult",
      "docstring": null,
      "methods": []
    },
    {
      "name": "EighResult",
      "docstring": null,
      "methods": []
    },
    {
      "name": "QRResult",
      "docstring": null,
      "methods": []
    },
    {
      "name": "SlogdetResult",
      "docstring": null,
      "methods": []
    },
    {
      "name": "SVDResult",
      "docstring": null,
      "methods": []
    },
    {
      "name": "LinAlgError",
      "docstring": "Generic Python-exception-derived object raised by linalg functions.\n\nGeneral purpose exception class, derived from Python's ValueError\nclass, programmatically raised in linalg functions when a Linear\nAlgebra-related condition would prevent further correct execution of the\nfunction.\n\nParameters\n----------\nNone\n\nExamples\n--------\n>>> from numpy import linalg as LA\n>>> LA.inv(np.zeros((2,2)))\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"...linalg.py\", line 350,\n    in inv return wrap(solve(a, identity(a.shape[0], dtype=a.dtype)))\n  File \"...linalg.py\", line 249,\n    in solve\n    raise LinAlgError('Singular matrix')\nnumpy.linalg.LinAlgError: Singular matrix",
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "isComplexType",
      "docstring": null
    },
    {
      "name": "transpose",
      "docstring": "Transpose each matrix in a stack of matrices.\n\nUnlike np.transpose, this only swaps the last two axes, rather than all of\nthem\n\nParameters\n----------\na : (...,M,N) array_like\n\nReturns\n-------\naT : (...,N,M) ndarray"
    },
    {
      "name": "tensorsolve",
      "docstring": "Solve the tensor equation ``a x = b`` for x.\n\nIt is assumed that all indices of `x` are summed over in the product,\ntogether with the rightmost indices of `a`, as is done in, for example,\n``tensordot(a, x, axes=x.ndim)``.\n\nParameters\n----------\na : array_like\n    Coefficient tensor, of shape ``b.shape + Q``. `Q`, a tuple, equals\n    the shape of that sub-tensor of `a` consisting of the appropriate\n    number of its rightmost indices, and must be such that\n    ``prod(Q) == prod(b.shape)`` (in which sense `a` is said to be\n    'square').\nb : array_like\n    Right-hand tensor, which can be of any shape.\naxes : tuple of ints, optional\n    Axes in `a` to reorder to the right, before inversion.\n    If None (default), no reordering is done.\n\nReturns\n-------\nx : ndarray, shape Q\n\nRaises\n------\nLinAlgError\n    If `a` is singular or not 'square' (in the above sense).\n\nSee Also\n--------\nnumpy.tensordot, tensorinv, numpy.einsum\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.eye(2*3*4)\n>>> a.shape = (2*3, 4, 2, 3, 4)\n>>> rng = np.random.default_rng()\n>>> b = rng.normal(size=(2*3, 4))\n>>> x = np.linalg.tensorsolve(a, b)\n>>> x.shape\n(2, 3, 4)\n>>> np.allclose(np.tensordot(a, x, axes=3), b)\nTrue"
    },
    {
      "name": "solve",
      "docstring": "Solve a linear matrix equation, or system of linear scalar equations.\n\nComputes the \"exact\" solution, `x`, of the well-determined, i.e., full\nrank, linear matrix equation `ax = b`.\n\nParameters\n----------\na : (..., M, M) array_like\n    Coefficient matrix.\nb : {(M,), (..., M, K)}, array_like\n    Ordinate or \"dependent variable\" values.\n\nReturns\n-------\nx : {(..., M,), (..., M, K)} ndarray\n    Solution to the system a x = b.  Returned shape is (..., M) if b is\n    shape (M,) and (..., M, K) if b is (..., M, K), where the \"...\" part is\n    broadcasted between a and b.\n\nRaises\n------\nLinAlgError\n    If `a` is singular or not square.\n\nSee Also\n--------\nscipy.linalg.solve : Similar function in SciPy.\n\nNotes\n-----\nBroadcasting rules apply, see the `numpy.linalg` documentation for\ndetails.\n\nThe solutions are computed using LAPACK routine ``_gesv``.\n\n`a` must be square and of full-rank, i.e., all rows (or, equivalently,\ncolumns) must be linearly independent; if either is not true, use\n`lstsq` for the least-squares best \"solution\" of the\nsystem/equation.\n\n.. versionchanged:: 2.0\n\n   The b array is only treated as a shape (M,) column vector if it is\n   exactly 1-dimensional. In all other instances it is treated as a stack\n   of (M, K) matrices. Previously b would be treated as a stack of (M,)\n   vectors if b.ndim was equal to a.ndim - 1.\n\nReferences\n----------\n.. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,\n       FL, Academic Press, Inc., 1980, pg. 22.\n\nExamples\n--------\nSolve the system of equations:\n``x0 + 2 * x1 = 1`` and\n``3 * x0 + 5 * x1 = 2``:\n\n>>> import numpy as np\n>>> a = np.array([[1, 2], [3, 5]])\n>>> b = np.array([1, 2])\n>>> x = np.linalg.solve(a, b)\n>>> x\narray([-1.,  1.])\n\nCheck that the solution is correct:\n\n>>> np.allclose(np.dot(a, x), b)\nTrue"
    },
    {
      "name": "tensorinv",
      "docstring": "Compute the 'inverse' of an N-dimensional array.\n\nThe result is an inverse for `a` relative to the tensordot operation\n``tensordot(a, b, ind)``, i. e., up to floating-point accuracy,\n``tensordot(tensorinv(a), a, ind)`` is the \"identity\" tensor for the\ntensordot operation.\n\nParameters\n----------\na : array_like\n    Tensor to 'invert'. Its shape must be 'square', i. e.,\n    ``prod(a.shape[:ind]) == prod(a.shape[ind:])``.\nind : int, optional\n    Number of first indices that are involved in the inverse sum.\n    Must be a positive integer, default is 2.\n\nReturns\n-------\nb : ndarray\n    `a`'s tensordot inverse, shape ``a.shape[ind:] + a.shape[:ind]``.\n\nRaises\n------\nLinAlgError\n    If `a` is singular or not 'square' (in the above sense).\n\nSee Also\n--------\nnumpy.tensordot, tensorsolve\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.eye(4*6)\n>>> a.shape = (4, 6, 8, 3)\n>>> ainv = np.linalg.tensorinv(a, ind=2)\n>>> ainv.shape\n(8, 3, 4, 6)\n>>> rng = np.random.default_rng()\n>>> b = rng.normal(size=(4, 6))\n>>> np.allclose(np.tensordot(ainv, b), np.linalg.tensorsolve(a, b))\nTrue\n\n>>> a = np.eye(4*6)\n>>> a.shape = (24, 8, 3)\n>>> ainv = np.linalg.tensorinv(a, ind=1)\n>>> ainv.shape\n(8, 3, 24)\n>>> rng = np.random.default_rng()\n>>> b = rng.normal(size=24)\n>>> np.allclose(np.tensordot(ainv, b, 1), np.linalg.tensorsolve(a, b))\nTrue"
    },
    {
      "name": "inv",
      "docstring": "Compute the inverse of a matrix.\n\nGiven a square matrix `a`, return the matrix `ainv` satisfying\n``a @ ainv = ainv @ a = eye(a.shape[0])``.\n\nParameters\n----------\na : (..., M, M) array_like\n    Matrix to be inverted.\n\nReturns\n-------\nainv : (..., M, M) ndarray or matrix\n    Inverse of the matrix `a`.\n\nRaises\n------\nLinAlgError\n    If `a` is not square or inversion fails.\n\nSee Also\n--------\nscipy.linalg.inv : Similar function in SciPy.\nnumpy.linalg.cond : Compute the condition number of a matrix.\nnumpy.linalg.svd : Compute the singular value decomposition of a matrix.\n\nNotes\n-----\nBroadcasting rules apply, see the `numpy.linalg` documentation for\ndetails.\n\nIf `a` is detected to be singular, a `LinAlgError` is raised. If `a` is\nill-conditioned, a `LinAlgError` may or may not be raised, and results may\nbe inaccurate due to floating-point errors.\n\nReferences\n----------\n.. [1] Wikipedia, \"Condition number\",\n       https://en.wikipedia.org/wiki/Condition_number\n\nExamples\n--------\n>>> import numpy as np\n>>> from numpy.linalg import inv\n>>> a = np.array([[1., 2.], [3., 4.]])\n>>> ainv = inv(a)\n>>> np.allclose(a @ ainv, np.eye(2))\nTrue\n>>> np.allclose(ainv @ a, np.eye(2))\nTrue\n\nIf a is a matrix object, then the return value is a matrix as well:\n\n>>> ainv = inv(np.matrix(a))\n>>> ainv\nmatrix([[-2. ,  1. ],\n        [ 1.5, -0.5]])\n\nInverses of several matrices can be computed at once:\n\n>>> a = np.array([[[1., 2.], [3., 4.]], [[1, 3], [3, 5]]])\n>>> inv(a)\narray([[[-2.  ,  1.  ],\n        [ 1.5 , -0.5 ]],\n       [[-1.25,  0.75],\n        [ 0.75, -0.25]]])\n\nIf a matrix is close to singular, the computed inverse may not satisfy\n``a @ ainv = ainv @ a = eye(a.shape[0])`` even if a `LinAlgError`\nis not raised:\n\n>>> a = np.array([[2,4,6],[2,0,2],[6,8,14]])\n>>> inv(a)  # No errors raised\narray([[-1.12589991e+15, -5.62949953e+14,  5.62949953e+14],\n   [-1.12589991e+15, -5.62949953e+14,  5.62949953e+14],\n   [ 1.12589991e+15,  5.62949953e+14, -5.62949953e+14]])\n>>> a @ inv(a)\narray([[ 0.   , -0.5  ,  0.   ],  # may vary\n       [-0.5  ,  0.625,  0.25 ],\n       [ 0.   ,  0.   ,  1.   ]])\n\nTo detect ill-conditioned matrices, you can use `numpy.linalg.cond` to\ncompute its *condition number* [1]_. The larger the condition number, the\nmore ill-conditioned the matrix is. As a rule of thumb, if the condition\nnumber ``cond(a) = 10**k``, then you may lose up to ``k`` digits of\naccuracy on top of what would be lost to the numerical method due to loss\nof precision from arithmetic methods.\n\n>>> from numpy.linalg import cond\n>>> cond(a)\nnp.float64(8.659885634118668e+17)  # may vary\n\nIt is also possible to detect ill-conditioning by inspecting the matrix's\nsingular values directly. The ratio between the largest and the smallest\nsingular value is the condition number:\n\n>>> from numpy.linalg import svd\n>>> sigma = svd(a, compute_uv=False)  # Do not compute singular vectors\n>>> sigma.max()/sigma.min()\n8.659885634118668e+17  # may vary"
    },
    {
      "name": "matrix_power",
      "docstring": "Raise a square matrix to the (integer) power `n`.\n\nFor positive integers `n`, the power is computed by repeated matrix\nsquarings and matrix multiplications. If ``n == 0``, the identity matrix\nof the same shape as M is returned. If ``n < 0``, the inverse\nis computed and then raised to the ``abs(n)``.\n\n.. note:: Stacks of object matrices are not currently supported.\n\nParameters\n----------\na : (..., M, M) array_like\n    Matrix to be \"powered\".\nn : int\n    The exponent can be any integer or long integer, positive,\n    negative, or zero.\n\nReturns\n-------\na**n : (..., M, M) ndarray or matrix object\n    The return value is the same shape and type as `M`;\n    if the exponent is positive or zero then the type of the\n    elements is the same as those of `M`. If the exponent is\n    negative the elements are floating-point.\n\nRaises\n------\nLinAlgError\n    For matrices that are not square or that (for negative powers) cannot\n    be inverted numerically.\n\nExamples\n--------\n>>> import numpy as np\n>>> from numpy.linalg import matrix_power\n>>> i = np.array([[0, 1], [-1, 0]]) # matrix equiv. of the imaginary unit\n>>> matrix_power(i, 3) # should = -i\narray([[ 0, -1],\n       [ 1,  0]])\n>>> matrix_power(i, 0)\narray([[1, 0],\n       [0, 1]])\n>>> matrix_power(i, -3) # should = 1/(-i) = i, but w/ f.p. elements\narray([[ 0.,  1.],\n       [-1.,  0.]])\n\nSomewhat more sophisticated example\n\n>>> q = np.zeros((4, 4))\n>>> q[0:2, 0:2] = -i\n>>> q[2:4, 2:4] = i\n>>> q # one of the three quaternion units not equal to 1\narray([[ 0., -1.,  0.,  0.],\n       [ 1.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  1.],\n       [ 0.,  0., -1.,  0.]])\n>>> matrix_power(q, 2) # = -np.eye(4)\narray([[-1.,  0.,  0.,  0.],\n       [ 0., -1.,  0.,  0.],\n       [ 0.,  0., -1.,  0.],\n       [ 0.,  0.,  0., -1.]])"
    },
    {
      "name": "cholesky",
      "docstring": "Cholesky decomposition.\n\nReturn the lower or upper Cholesky decomposition, ``L * L.H`` or\n``U.H * U``, of the square matrix ``a``, where ``L`` is lower-triangular,\n``U`` is upper-triangular, and ``.H`` is the conjugate transpose operator\n(which is the ordinary transpose if ``a`` is real-valued). ``a`` must be\nHermitian (symmetric if real-valued) and positive-definite. No checking is\nperformed to verify whether ``a`` is Hermitian or not. In addition, only\nthe lower or upper-triangular and diagonal elements of ``a`` are used.\nOnly ``L`` or ``U`` is actually returned.\n\nParameters\n----------\na : (..., M, M) array_like\n    Hermitian (symmetric if all elements are real), positive-definite\n    input matrix.\nupper : bool\n    If ``True``, the result must be the upper-triangular Cholesky factor.\n    If ``False``, the result must be the lower-triangular Cholesky factor.\n    Default: ``False``.\n\nReturns\n-------\nL : (..., M, M) array_like\n    Lower or upper-triangular Cholesky factor of `a`. Returns a matrix\n    object if `a` is a matrix object.\n\nRaises\n------\nLinAlgError\n   If the decomposition fails, for example, if `a` is not\n   positive-definite.\n\nSee Also\n--------\nscipy.linalg.cholesky : Similar function in SciPy.\nscipy.linalg.cholesky_banded : Cholesky decompose a banded Hermitian\n                               positive-definite matrix.\nscipy.linalg.cho_factor : Cholesky decomposition of a matrix, to use in\n                          `scipy.linalg.cho_solve`.\n\nNotes\n-----\nBroadcasting rules apply, see the `numpy.linalg` documentation for\ndetails.\n\nThe Cholesky decomposition is often used as a fast way of solving\n\n.. math:: A \\mathbf{x} = \\mathbf{b}\n\n(when `A` is both Hermitian/symmetric and positive-definite).\n\nFirst, we solve for :math:`\\mathbf{y}` in\n\n.. math:: L \\mathbf{y} = \\mathbf{b},\n\nand then for :math:`\\mathbf{x}` in\n\n.. math:: L^{H} \\mathbf{x} = \\mathbf{y}.\n\nExamples\n--------\n>>> import numpy as np\n>>> A = np.array([[1,-2j],[2j,5]])\n>>> A\narray([[ 1.+0.j, -0.-2.j],\n       [ 0.+2.j,  5.+0.j]])\n>>> L = np.linalg.cholesky(A)\n>>> L\narray([[1.+0.j, 0.+0.j],\n       [0.+2.j, 1.+0.j]])\n>>> np.dot(L, L.T.conj()) # verify that L * L.H = A\narray([[1.+0.j, 0.-2.j],\n       [0.+2.j, 5.+0.j]])\n>>> A = [[1,-2j],[2j,5]] # what happens if A is only array_like?\n>>> np.linalg.cholesky(A) # an ndarray object is returned\narray([[1.+0.j, 0.+0.j],\n       [0.+2.j, 1.+0.j]])\n>>> # But a matrix object is returned if A is a matrix object\n>>> np.linalg.cholesky(np.matrix(A))\nmatrix([[ 1.+0.j,  0.+0.j],\n        [ 0.+2.j,  1.+0.j]])\n>>> # The upper-triangular Cholesky factor can also be obtained.\n>>> np.linalg.cholesky(A, upper=True)\narray([[1.-0.j, 0.-2.j],\n       [0.-0.j, 1.-0.j]])"
    },
    {
      "name": "outer",
      "docstring": "Compute the outer product of two vectors.\n\nThis function is Array API compatible. Compared to ``np.outer``\nit accepts 1-dimensional inputs only.\n\nParameters\n----------\nx1 : (M,) array_like\n    One-dimensional input array of size ``N``.\n    Must have a numeric data type.\nx2 : (N,) array_like\n    One-dimensional input array of size ``M``.\n    Must have a numeric data type.\n\nReturns\n-------\nout : (M, N) ndarray\n    ``out[i, j] = a[i] * b[j]``\n\nSee also\n--------\nouter\n\nExamples\n--------\nMake a (*very* coarse) grid for computing a Mandelbrot set:\n\n>>> rl = np.linalg.outer(np.ones((5,)), np.linspace(-2, 2, 5))\n>>> rl\narray([[-2., -1.,  0.,  1.,  2.],\n       [-2., -1.,  0.,  1.,  2.],\n       [-2., -1.,  0.,  1.,  2.],\n       [-2., -1.,  0.,  1.,  2.],\n       [-2., -1.,  0.,  1.,  2.]])\n>>> im = np.linalg.outer(1j*np.linspace(2, -2, 5), np.ones((5,)))\n>>> im\narray([[0.+2.j, 0.+2.j, 0.+2.j, 0.+2.j, 0.+2.j],\n       [0.+1.j, 0.+1.j, 0.+1.j, 0.+1.j, 0.+1.j],\n       [0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j, 0.+0.j],\n       [0.-1.j, 0.-1.j, 0.-1.j, 0.-1.j, 0.-1.j],\n       [0.-2.j, 0.-2.j, 0.-2.j, 0.-2.j, 0.-2.j]])\n>>> grid = rl + im\n>>> grid\narray([[-2.+2.j, -1.+2.j,  0.+2.j,  1.+2.j,  2.+2.j],\n       [-2.+1.j, -1.+1.j,  0.+1.j,  1.+1.j,  2.+1.j],\n       [-2.+0.j, -1.+0.j,  0.+0.j,  1.+0.j,  2.+0.j],\n       [-2.-1.j, -1.-1.j,  0.-1.j,  1.-1.j,  2.-1.j],\n       [-2.-2.j, -1.-2.j,  0.-2.j,  1.-2.j,  2.-2.j]])\n\nAn example using a \"vector\" of letters:\n\n>>> x = np.array(['a', 'b', 'c'], dtype=object)\n>>> np.linalg.outer(x, [1, 2, 3])\narray([['a', 'aa', 'aaa'],\n       ['b', 'bb', 'bbb'],\n       ['c', 'cc', 'ccc']], dtype=object)"
    },
    {
      "name": "qr",
      "docstring": "Compute the qr factorization of a matrix.\n\nFactor the matrix `a` as *qr*, where `q` is orthonormal and `r` is\nupper-triangular.\n\nParameters\n----------\na : array_like, shape (..., M, N)\n    An array-like object with the dimensionality of at least 2.\nmode : {'reduced', 'complete', 'r', 'raw'}, optional, default: 'reduced'\n    If K = min(M, N), then\n\n    * 'reduced'  : returns Q, R with dimensions (..., M, K), (..., K, N)\n    * 'complete' : returns Q, R with dimensions (..., M, M), (..., M, N)\n    * 'r'        : returns R only with dimensions (..., K, N)\n    * 'raw'      : returns h, tau with dimensions (..., N, M), (..., K,)\n\n    The options 'reduced', 'complete, and 'raw' are new in numpy 1.8,\n    see the notes for more information. The default is 'reduced', and to\n    maintain backward compatibility with earlier versions of numpy both\n    it and the old default 'full' can be omitted. Note that array h\n    returned in 'raw' mode is transposed for calling Fortran. The\n    'economic' mode is deprecated.  The modes 'full' and 'economic' may\n    be passed using only the first letter for backwards compatibility,\n    but all others must be spelled out. See the Notes for more\n    explanation.\n\n\nReturns\n-------\nWhen mode is 'reduced' or 'complete', the result will be a namedtuple with\nthe attributes `Q` and `R`.\n\nQ : ndarray of float or complex, optional\n    A matrix with orthonormal columns. When mode = 'complete' the\n    result is an orthogonal/unitary matrix depending on whether or not\n    a is real/complex. The determinant may be either +/- 1 in that\n    case. In case the number of dimensions in the input array is\n    greater than 2 then a stack of the matrices with above properties\n    is returned.\nR : ndarray of float or complex, optional\n    The upper-triangular matrix or a stack of upper-triangular\n    matrices if the number of dimensions in the input array is greater\n    than 2.\n(h, tau) : ndarrays of np.double or np.cdouble, optional\n    The array h contains the Householder reflectors that generate q\n    along with r. The tau array contains scaling factors for the\n    reflectors. In the deprecated  'economic' mode only h is returned.\n\nRaises\n------\nLinAlgError\n    If factoring fails.\n\nSee Also\n--------\nscipy.linalg.qr : Similar function in SciPy.\nscipy.linalg.rq : Compute RQ decomposition of a matrix.\n\nNotes\n-----\nThis is an interface to the LAPACK routines ``dgeqrf``, ``zgeqrf``,\n``dorgqr``, and ``zungqr``.\n\nFor more information on the qr factorization, see for example:\nhttps://en.wikipedia.org/wiki/QR_factorization\n\nSubclasses of `ndarray` are preserved except for the 'raw' mode. So if\n`a` is of type `matrix`, all the return values will be matrices too.\n\nNew 'reduced', 'complete', and 'raw' options for mode were added in\nNumPy 1.8.0 and the old option 'full' was made an alias of 'reduced'.  In\naddition the options 'full' and 'economic' were deprecated.  Because\n'full' was the previous default and 'reduced' is the new default,\nbackward compatibility can be maintained by letting `mode` default.\nThe 'raw' option was added so that LAPACK routines that can multiply\narrays by q using the Householder reflectors can be used. Note that in\nthis case the returned arrays are of type np.double or np.cdouble and\nthe h array is transposed to be FORTRAN compatible.  No routines using\nthe 'raw' return are currently exposed by numpy, but some are available\nin lapack_lite and just await the necessary work.\n\nExamples\n--------\n>>> import numpy as np\n>>> rng = np.random.default_rng()\n>>> a = rng.normal(size=(9, 6))\n>>> Q, R = np.linalg.qr(a)\n>>> np.allclose(a, np.dot(Q, R))  # a does equal QR\nTrue\n>>> R2 = np.linalg.qr(a, mode='r')\n>>> np.allclose(R, R2)  # mode='r' returns the same R as mode='full'\nTrue\n>>> a = np.random.normal(size=(3, 2, 2)) # Stack of 2 x 2 matrices as input\n>>> Q, R = np.linalg.qr(a)\n>>> Q.shape\n(3, 2, 2)\n>>> R.shape\n(3, 2, 2)\n>>> np.allclose(a, np.matmul(Q, R))\nTrue\n\nExample illustrating a common use of `qr`: solving of least squares\nproblems\n\nWhat are the least-squares-best `m` and `y0` in ``y = y0 + mx`` for\nthe following data: {(0,1), (1,0), (1,2), (2,1)}. (Graph the points\nand you'll see that it should be y0 = 0, m = 1.)  The answer is provided\nby solving the over-determined matrix equation ``Ax = b``, where::\n\n  A = array([[0, 1], [1, 1], [1, 1], [2, 1]])\n  x = array([[y0], [m]])\n  b = array([[1], [0], [2], [1]])\n\nIf A = QR such that Q is orthonormal (which is always possible via\nGram-Schmidt), then ``x = inv(R) * (Q.T) * b``.  (In numpy practice,\nhowever, we simply use `lstsq`.)\n\n>>> A = np.array([[0, 1], [1, 1], [1, 1], [2, 1]])\n>>> A\narray([[0, 1],\n       [1, 1],\n       [1, 1],\n       [2, 1]])\n>>> b = np.array([1, 2, 2, 3])\n>>> Q, R = np.linalg.qr(A)\n>>> p = np.dot(Q.T, b)\n>>> np.dot(np.linalg.inv(R), p)\narray([  1.,   1.])"
    },
    {
      "name": "eigvals",
      "docstring": "Compute the eigenvalues of a general matrix.\n\nMain difference between `eigvals` and `eig`: the eigenvectors aren't\nreturned.\n\nParameters\n----------\na : (..., M, M) array_like\n    A complex- or real-valued matrix whose eigenvalues will be computed.\n\nReturns\n-------\nw : (..., M,) ndarray\n    The eigenvalues, each repeated according to its multiplicity.\n    They are not necessarily ordered, nor are they necessarily\n    real for real matrices.\n\nRaises\n------\nLinAlgError\n    If the eigenvalue computation does not converge.\n\nSee Also\n--------\neig : eigenvalues and right eigenvectors of general arrays\neigvalsh : eigenvalues of real symmetric or complex Hermitian\n           (conjugate symmetric) arrays.\neigh : eigenvalues and eigenvectors of real symmetric or complex\n       Hermitian (conjugate symmetric) arrays.\nscipy.linalg.eigvals : Similar function in SciPy.\n\nNotes\n-----\nBroadcasting rules apply, see the `numpy.linalg` documentation for\ndetails.\n\nThis is implemented using the ``_geev`` LAPACK routines which compute\nthe eigenvalues and eigenvectors of general square arrays.\n\nExamples\n--------\nIllustration, using the fact that the eigenvalues of a diagonal matrix\nare its diagonal elements, that multiplying a matrix on the left\nby an orthogonal matrix, `Q`, and on the right by `Q.T` (the transpose\nof `Q`), preserves the eigenvalues of the \"middle\" matrix. In other words,\nif `Q` is orthogonal, then ``Q * A * Q.T`` has the same eigenvalues as\n``A``:\n\n>>> import numpy as np\n>>> from numpy import linalg as LA\n>>> x = np.random.random()\n>>> Q = np.array([[np.cos(x), -np.sin(x)], [np.sin(x), np.cos(x)]])\n>>> LA.norm(Q[0, :]), LA.norm(Q[1, :]), np.dot(Q[0, :],Q[1, :])\n(1.0, 1.0, 0.0)\n\nNow multiply a diagonal matrix by ``Q`` on one side and\nby ``Q.T`` on the other:\n\n>>> D = np.diag((-1,1))\n>>> LA.eigvals(D)\narray([-1.,  1.])\n>>> A = np.dot(Q, D)\n>>> A = np.dot(A, Q.T)\n>>> LA.eigvals(A)\narray([ 1., -1.]) # random"
    },
    {
      "name": "eigvalsh",
      "docstring": "Compute the eigenvalues of a complex Hermitian or real symmetric matrix.\n\nMain difference from eigh: the eigenvectors are not computed.\n\nParameters\n----------\na : (..., M, M) array_like\n    A complex- or real-valued matrix whose eigenvalues are to be\n    computed.\nUPLO : {'L', 'U'}, optional\n    Specifies whether the calculation is done with the lower triangular\n    part of `a` ('L', default) or the upper triangular part ('U').\n    Irrespective of this value only the real parts of the diagonal will\n    be considered in the computation to preserve the notion of a Hermitian\n    matrix. It therefore follows that the imaginary part of the diagonal\n    will always be treated as zero.\n\nReturns\n-------\nw : (..., M,) ndarray\n    The eigenvalues in ascending order, each repeated according to\n    its multiplicity.\n\nRaises\n------\nLinAlgError\n    If the eigenvalue computation does not converge.\n\nSee Also\n--------\neigh : eigenvalues and eigenvectors of real symmetric or complex Hermitian\n       (conjugate symmetric) arrays.\neigvals : eigenvalues of general real or complex arrays.\neig : eigenvalues and right eigenvectors of general real or complex\n      arrays.\nscipy.linalg.eigvalsh : Similar function in SciPy.\n\nNotes\n-----\nBroadcasting rules apply, see the `numpy.linalg` documentation for\ndetails.\n\nThe eigenvalues are computed using LAPACK routines ``_syevd``, ``_heevd``.\n\nExamples\n--------\n>>> import numpy as np\n>>> from numpy import linalg as LA\n>>> a = np.array([[1, -2j], [2j, 5]])\n>>> LA.eigvalsh(a)\narray([ 0.17157288,  5.82842712]) # may vary\n\n>>> # demonstrate the treatment of the imaginary part of the diagonal\n>>> a = np.array([[5+2j, 9-2j], [0+2j, 2-1j]])\n>>> a\narray([[5.+2.j, 9.-2.j],\n       [0.+2.j, 2.-1.j]])\n>>> # with UPLO='L' this is numerically equivalent to using LA.eigvals()\n>>> # with:\n>>> b = np.array([[5.+0.j, 0.-2.j], [0.+2.j, 2.-0.j]])\n>>> b\narray([[5.+0.j, 0.-2.j],\n       [0.+2.j, 2.+0.j]])\n>>> wa = LA.eigvalsh(a)\n>>> wb = LA.eigvals(b)\n>>> wa; wb\narray([1., 6.])\narray([6.+0.j, 1.+0.j])"
    },
    {
      "name": "eig",
      "docstring": "Compute the eigenvalues and right eigenvectors of a square array.\n\nParameters\n----------\na : (..., M, M) array\n    Matrices for which the eigenvalues and right eigenvectors will\n    be computed\n\nReturns\n-------\nA namedtuple with the following attributes:\n\neigenvalues : (..., M) array\n    The eigenvalues, each repeated according to its multiplicity.\n    The eigenvalues are not necessarily ordered. The resulting\n    array will be of complex type, unless the imaginary part is\n    zero in which case it will be cast to a real type. When `a`\n    is real the resulting eigenvalues will be real (0 imaginary\n    part) or occur in conjugate pairs\n\neigenvectors : (..., M, M) array\n    The normalized (unit \"length\") eigenvectors, such that the\n    column ``eigenvectors[:,i]`` is the eigenvector corresponding to the\n    eigenvalue ``eigenvalues[i]``.\n\nRaises\n------\nLinAlgError\n    If the eigenvalue computation does not converge.\n\nSee Also\n--------\neigvals : eigenvalues of a non-symmetric array.\neigh : eigenvalues and eigenvectors of a real symmetric or complex\n       Hermitian (conjugate symmetric) array.\neigvalsh : eigenvalues of a real symmetric or complex Hermitian\n           (conjugate symmetric) array.\nscipy.linalg.eig : Similar function in SciPy that also solves the\n                   generalized eigenvalue problem.\nscipy.linalg.schur : Best choice for unitary and other non-Hermitian\n                     normal matrices.\n\nNotes\n-----\nBroadcasting rules apply, see the `numpy.linalg` documentation for\ndetails.\n\nThis is implemented using the ``_geev`` LAPACK routines which compute\nthe eigenvalues and eigenvectors of general square arrays.\n\nThe number `w` is an eigenvalue of `a` if there exists a vector `v` such\nthat ``a @ v = w * v``. Thus, the arrays `a`, `eigenvalues`, and\n`eigenvectors` satisfy the equations ``a @ eigenvectors[:,i] =\neigenvalues[i] * eigenvectors[:,i]`` for :math:`i \\in \\{0,...,M-1\\}`.\n\nThe array `eigenvectors` may not be of maximum rank, that is, some of the\ncolumns may be linearly dependent, although round-off error may obscure\nthat fact. If the eigenvalues are all different, then theoretically the\neigenvectors are linearly independent and `a` can be diagonalized by a\nsimilarity transformation using `eigenvectors`, i.e, ``inv(eigenvectors) @\na @ eigenvectors`` is diagonal.\n\nFor non-Hermitian normal matrices the SciPy function `scipy.linalg.schur`\nis preferred because the matrix `eigenvectors` is guaranteed to be\nunitary, which is not the case when using `eig`. The Schur factorization\nproduces an upper triangular matrix rather than a diagonal matrix, but for\nnormal matrices only the diagonal of the upper triangular matrix is\nneeded, the rest is roundoff error.\n\nFinally, it is emphasized that `eigenvectors` consists of the *right* (as\nin right-hand side) eigenvectors of `a`. A vector `y` satisfying ``y.T @ a\n= z * y.T`` for some number `z` is called a *left* eigenvector of `a`,\nand, in general, the left and right eigenvectors of a matrix are not\nnecessarily the (perhaps conjugate) transposes of each other.\n\nReferences\n----------\nG. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando, FL,\nAcademic Press, Inc., 1980, Various pp.\n\nExamples\n--------\n>>> import numpy as np\n>>> from numpy import linalg as LA\n\n(Almost) trivial example with real eigenvalues and eigenvectors.\n\n>>> eigenvalues, eigenvectors = LA.eig(np.diag((1, 2, 3)))\n>>> eigenvalues\narray([1., 2., 3.])\n>>> eigenvectors\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\nReal matrix possessing complex eigenvalues and eigenvectors;\nnote that the eigenvalues are complex conjugates of each other.\n\n>>> eigenvalues, eigenvectors = LA.eig(np.array([[1, -1], [1, 1]]))\n>>> eigenvalues\narray([1.+1.j, 1.-1.j])\n>>> eigenvectors\narray([[0.70710678+0.j        , 0.70710678-0.j        ],\n       [0.        -0.70710678j, 0.        +0.70710678j]])\n\nComplex-valued matrix with real eigenvalues (but complex-valued\neigenvectors); note that ``a.conj().T == a``, i.e., `a` is Hermitian.\n\n>>> a = np.array([[1, 1j], [-1j, 1]])\n>>> eigenvalues, eigenvectors = LA.eig(a)\n>>> eigenvalues\narray([2.+0.j, 0.+0.j])\n>>> eigenvectors\narray([[ 0.        +0.70710678j,  0.70710678+0.j        ], # may vary\n       [ 0.70710678+0.j        , -0.        +0.70710678j]])\n\nBe careful about round-off error!\n\n>>> a = np.array([[1 + 1e-9, 0], [0, 1 - 1e-9]])\n>>> # Theor. eigenvalues are 1 +/- 1e-9\n>>> eigenvalues, eigenvectors = LA.eig(a)\n>>> eigenvalues\narray([1., 1.])\n>>> eigenvectors\narray([[1., 0.],\n       [0., 1.]])"
    },
    {
      "name": "eigh",
      "docstring": "Return the eigenvalues and eigenvectors of a complex Hermitian\n(conjugate symmetric) or a real symmetric matrix.\n\nReturns two objects, a 1-D array containing the eigenvalues of `a`, and\na 2-D square array or matrix (depending on the input type) of the\ncorresponding eigenvectors (in columns).\n\nParameters\n----------\na : (..., M, M) array\n    Hermitian or real symmetric matrices whose eigenvalues and\n    eigenvectors are to be computed.\nUPLO : {'L', 'U'}, optional\n    Specifies whether the calculation is done with the lower triangular\n    part of `a` ('L', default) or the upper triangular part ('U').\n    Irrespective of this value only the real parts of the diagonal will\n    be considered in the computation to preserve the notion of a Hermitian\n    matrix. It therefore follows that the imaginary part of the diagonal\n    will always be treated as zero.\n\nReturns\n-------\nA namedtuple with the following attributes:\n\neigenvalues : (..., M) ndarray\n    The eigenvalues in ascending order, each repeated according to\n    its multiplicity.\neigenvectors : {(..., M, M) ndarray, (..., M, M) matrix}\n    The column ``eigenvectors[:, i]`` is the normalized eigenvector\n    corresponding to the eigenvalue ``eigenvalues[i]``.  Will return a\n    matrix object if `a` is a matrix object.\n\nRaises\n------\nLinAlgError\n    If the eigenvalue computation does not converge.\n\nSee Also\n--------\neigvalsh : eigenvalues of real symmetric or complex Hermitian\n           (conjugate symmetric) arrays.\neig : eigenvalues and right eigenvectors for non-symmetric arrays.\neigvals : eigenvalues of non-symmetric arrays.\nscipy.linalg.eigh : Similar function in SciPy (but also solves the\n                    generalized eigenvalue problem).\n\nNotes\n-----\nBroadcasting rules apply, see the `numpy.linalg` documentation for\ndetails.\n\nThe eigenvalues/eigenvectors are computed using LAPACK routines ``_syevd``,\n``_heevd``.\n\nThe eigenvalues of real symmetric or complex Hermitian matrices are always\nreal. [1]_ The array `eigenvalues` of (column) eigenvectors is unitary and\n`a`, `eigenvalues`, and `eigenvectors` satisfy the equations ``dot(a,\neigenvectors[:, i]) = eigenvalues[i] * eigenvectors[:, i]``.\n\nReferences\n----------\n.. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,\n       FL, Academic Press, Inc., 1980, pg. 222.\n\nExamples\n--------\n>>> import numpy as np\n>>> from numpy import linalg as LA\n>>> a = np.array([[1, -2j], [2j, 5]])\n>>> a\narray([[ 1.+0.j, -0.-2.j],\n       [ 0.+2.j,  5.+0.j]])\n>>> eigenvalues, eigenvectors = LA.eigh(a)\n>>> eigenvalues\narray([0.17157288, 5.82842712])\n>>> eigenvectors\narray([[-0.92387953+0.j        , -0.38268343+0.j        ], # may vary\n       [ 0.        +0.38268343j,  0.        -0.92387953j]])\n\n>>> (np.dot(a, eigenvectors[:, 0]) -\n... eigenvalues[0] * eigenvectors[:, 0])  # verify 1st eigenval/vec pair\narray([5.55111512e-17+0.0000000e+00j, 0.00000000e+00+1.2490009e-16j])\n>>> (np.dot(a, eigenvectors[:, 1]) -\n... eigenvalues[1] * eigenvectors[:, 1])  # verify 2nd eigenval/vec pair\narray([0.+0.j, 0.+0.j])\n\n>>> A = np.matrix(a) # what happens if input is a matrix object\n>>> A\nmatrix([[ 1.+0.j, -0.-2.j],\n        [ 0.+2.j,  5.+0.j]])\n>>> eigenvalues, eigenvectors = LA.eigh(A)\n>>> eigenvalues\narray([0.17157288, 5.82842712])\n>>> eigenvectors\nmatrix([[-0.92387953+0.j        , -0.38268343+0.j        ], # may vary\n        [ 0.        +0.38268343j,  0.        -0.92387953j]])\n\n>>> # demonstrate the treatment of the imaginary part of the diagonal\n>>> a = np.array([[5+2j, 9-2j], [0+2j, 2-1j]])\n>>> a\narray([[5.+2.j, 9.-2.j],\n       [0.+2.j, 2.-1.j]])\n>>> # with UPLO='L' this is numerically equivalent to using LA.eig() with:\n>>> b = np.array([[5.+0.j, 0.-2.j], [0.+2.j, 2.-0.j]])\n>>> b\narray([[5.+0.j, 0.-2.j],\n       [0.+2.j, 2.+0.j]])\n>>> wa, va = LA.eigh(a)\n>>> wb, vb = LA.eig(b)\n>>> wa\narray([1., 6.])\n>>> wb\narray([6.+0.j, 1.+0.j])\n>>> va\narray([[-0.4472136 +0.j        , -0.89442719+0.j        ], # may vary\n       [ 0.        +0.89442719j,  0.        -0.4472136j ]])\n>>> vb\narray([[ 0.89442719+0.j       , -0.        +0.4472136j],\n       [-0.        +0.4472136j,  0.89442719+0.j       ]])"
    },
    {
      "name": "svd",
      "docstring": "Singular Value Decomposition.\n\nWhen `a` is a 2D array, and ``full_matrices=False``, then it is\nfactorized as ``u @ np.diag(s) @ vh = (u * s) @ vh``, where\n`u` and the Hermitian transpose of `vh` are 2D arrays with\northonormal columns and `s` is a 1D array of `a`'s singular\nvalues. When `a` is higher-dimensional, SVD is applied in\nstacked mode as explained below.\n\nParameters\n----------\na : (..., M, N) array_like\n    A real or complex array with ``a.ndim >= 2``.\nfull_matrices : bool, optional\n    If True (default), `u` and `vh` have the shapes ``(..., M, M)`` and\n    ``(..., N, N)``, respectively.  Otherwise, the shapes are\n    ``(..., M, K)`` and ``(..., K, N)``, respectively, where\n    ``K = min(M, N)``.\ncompute_uv : bool, optional\n    Whether or not to compute `u` and `vh` in addition to `s`.  True\n    by default.\nhermitian : bool, optional\n    If True, `a` is assumed to be Hermitian (symmetric if real-valued),\n    enabling a more efficient method for finding singular values.\n    Defaults to False.\n\nReturns\n-------\nWhen `compute_uv` is True, the result is a namedtuple with the following\nattribute names:\n\nU : { (..., M, M), (..., M, K) } array\n    Unitary array(s). The first ``a.ndim - 2`` dimensions have the same\n    size as those of the input `a`. The size of the last two dimensions\n    depends on the value of `full_matrices`. Only returned when\n    `compute_uv` is True.\nS : (..., K) array\n    Vector(s) with the singular values, within each vector sorted in\n    descending order. The first ``a.ndim - 2`` dimensions have the same\n    size as those of the input `a`.\nVh : { (..., N, N), (..., K, N) } array\n    Unitary array(s). The first ``a.ndim - 2`` dimensions have the same\n    size as those of the input `a`. The size of the last two dimensions\n    depends on the value of `full_matrices`. Only returned when\n    `compute_uv` is True.\n\nRaises\n------\nLinAlgError\n    If SVD computation does not converge.\n\nSee Also\n--------\nscipy.linalg.svd : Similar function in SciPy.\nscipy.linalg.svdvals : Compute singular values of a matrix.\n\nNotes\n-----\nThe decomposition is performed using LAPACK routine ``_gesdd``.\n\nSVD is usually described for the factorization of a 2D matrix :math:`A`.\nThe higher-dimensional case will be discussed below. In the 2D case, SVD is\nwritten as :math:`A = U S V^H`, where :math:`A = a`, :math:`U= u`,\n:math:`S= \\mathtt{np.diag}(s)` and :math:`V^H = vh`. The 1D array `s`\ncontains the singular values of `a` and `u` and `vh` are unitary. The rows\nof `vh` are the eigenvectors of :math:`A^H A` and the columns of `u` are\nthe eigenvectors of :math:`A A^H`. In both cases the corresponding\n(possibly non-zero) eigenvalues are given by ``s**2``.\n\nIf `a` has more than two dimensions, then broadcasting rules apply, as\nexplained in :ref:`routines.linalg-broadcasting`. This means that SVD is\nworking in \"stacked\" mode: it iterates over all indices of the first\n``a.ndim - 2`` dimensions and for each combination SVD is applied to the\nlast two indices. The matrix `a` can be reconstructed from the\ndecomposition with either ``(u * s[..., None, :]) @ vh`` or\n``u @ (s[..., None] * vh)``. (The ``@`` operator can be replaced by the\nfunction ``np.matmul`` for python versions below 3.5.)\n\nIf `a` is a ``matrix`` object (as opposed to an ``ndarray``), then so are\nall the return values.\n\nExamples\n--------\n>>> import numpy as np\n>>> rng = np.random.default_rng()\n>>> a = rng.normal(size=(9, 6)) + 1j*rng.normal(size=(9, 6))\n>>> b = rng.normal(size=(2, 7, 8, 3)) + 1j*rng.normal(size=(2, 7, 8, 3))\n\n\nReconstruction based on full SVD, 2D case:\n\n>>> U, S, Vh = np.linalg.svd(a, full_matrices=True)\n>>> U.shape, S.shape, Vh.shape\n((9, 9), (6,), (6, 6))\n>>> np.allclose(a, np.dot(U[:, :6] * S, Vh))\nTrue\n>>> smat = np.zeros((9, 6), dtype=complex)\n>>> smat[:6, :6] = np.diag(S)\n>>> np.allclose(a, np.dot(U, np.dot(smat, Vh)))\nTrue\n\nReconstruction based on reduced SVD, 2D case:\n\n>>> U, S, Vh = np.linalg.svd(a, full_matrices=False)\n>>> U.shape, S.shape, Vh.shape\n((9, 6), (6,), (6, 6))\n>>> np.allclose(a, np.dot(U * S, Vh))\nTrue\n>>> smat = np.diag(S)\n>>> np.allclose(a, np.dot(U, np.dot(smat, Vh)))\nTrue\n\nReconstruction based on full SVD, 4D case:\n\n>>> U, S, Vh = np.linalg.svd(b, full_matrices=True)\n>>> U.shape, S.shape, Vh.shape\n((2, 7, 8, 8), (2, 7, 3), (2, 7, 3, 3))\n>>> np.allclose(b, np.matmul(U[..., :3] * S[..., None, :], Vh))\nTrue\n>>> np.allclose(b, np.matmul(U[..., :3], S[..., None] * Vh))\nTrue\n\nReconstruction based on reduced SVD, 4D case:\n\n>>> U, S, Vh = np.linalg.svd(b, full_matrices=False)\n>>> U.shape, S.shape, Vh.shape\n((2, 7, 8, 3), (2, 7, 3), (2, 7, 3, 3))\n>>> np.allclose(b, np.matmul(U * S[..., None, :], Vh))\nTrue\n>>> np.allclose(b, np.matmul(U, S[..., None] * Vh))\nTrue"
    },
    {
      "name": "svdvals",
      "docstring": "Returns the singular values of a matrix (or a stack of matrices) ``x``.\nWhen x is a stack of matrices, the function will compute the singular\nvalues for each matrix in the stack.\n\nThis function is Array API compatible.\n\nCalling ``np.svdvals(x)`` to get singular values is the same as\n``np.svd(x, compute_uv=False, hermitian=False)``.\n\nParameters\n----------\nx : (..., M, N) array_like\n    Input array having shape (..., M, N) and whose last two\n    dimensions form matrices on which to perform singular value\n    decomposition. Should have a floating-point data type.\n\nReturns\n-------\nout : ndarray\n    An array with shape (..., K) that contains the vector(s)\n    of singular values of length K, where K = min(M, N).\n\nSee Also\n--------\nscipy.linalg.svdvals : Compute singular values of a matrix.\n\nExamples\n--------\n\n>>> np.linalg.svdvals([[1, 2, 3, 4, 5],\n...                    [1, 4, 9, 16, 25],\n...                    [1, 8, 27, 64, 125]])\narray([146.68862757,   5.57510612,   0.60393245])\n\nDetermine the rank of a matrix using singular values:\n\n>>> s = np.linalg.svdvals([[1, 2, 3],\n...                        [2, 4, 6],\n...                        [-1, 1, -1]]); s\narray([8.38434191e+00, 1.64402274e+00, 2.31534378e-16])\n>>> np.count_nonzero(s > 1e-10)  # Matrix of rank 2\n2"
    },
    {
      "name": "cond",
      "docstring": "Compute the condition number of a matrix.\n\nThis function is capable of returning the condition number using\none of seven different norms, depending on the value of `p` (see\nParameters below).\n\nParameters\n----------\nx : (..., M, N) array_like\n    The matrix whose condition number is sought.\np : {None, 1, -1, 2, -2, inf, -inf, 'fro'}, optional\n    Order of the norm used in the condition number computation:\n\n    =====  ============================\n    p      norm for matrices\n    =====  ============================\n    None   2-norm, computed directly using the ``SVD``\n    'fro'  Frobenius norm\n    inf    max(sum(abs(x), axis=1))\n    -inf   min(sum(abs(x), axis=1))\n    1      max(sum(abs(x), axis=0))\n    -1     min(sum(abs(x), axis=0))\n    2      2-norm (largest sing. value)\n    -2     smallest singular value\n    =====  ============================\n\n    inf means the `numpy.inf` object, and the Frobenius norm is\n    the root-of-sum-of-squares norm.\n\nReturns\n-------\nc : {float, inf}\n    The condition number of the matrix. May be infinite.\n\nSee Also\n--------\nnumpy.linalg.norm\n\nNotes\n-----\nThe condition number of `x` is defined as the norm of `x` times the\nnorm of the inverse of `x` [1]_; the norm can be the usual L2-norm\n(root-of-sum-of-squares) or one of a number of other matrix norms.\n\nReferences\n----------\n.. [1] G. Strang, *Linear Algebra and Its Applications*, Orlando, FL,\n       Academic Press, Inc., 1980, pg. 285.\n\nExamples\n--------\n>>> import numpy as np\n>>> from numpy import linalg as LA\n>>> a = np.array([[1, 0, -1], [0, 1, 0], [1, 0, 1]])\n>>> a\narray([[ 1,  0, -1],\n       [ 0,  1,  0],\n       [ 1,  0,  1]])\n>>> LA.cond(a)\n1.4142135623730951\n>>> LA.cond(a, 'fro')\n3.1622776601683795\n>>> LA.cond(a, np.inf)\n2.0\n>>> LA.cond(a, -np.inf)\n1.0\n>>> LA.cond(a, 1)\n2.0\n>>> LA.cond(a, -1)\n1.0\n>>> LA.cond(a, 2)\n1.4142135623730951\n>>> LA.cond(a, -2)\n0.70710678118654746 # may vary\n>>> (min(LA.svd(a, compute_uv=False)) *\n... min(LA.svd(LA.inv(a), compute_uv=False)))\n0.70710678118654746 # may vary"
    },
    {
      "name": "matrix_rank",
      "docstring": "Return matrix rank of array using SVD method\n\nRank of the array is the number of singular values of the array that are\ngreater than `tol`.\n\nParameters\n----------\nA : {(M,), (..., M, N)} array_like\n    Input vector or stack of matrices.\ntol : (...) array_like, float, optional\n    Threshold below which SVD values are considered zero. If `tol` is\n    None, and ``S`` is an array with singular values for `M`, and\n    ``eps`` is the epsilon value for datatype of ``S``, then `tol` is\n    set to ``S.max() * max(M, N) * eps``.\nhermitian : bool, optional\n    If True, `A` is assumed to be Hermitian (symmetric if real-valued),\n    enabling a more efficient method for finding singular values.\n    Defaults to False.\nrtol : (...) array_like, float, optional\n    Parameter for the relative tolerance component. Only ``tol`` or\n    ``rtol`` can be set at a time. Defaults to ``max(M, N) * eps``.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nrank : (...) array_like\n    Rank of A.\n\nNotes\n-----\nThe default threshold to detect rank deficiency is a test on the magnitude\nof the singular values of `A`.  By default, we identify singular values\nless than ``S.max() * max(M, N) * eps`` as indicating rank deficiency\n(with the symbols defined above). This is the algorithm MATLAB uses [1].\nIt also appears in *Numerical recipes* in the discussion of SVD solutions\nfor linear least squares [2].\n\nThis default threshold is designed to detect rank deficiency accounting\nfor the numerical errors of the SVD computation. Imagine that there\nis a column in `A` that is an exact (in floating point) linear combination\nof other columns in `A`. Computing the SVD on `A` will not produce\na singular value exactly equal to 0 in general: any difference of\nthe smallest SVD value from 0 will be caused by numerical imprecision\nin the calculation of the SVD. Our threshold for small SVD values takes\nthis numerical imprecision into account, and the default threshold will\ndetect such numerical rank deficiency. The threshold may declare a matrix\n`A` rank deficient even if the linear combination of some columns of `A`\nis not exactly equal to another column of `A` but only numerically very\nclose to another column of `A`.\n\nWe chose our default threshold because it is in wide use. Other thresholds\nare possible.  For example, elsewhere in the 2007 edition of *Numerical\nrecipes* there is an alternative threshold of ``S.max() *\nnp.finfo(A.dtype).eps / 2. * np.sqrt(m + n + 1.)``. The authors describe\nthis threshold as being based on \"expected roundoff error\" (p 71).\n\nThe thresholds above deal with floating point roundoff error in the\ncalculation of the SVD.  However, you may have more information about\nthe sources of error in `A` that would make you consider other tolerance\nvalues to detect *effective* rank deficiency. The most useful measure\nof the tolerance depends on the operations you intend to use on your\nmatrix. For example, if your data come from uncertain measurements with\nuncertainties greater than floating point epsilon, choosing a tolerance\nnear that uncertainty may be preferable. The tolerance may be absolute\nif the uncertainties are absolute rather than relative.\n\nReferences\n----------\n.. [1] MATLAB reference documentation, \"Rank\"\n       https://www.mathworks.com/help/techdoc/ref/rank.html\n.. [2] W. H. Press, S. A. Teukolsky, W. T. Vetterling and B. P. Flannery,\n       \"Numerical Recipes (3rd edition)\", Cambridge University Press, 2007,\n       page 795.\n\nExamples\n--------\n>>> import numpy as np\n>>> from numpy.linalg import matrix_rank\n>>> matrix_rank(np.eye(4)) # Full rank matrix\n4\n>>> I=np.eye(4); I[-1,-1] = 0. # rank deficient matrix\n>>> matrix_rank(I)\n3\n>>> matrix_rank(np.ones((4,))) # 1 dimension - rank 1 unless all 0\n1\n>>> matrix_rank(np.zeros((4,)))\n0"
    },
    {
      "name": "pinv",
      "docstring": "Compute the (Moore-Penrose) pseudo-inverse of a matrix.\n\nCalculate the generalized inverse of a matrix using its\nsingular-value decomposition (SVD) and including all\n*large* singular values.\n\nParameters\n----------\na : (..., M, N) array_like\n    Matrix or stack of matrices to be pseudo-inverted.\nrcond : (...) array_like of float, optional\n    Cutoff for small singular values.\n    Singular values less than or equal to\n    ``rcond * largest_singular_value`` are set to zero.\n    Broadcasts against the stack of matrices. Default: ``1e-15``.\nhermitian : bool, optional\n    If True, `a` is assumed to be Hermitian (symmetric if real-valued),\n    enabling a more efficient method for finding singular values.\n    Defaults to False.\nrtol : (...) array_like of float, optional\n    Same as `rcond`, but it's an Array API compatible parameter name.\n    Only `rcond` or `rtol` can be set at a time. If none of them are\n    provided then NumPy's ``1e-15`` default is used. If ``rtol=None``\n    is passed then the API standard default is used.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nB : (..., N, M) ndarray\n    The pseudo-inverse of `a`. If `a` is a `matrix` instance, then so\n    is `B`.\n\nRaises\n------\nLinAlgError\n    If the SVD computation does not converge.\n\nSee Also\n--------\nscipy.linalg.pinv : Similar function in SciPy.\nscipy.linalg.pinvh : Compute the (Moore-Penrose) pseudo-inverse of a\n                     Hermitian matrix.\n\nNotes\n-----\nThe pseudo-inverse of a matrix A, denoted :math:`A^+`, is\ndefined as: \"the matrix that 'solves' [the least-squares problem]\n:math:`Ax = b`,\" i.e., if :math:`\\bar{x}` is said solution, then\n:math:`A^+` is that matrix such that :math:`\\bar{x} = A^+b`.\n\nIt can be shown that if :math:`Q_1 \\Sigma Q_2^T = A` is the singular\nvalue decomposition of A, then\n:math:`A^+ = Q_2 \\Sigma^+ Q_1^T`, where :math:`Q_{1,2}` are\northogonal matrices, :math:`\\Sigma` is a diagonal matrix consisting\nof A's so-called singular values, (followed, typically, by\nzeros), and then :math:`\\Sigma^+` is simply the diagonal matrix\nconsisting of the reciprocals of A's singular values\n(again, followed by zeros). [1]_\n\nReferences\n----------\n.. [1] G. Strang, *Linear Algebra and Its Applications*, 2nd Ed., Orlando,\n       FL, Academic Press, Inc., 1980, pp. 139-142.\n\nExamples\n--------\nThe following example checks that ``a * a+ * a == a`` and\n``a+ * a * a+ == a+``:\n\n>>> import numpy as np\n>>> rng = np.random.default_rng()\n>>> a = rng.normal(size=(9, 6))\n>>> B = np.linalg.pinv(a)\n>>> np.allclose(a, np.dot(a, np.dot(B, a)))\nTrue\n>>> np.allclose(B, np.dot(B, np.dot(a, B)))\nTrue"
    },
    {
      "name": "slogdet",
      "docstring": "Compute the sign and (natural) logarithm of the determinant of an array.\n\nIf an array has a very small or very large determinant, then a call to\n`det` may overflow or underflow. This routine is more robust against such\nissues, because it computes the logarithm of the determinant rather than\nthe determinant itself.\n\nParameters\n----------\na : (..., M, M) array_like\n    Input array, has to be a square 2-D array.\n\nReturns\n-------\nA namedtuple with the following attributes:\n\nsign : (...) array_like\n    A number representing the sign of the determinant. For a real matrix,\n    this is 1, 0, or -1. For a complex matrix, this is a complex number\n    with absolute value 1 (i.e., it is on the unit circle), or else 0.\nlogabsdet : (...) array_like\n    The natural log of the absolute value of the determinant.\n\nIf the determinant is zero, then `sign` will be 0 and `logabsdet`\nwill be -inf. In all cases, the determinant is equal to\n``sign * np.exp(logabsdet)``.\n\nSee Also\n--------\ndet\n\nNotes\n-----\nBroadcasting rules apply, see the `numpy.linalg` documentation for\ndetails.\n\nThe determinant is computed via LU factorization using the LAPACK\nroutine ``z/dgetrf``.\n\nExamples\n--------\nThe determinant of a 2-D array ``[[a, b], [c, d]]`` is ``ad - bc``:\n\n>>> import numpy as np\n>>> a = np.array([[1, 2], [3, 4]])\n>>> (sign, logabsdet) = np.linalg.slogdet(a)\n>>> (sign, logabsdet)\n(-1, 0.69314718055994529) # may vary\n>>> sign * np.exp(logabsdet)\n-2.0\n\nComputing log-determinants for a stack of matrices:\n\n>>> a = np.array([ [[1, 2], [3, 4]], [[1, 2], [2, 1]], [[1, 3], [3, 1]] ])\n>>> a.shape\n(3, 2, 2)\n>>> sign, logabsdet = np.linalg.slogdet(a)\n>>> (sign, logabsdet)\n(array([-1., -1., -1.]), array([ 0.69314718,  1.09861229,  2.07944154]))\n>>> sign * np.exp(logabsdet)\narray([-2., -3., -8.])\n\nThis routine succeeds where ordinary `det` does not:\n\n>>> np.linalg.det(np.eye(500) * 0.1)\n0.0\n>>> np.linalg.slogdet(np.eye(500) * 0.1)\n(1, -1151.2925464970228)"
    },
    {
      "name": "det",
      "docstring": "Compute the determinant of an array.\n\nParameters\n----------\na : (..., M, M) array_like\n    Input array to compute determinants for.\n\nReturns\n-------\ndet : (...) array_like\n    Determinant of `a`.\n\nSee Also\n--------\nslogdet : Another way to represent the determinant, more suitable\n  for large matrices where underflow/overflow may occur.\nscipy.linalg.det : Similar function in SciPy.\n\nNotes\n-----\nBroadcasting rules apply, see the `numpy.linalg` documentation for\ndetails.\n\nThe determinant is computed via LU factorization using the LAPACK\nroutine ``z/dgetrf``.\n\nExamples\n--------\nThe determinant of a 2-D array [[a, b], [c, d]] is ad - bc:\n\n>>> import numpy as np\n>>> a = np.array([[1, 2], [3, 4]])\n>>> np.linalg.det(a)\n-2.0 # may vary\n\nComputing determinants for a stack of matrices:\n\n>>> a = np.array([ [[1, 2], [3, 4]], [[1, 2], [2, 1]], [[1, 3], [3, 1]] ])\n>>> a.shape\n(3, 2, 2)\n>>> np.linalg.det(a)\narray([-2., -3., -8.])"
    },
    {
      "name": "lstsq",
      "docstring": "Return the least-squares solution to a linear matrix equation.\n\nComputes the vector `x` that approximately solves the equation\n``a @ x = b``. The equation may be under-, well-, or over-determined\n(i.e., the number of linearly independent rows of `a` can be less than,\nequal to, or greater than its number of linearly independent columns).\nIf `a` is square and of full rank, then `x` (but for round-off error)\nis the \"exact\" solution of the equation. Else, `x` minimizes the\nEuclidean 2-norm :math:`||b - ax||`. If there are multiple minimizing\nsolutions, the one with the smallest 2-norm :math:`||x||` is returned.\n\nParameters\n----------\na : (M, N) array_like\n    \"Coefficient\" matrix.\nb : {(M,), (M, K)} array_like\n    Ordinate or \"dependent variable\" values. If `b` is two-dimensional,\n    the least-squares solution is calculated for each of the `K` columns\n    of `b`.\nrcond : float, optional\n    Cut-off ratio for small singular values of `a`.\n    For the purposes of rank determination, singular values are treated\n    as zero if they are smaller than `rcond` times the largest singular\n    value of `a`.\n    The default uses the machine precision times ``max(M, N)``.  Passing\n    ``-1`` will use machine precision.\n\n    .. versionchanged:: 2.0\n        Previously, the default was ``-1``, but a warning was given that\n        this would change.\n\nReturns\n-------\nx : {(N,), (N, K)} ndarray\n    Least-squares solution. If `b` is two-dimensional,\n    the solutions are in the `K` columns of `x`.\nresiduals : {(1,), (K,), (0,)} ndarray\n    Sums of squared residuals: Squared Euclidean 2-norm for each column in\n    ``b - a @ x``.\n    If the rank of `a` is < N or M <= N, this is an empty array.\n    If `b` is 1-dimensional, this is a (1,) shape array.\n    Otherwise the shape is (K,).\nrank : int\n    Rank of matrix `a`.\ns : (min(M, N),) ndarray\n    Singular values of `a`.\n\nRaises\n------\nLinAlgError\n    If computation does not converge.\n\nSee Also\n--------\nscipy.linalg.lstsq : Similar function in SciPy.\n\nNotes\n-----\nIf `b` is a matrix, then all array results are returned as matrices.\n\nExamples\n--------\nFit a line, ``y = mx + c``, through some noisy data-points:\n\n>>> import numpy as np\n>>> x = np.array([0, 1, 2, 3])\n>>> y = np.array([-1, 0.2, 0.9, 2.1])\n\nBy examining the coefficients, we see that the line should have a\ngradient of roughly 1 and cut the y-axis at, more or less, -1.\n\nWe can rewrite the line equation as ``y = Ap``, where ``A = [[x 1]]``\nand ``p = [[m], [c]]``.  Now use `lstsq` to solve for `p`:\n\n>>> A = np.vstack([x, np.ones(len(x))]).T\n>>> A\narray([[ 0.,  1.],\n       [ 1.,  1.],\n       [ 2.,  1.],\n       [ 3.,  1.]])\n\n>>> m, c = np.linalg.lstsq(A, y)[0]\n>>> m, c\n(1.0 -0.95) # may vary\n\nPlot the data along with the fitted line:\n\n>>> import matplotlib.pyplot as plt\n>>> _ = plt.plot(x, y, 'o', label='Original data', markersize=10)\n>>> _ = plt.plot(x, m*x + c, 'r', label='Fitted line')\n>>> _ = plt.legend()\n>>> plt.show()"
    },
    {
      "name": "norm",
      "docstring": "Matrix or vector norm.\n\nThis function is able to return one of eight different matrix norms,\nor one of an infinite number of vector norms (described below), depending\non the value of the ``ord`` parameter.\n\nParameters\n----------\nx : array_like\n    Input array.  If `axis` is None, `x` must be 1-D or 2-D, unless `ord`\n    is None. If both `axis` and `ord` are None, the 2-norm of\n    ``x.ravel`` will be returned.\nord : {int, float, inf, -inf, 'fro', 'nuc'}, optional\n    Order of the norm (see table under ``Notes`` for what values are\n    supported for matrices and vectors respectively). inf means numpy's\n    `inf` object. The default is None.\naxis : {None, int, 2-tuple of ints}, optional.\n    If `axis` is an integer, it specifies the axis of `x` along which to\n    compute the vector norms.  If `axis` is a 2-tuple, it specifies the\n    axes that hold 2-D matrices, and the matrix norms of these matrices\n    are computed.  If `axis` is None then either a vector norm (when `x`\n    is 1-D) or a matrix norm (when `x` is 2-D) is returned. The default\n    is None.\n\nkeepdims : bool, optional\n    If this is set to True, the axes which are normed over are left in the\n    result as dimensions with size one.  With this option the result will\n    broadcast correctly against the original `x`.\n\nReturns\n-------\nn : float or ndarray\n    Norm of the matrix or vector(s).\n\nSee Also\n--------\nscipy.linalg.norm : Similar function in SciPy.\n\nNotes\n-----\nFor values of ``ord < 1``, the result is, strictly speaking, not a\nmathematical 'norm', but it may still be useful for various numerical\npurposes.\n\nThe following norms can be calculated:\n\n=====  ============================  ==========================\nord    norm for matrices             norm for vectors\n=====  ============================  ==========================\nNone   Frobenius norm                2-norm\n'fro'  Frobenius norm                --\n'nuc'  nuclear norm                  --\ninf    max(sum(abs(x), axis=1))      max(abs(x))\n-inf   min(sum(abs(x), axis=1))      min(abs(x))\n0      --                            sum(x != 0)\n1      max(sum(abs(x), axis=0))      as below\n-1     min(sum(abs(x), axis=0))      as below\n2      2-norm (largest sing. value)  as below\n-2     smallest singular value       as below\nother  --                            sum(abs(x)**ord)**(1./ord)\n=====  ============================  ==========================\n\nThe Frobenius norm is given by [1]_:\n\n:math:`||A||_F = [\\sum_{i,j} abs(a_{i,j})^2]^{1/2}`\n\nThe nuclear norm is the sum of the singular values.\n\nBoth the Frobenius and nuclear norm orders are only defined for\nmatrices and raise a ValueError when ``x.ndim != 2``.\n\nReferences\n----------\n.. [1] G. H. Golub and C. F. Van Loan, *Matrix Computations*,\n       Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15\n\nExamples\n--------\n\n>>> import numpy as np\n>>> from numpy import linalg as LA\n>>> a = np.arange(9) - 4\n>>> a\narray([-4, -3, -2, ...,  2,  3,  4])\n>>> b = a.reshape((3, 3))\n>>> b\narray([[-4, -3, -2],\n       [-1,  0,  1],\n       [ 2,  3,  4]])\n\n>>> LA.norm(a)\n7.745966692414834\n>>> LA.norm(b)\n7.745966692414834\n>>> LA.norm(b, 'fro')\n7.745966692414834\n>>> LA.norm(a, np.inf)\n4.0\n>>> LA.norm(b, np.inf)\n9.0\n>>> LA.norm(a, -np.inf)\n0.0\n>>> LA.norm(b, -np.inf)\n2.0\n\n>>> LA.norm(a, 1)\n20.0\n>>> LA.norm(b, 1)\n7.0\n>>> LA.norm(a, -1)\n-4.6566128774142013e-010\n>>> LA.norm(b, -1)\n6.0\n>>> LA.norm(a, 2)\n7.745966692414834\n>>> LA.norm(b, 2)\n7.3484692283495345\n\n>>> LA.norm(a, -2)\n0.0\n>>> LA.norm(b, -2)\n1.8570331885190563e-016 # may vary\n>>> LA.norm(a, 3)\n5.8480354764257312 # may vary\n>>> LA.norm(a, -3)\n0.0\n\nUsing the `axis` argument to compute vector norms:\n\n>>> c = np.array([[ 1, 2, 3],\n...               [-1, 1, 4]])\n>>> LA.norm(c, axis=0)\narray([ 1.41421356,  2.23606798,  5.        ])\n>>> LA.norm(c, axis=1)\narray([ 3.74165739,  4.24264069])\n>>> LA.norm(c, ord=1, axis=1)\narray([ 6.,  6.])\n\nUsing the `axis` argument to compute matrix norms:\n\n>>> m = np.arange(8).reshape(2,2,2)\n>>> LA.norm(m, axis=(1,2))\narray([  3.74165739,  11.22497216])\n>>> LA.norm(m[0, :, :]), LA.norm(m[1, :, :])\n(3.7416573867739413, 11.224972160321824)"
    },
    {
      "name": "multi_dot",
      "docstring": "Compute the dot product of two or more arrays in a single function call,\nwhile automatically selecting the fastest evaluation order.\n\n`multi_dot` chains `numpy.dot` and uses optimal parenthesization\nof the matrices [1]_ [2]_. Depending on the shapes of the matrices,\nthis can speed up the multiplication a lot.\n\nIf the first argument is 1-D it is treated as a row vector.\nIf the last argument is 1-D it is treated as a column vector.\nThe other arguments must be 2-D.\n\nThink of `multi_dot` as::\n\n    def multi_dot(arrays): return functools.reduce(np.dot, arrays)\n\n\nParameters\n----------\narrays : sequence of array_like\n    If the first argument is 1-D it is treated as row vector.\n    If the last argument is 1-D it is treated as column vector.\n    The other arguments must be 2-D.\nout : ndarray, optional\n    Output argument. This must have the exact kind that would be returned\n    if it was not used. In particular, it must have the right type, must be\n    C-contiguous, and its dtype must be the dtype that would be returned\n    for `dot(a, b)`. This is a performance feature. Therefore, if these\n    conditions are not met, an exception is raised, instead of attempting\n    to be flexible.\n\nReturns\n-------\noutput : ndarray\n    Returns the dot product of the supplied arrays.\n\nSee Also\n--------\nnumpy.dot : dot multiplication with two arguments.\n\nReferences\n----------\n\n.. [1] Cormen, \"Introduction to Algorithms\", Chapter 15.2, p. 370-378\n.. [2] https://en.wikipedia.org/wiki/Matrix_chain_multiplication\n\nExamples\n--------\n`multi_dot` allows you to write::\n\n>>> import numpy as np\n>>> from numpy.linalg import multi_dot\n>>> # Prepare some data\n>>> A = np.random.random((10000, 100))\n>>> B = np.random.random((100, 1000))\n>>> C = np.random.random((1000, 5))\n>>> D = np.random.random((5, 333))\n>>> # the actual dot multiplication\n>>> _ = multi_dot([A, B, C, D])\n\ninstead of::\n\n>>> _ = np.dot(np.dot(np.dot(A, B), C), D)\n>>> # or\n>>> _ = A.dot(B).dot(C).dot(D)\n\nNotes\n-----\nThe cost for a matrix multiplication can be calculated with the\nfollowing function::\n\n    def cost(A, B):\n        return A.shape[0] * A.shape[1] * B.shape[1]\n\nAssume we have three matrices\n:math:`A_{10x100}, B_{100x5}, C_{5x50}`.\n\nThe costs for the two different parenthesizations are as follows::\n\n    cost((AB)C) = 10*100*5 + 10*5*50   = 5000 + 2500   = 7500\n    cost(A(BC)) = 10*100*50 + 100*5*50 = 50000 + 25000 = 75000"
    },
    {
      "name": "diagonal",
      "docstring": "Returns specified diagonals of a matrix (or a stack of matrices) ``x``.\n\nThis function is Array API compatible, contrary to\n:py:func:`numpy.diagonal`, the matrix is assumed\nto be defined by the last two dimensions.\n\nParameters\n----------\nx : (...,M,N) array_like\n    Input array having shape (..., M, N) and whose innermost two\n    dimensions form MxN matrices.\noffset : int, optional\n    Offset specifying the off-diagonal relative to the main diagonal,\n    where::\n\n        * offset = 0: the main diagonal.\n        * offset > 0: off-diagonal above the main diagonal.\n        * offset < 0: off-diagonal below the main diagonal.\n\nReturns\n-------\nout : (...,min(N,M)) ndarray\n    An array containing the diagonals and whose shape is determined by\n    removing the last two dimensions and appending a dimension equal to\n    the size of the resulting diagonals. The returned array must have\n    the same data type as ``x``.\n\nSee Also\n--------\nnumpy.diagonal\n\nExamples\n--------\n>>> a = np.arange(4).reshape(2, 2); a\narray([[0, 1],\n       [2, 3]])\n>>> np.linalg.diagonal(a)\narray([0, 3])\n\nA 3-D example:\n\n>>> a = np.arange(8).reshape(2, 2, 2); a\narray([[[0, 1],\n        [2, 3]],\n       [[4, 5],\n        [6, 7]]])\n>>> np.linalg.diagonal(a)\narray([[0, 3],\n       [4, 7]])\n\nDiagonals adjacent to the main diagonal can be obtained by using the\n`offset` argument:\n\n>>> a = np.arange(9).reshape(3, 3)\n>>> a\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> np.linalg.diagonal(a, offset=1)  # First superdiagonal\narray([1, 5])\n>>> np.linalg.diagonal(a, offset=2)  # Second superdiagonal\narray([2])\n>>> np.linalg.diagonal(a, offset=-1)  # First subdiagonal\narray([3, 7])\n>>> np.linalg.diagonal(a, offset=-2)  # Second subdiagonal\narray([6])\n\nThe anti-diagonal can be obtained by reversing the order of elements\nusing either `numpy.flipud` or `numpy.fliplr`.\n\n>>> a = np.arange(9).reshape(3, 3)\n>>> a\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> np.linalg.diagonal(np.fliplr(a))  # Horizontal flip\narray([2, 4, 6])\n>>> np.linalg.diagonal(np.flipud(a))  # Vertical flip\narray([6, 4, 2])\n\nNote that the order in which the diagonal is retrieved varies depending\non the flip function."
    },
    {
      "name": "trace",
      "docstring": "Returns the sum along the specified diagonals of a matrix\n(or a stack of matrices) ``x``.\n\nThis function is Array API compatible, contrary to\n:py:func:`numpy.trace`.\n\nParameters\n----------\nx : (...,M,N) array_like\n    Input array having shape (..., M, N) and whose innermost two\n    dimensions form MxN matrices.\noffset : int, optional\n    Offset specifying the off-diagonal relative to the main diagonal,\n    where::\n\n        * offset = 0: the main diagonal.\n        * offset > 0: off-diagonal above the main diagonal.\n        * offset < 0: off-diagonal below the main diagonal.\n\ndtype : dtype, optional\n    Data type of the returned array.\n\nReturns\n-------\nout : ndarray\n    An array containing the traces and whose shape is determined by\n    removing the last two dimensions and storing the traces in the last\n    array dimension. For example, if x has rank k and shape:\n    (I, J, K, ..., L, M, N), then an output array has rank k-2 and shape:\n    (I, J, K, ..., L) where::\n\n        out[i, j, k, ..., l] = trace(a[i, j, k, ..., l, :, :])\n\n    The returned array must have a data type as described by the dtype\n    parameter above.\n\nSee Also\n--------\nnumpy.trace\n\nExamples\n--------\n>>> np.linalg.trace(np.eye(3))\n3.0\n>>> a = np.arange(8).reshape((2, 2, 2))\n>>> np.linalg.trace(a)\narray([3, 11])\n\nTrace is computed with the last two axes as the 2-d sub-arrays.\nThis behavior differs from :py:func:`numpy.trace` which uses the first two\naxes by default.\n\n>>> a = np.arange(24).reshape((3, 2, 2, 2))\n>>> np.linalg.trace(a).shape\n(3, 2)\n\nTraces adjacent to the main diagonal can be obtained by using the\n`offset` argument:\n\n>>> a = np.arange(9).reshape((3, 3)); a\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n>>> np.linalg.trace(a, offset=1)  # First superdiagonal\n6\n>>> np.linalg.trace(a, offset=2)  # Second superdiagonal\n2\n>>> np.linalg.trace(a, offset=-1)  # First subdiagonal\n10\n>>> np.linalg.trace(a, offset=-2)  # Second subdiagonal\n6"
    },
    {
      "name": "cross",
      "docstring": "Returns the cross product of 3-element vectors.\n\nIf ``x1`` and/or ``x2`` are multi-dimensional arrays, then\nthe cross-product of each pair of corresponding 3-element vectors\nis independently computed.\n\nThis function is Array API compatible, contrary to\n:func:`numpy.cross`.\n\nParameters\n----------\nx1 : array_like\n    The first input array.\nx2 : array_like\n    The second input array. Must be compatible with ``x1`` for all\n    non-compute axes. The size of the axis over which to compute\n    the cross-product must be the same size as the respective axis\n    in ``x1``.\naxis : int, optional\n    The axis (dimension) of ``x1`` and ``x2`` containing the vectors for\n    which to compute the cross-product. Default: ``-1``.\n\nReturns\n-------\nout : ndarray\n    An array containing the cross products.\n\nSee Also\n--------\nnumpy.cross\n\nExamples\n--------\nVector cross-product.\n\n>>> x = np.array([1, 2, 3])\n>>> y = np.array([4, 5, 6])\n>>> np.linalg.cross(x, y)\narray([-3,  6, -3])\n\nMultiple vector cross-products. Note that the direction of the cross\nproduct vector is defined by the *right-hand rule*.\n\n>>> x = np.array([[1,2,3], [4,5,6]])\n>>> y = np.array([[4,5,6], [1,2,3]])\n>>> np.linalg.cross(x, y)\narray([[-3,  6, -3],\n       [ 3, -6,  3]])\n\n>>> x = np.array([[1, 2], [3, 4], [5, 6]])\n>>> y = np.array([[4, 5], [6, 1], [2, 3]])\n>>> np.linalg.cross(x, y, axis=0)\narray([[-24,  6],\n       [ 18, 24],\n       [-6,  -18]])"
    },
    {
      "name": "matmul",
      "docstring": "Computes the matrix product.\n\nThis function is Array API compatible, contrary to\n:func:`numpy.matmul`.\n\nParameters\n----------\nx1 : array_like\n    The first input array.\nx2 : array_like\n    The second input array.\n\nReturns\n-------\nout : ndarray\n    The matrix product of the inputs.\n    This is a scalar only when both ``x1``, ``x2`` are 1-d vectors.\n\nRaises\n------\nValueError\n    If the last dimension of ``x1`` is not the same size as\n    the second-to-last dimension of ``x2``.\n\n    If a scalar value is passed in.\n\nSee Also\n--------\nnumpy.matmul\n\nExamples\n--------\nFor 2-D arrays it is the matrix product:\n\n>>> a = np.array([[1, 0],\n...               [0, 1]])\n>>> b = np.array([[4, 1],\n...               [2, 2]])\n>>> np.linalg.matmul(a, b)\narray([[4, 1],\n       [2, 2]])\n\nFor 2-D mixed with 1-D, the result is the usual.\n\n>>> a = np.array([[1, 0],\n...               [0, 1]])\n>>> b = np.array([1, 2])\n>>> np.linalg.matmul(a, b)\narray([1, 2])\n>>> np.linalg.matmul(b, a)\narray([1, 2])\n\n\nBroadcasting is conventional for stacks of arrays\n\n>>> a = np.arange(2 * 2 * 4).reshape((2, 2, 4))\n>>> b = np.arange(2 * 2 * 4).reshape((2, 4, 2))\n>>> np.linalg.matmul(a,b).shape\n(2, 2, 2)\n>>> np.linalg.matmul(a, b)[0, 1, 1]\n98\n>>> sum(a[0, 1, :] * b[0 , :, 1])\n98\n\nVector, vector returns the scalar inner product, but neither argument\nis complex-conjugated:\n\n>>> np.linalg.matmul([2j, 3j], [2j, 3j])\n(-13+0j)\n\nScalar multiplication raises an error.\n\n>>> np.linalg.matmul([1,2], 3)\nTraceback (most recent call last):\n...\nValueError: matmul: Input operand 1 does not have enough dimensions ..."
    },
    {
      "name": "tensordot",
      "docstring": null
    },
    {
      "name": "matrix_transpose",
      "docstring": null
    },
    {
      "name": "matrix_norm",
      "docstring": "Computes the matrix norm of a matrix (or a stack of matrices) ``x``.\n\nThis function is Array API compatible.\n\nParameters\n----------\nx : array_like\n    Input array having shape (..., M, N) and whose two innermost\n    dimensions form ``MxN`` matrices.\nkeepdims : bool, optional\n    If this is set to True, the axes which are normed over are left in\n    the result as dimensions with size one. Default: False.\nord : {1, -1, 2, -2, inf, -inf, 'fro', 'nuc'}, optional\n    The order of the norm. For details see the table under ``Notes``\n    in `numpy.linalg.norm`.\n\nSee Also\n--------\nnumpy.linalg.norm : Generic norm function\n\nExamples\n--------\n>>> from numpy import linalg as LA\n>>> a = np.arange(9) - 4\n>>> a\narray([-4, -3, -2, ...,  2,  3,  4])\n>>> b = a.reshape((3, 3))\n>>> b\narray([[-4, -3, -2],\n       [-1,  0,  1],\n       [ 2,  3,  4]])\n\n>>> LA.matrix_norm(b)\n7.745966692414834\n>>> LA.matrix_norm(b, ord='fro')\n7.745966692414834\n>>> LA.matrix_norm(b, ord=np.inf)\n9.0\n>>> LA.matrix_norm(b, ord=-np.inf)\n2.0\n\n>>> LA.matrix_norm(b, ord=1)\n7.0\n>>> LA.matrix_norm(b, ord=-1)\n6.0\n>>> LA.matrix_norm(b, ord=2)\n7.3484692283495345\n>>> LA.matrix_norm(b, ord=-2)\n1.8570331885190563e-016 # may vary"
    },
    {
      "name": "vector_norm",
      "docstring": "Computes the vector norm of a vector (or batch of vectors) ``x``.\n\nThis function is Array API compatible.\n\nParameters\n----------\nx : array_like\n    Input array.\naxis : {None, int, 2-tuple of ints}, optional\n    If an integer, ``axis`` specifies the axis (dimension) along which\n    to compute vector norms. If an n-tuple, ``axis`` specifies the axes\n    (dimensions) along which to compute batched vector norms. If ``None``,\n    the vector norm must be computed over all array values (i.e.,\n    equivalent to computing the vector norm of a flattened array).\n    Default: ``None``.\nkeepdims : bool, optional\n    If this is set to True, the axes which are normed over are left in\n    the result as dimensions with size one. Default: False.\nord : {int, float, inf, -inf}, optional\n    The order of the norm. For details see the table under ``Notes``\n    in `numpy.linalg.norm`.\n\nSee Also\n--------\nnumpy.linalg.norm : Generic norm function\n\nExamples\n--------\n>>> from numpy import linalg as LA\n>>> a = np.arange(9) + 1\n>>> a\narray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> b = a.reshape((3, 3))\n>>> b\narray([[1, 2, 3],\n       [4, 5, 6],\n       [7, 8, 9]])\n\n>>> LA.vector_norm(b)\n16.881943016134134\n>>> LA.vector_norm(b, ord=np.inf)\n9.0\n>>> LA.vector_norm(b, ord=-np.inf)\n1.0\n\n>>> LA.vector_norm(b, ord=0)\n9.0\n>>> LA.vector_norm(b, ord=1)\n45.0\n>>> LA.vector_norm(b, ord=-1)\n0.3534857623790153\n>>> LA.vector_norm(b, ord=2)\n16.881943016134134\n>>> LA.vector_norm(b, ord=-2)\n0.8058837395885292"
    },
    {
      "name": "vecdot",
      "docstring": "Computes the vector dot product.\n\nThis function is restricted to arguments compatible with the Array API,\ncontrary to :func:`numpy.vecdot`.\n\nLet :math:`\\mathbf{a}` be a vector in ``x1`` and :math:`\\mathbf{b}` be\na corresponding vector in ``x2``. The dot product is defined as:\n\n.. math::\n   \\mathbf{a} \\cdot \\mathbf{b} = \\sum_{i=0}^{n-1} \\overline{a_i}b_i\n\nover the dimension specified by ``axis`` and where :math:`\\overline{a_i}`\ndenotes the complex conjugate if :math:`a_i` is complex and the identity\notherwise.\n\nParameters\n----------\nx1 : array_like\n    First input array.\nx2 : array_like\n    Second input array.\naxis : int, optional\n    Axis over which to compute the dot product. Default: ``-1``.\n\nReturns\n-------\noutput : ndarray\n    The vector dot product of the input.\n\nSee Also\n--------\nnumpy.vecdot\n\nExamples\n--------\nGet the projected size along a given normal for an array of vectors.\n\n>>> v = np.array([[0., 5., 0.], [0., 0., 10.], [0., 6., 8.]])\n>>> n = np.array([0., 0.6, 0.8])\n>>> np.linalg.vecdot(v, n)\narray([ 3.,  8., 10.])"
    }
  ],
  "innovations": [
    {
      "type": "potential_innovation",
      "marker": "optimization",
      "context": "\n    \"\"\"\n    n = len(arrays)\n    # optimization only makes sense for len(arrays) > 2\n    if n < 2:\n        raise ValueError(\"Expecting at least two arrays.\")\n    elif n == 2:"
    }
  ]
}