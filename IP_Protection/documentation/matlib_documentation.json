{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\matlib.py",
  "classes": [],
  "functions": [
    {
      "name": "empty",
      "docstring": "Return a new matrix of given shape and type, without initializing entries.\n\nParameters\n----------\nshape : int or tuple of int\n    Shape of the empty matrix.\ndtype : data-type, optional\n    Desired output data-type.\norder : {'C', 'F'}, optional\n    Whether to store multi-dimensional data in row-major\n    (C-style) or column-major (Fortran-style) order in\n    memory.\n\nSee Also\n--------\nnumpy.empty : Equivalent array function.\nmatlib.zeros : Return a matrix of zeros.\nmatlib.ones : Return a matrix of ones.\n\nNotes\n-----\nUnlike other matrix creation functions (e.g. `matlib.zeros`,\n`matlib.ones`), `matlib.empty` does not initialize the values of the\nmatrix, and may therefore be marginally faster. However, the values\nstored in the newly allocated matrix are arbitrary. For reproducible\nbehavior, be sure to set each element of the matrix before reading.\n\nExamples\n--------\n>>> import numpy.matlib\n>>> np.matlib.empty((2, 2))    # filled with random data\nmatrix([[  6.76425276e-320,   9.79033856e-307], # random\n        [  7.39337286e-309,   3.22135945e-309]])\n>>> np.matlib.empty((2, 2), dtype=int)\nmatrix([[ 6600475,        0], # random\n        [ 6586976, 22740995]])"
    },
    {
      "name": "ones",
      "docstring": "Matrix of ones.\n\nReturn a matrix of given shape and type, filled with ones.\n\nParameters\n----------\nshape : {sequence of ints, int}\n    Shape of the matrix\ndtype : data-type, optional\n    The desired data-type for the matrix, default is np.float64.\norder : {'C', 'F'}, optional\n    Whether to store matrix in C- or Fortran-contiguous order,\n    default is 'C'.\n\nReturns\n-------\nout : matrix\n    Matrix of ones of given shape, dtype, and order.\n\nSee Also\n--------\nones : Array of ones.\nmatlib.zeros : Zero matrix.\n\nNotes\n-----\nIf `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,\n`out` becomes a single row matrix of shape ``(1,N)``.\n\nExamples\n--------\n>>> np.matlib.ones((2,3))\nmatrix([[1.,  1.,  1.],\n        [1.,  1.,  1.]])\n\n>>> np.matlib.ones(2)\nmatrix([[1.,  1.]])"
    },
    {
      "name": "zeros",
      "docstring": "Return a matrix of given shape and type, filled with zeros.\n\nParameters\n----------\nshape : int or sequence of ints\n    Shape of the matrix\ndtype : data-type, optional\n    The desired data-type for the matrix, default is float.\norder : {'C', 'F'}, optional\n    Whether to store the result in C- or Fortran-contiguous order,\n    default is 'C'.\n\nReturns\n-------\nout : matrix\n    Zero matrix of given shape, dtype, and order.\n\nSee Also\n--------\nnumpy.zeros : Equivalent array function.\nmatlib.ones : Return a matrix of ones.\n\nNotes\n-----\nIf `shape` has length one i.e. ``(N,)``, or is a scalar ``N``,\n`out` becomes a single row matrix of shape ``(1,N)``.\n\nExamples\n--------\n>>> import numpy.matlib\n>>> np.matlib.zeros((2, 3))\nmatrix([[0.,  0.,  0.],\n        [0.,  0.,  0.]])\n\n>>> np.matlib.zeros(2)\nmatrix([[0.,  0.]])"
    },
    {
      "name": "identity",
      "docstring": "Returns the square identity matrix of given size.\n\nParameters\n----------\nn : int\n    Size of the returned identity matrix.\ndtype : data-type, optional\n    Data-type of the output. Defaults to ``float``.\n\nReturns\n-------\nout : matrix\n    `n` x `n` matrix with its main diagonal set to one,\n    and all other elements zero.\n\nSee Also\n--------\nnumpy.identity : Equivalent array function.\nmatlib.eye : More general matrix identity function.\n\nExamples\n--------\n>>> import numpy.matlib\n>>> np.matlib.identity(3, dtype=int)\nmatrix([[1, 0, 0],\n        [0, 1, 0],\n        [0, 0, 1]])"
    },
    {
      "name": "eye",
      "docstring": "Return a matrix with ones on the diagonal and zeros elsewhere.\n\nParameters\n----------\nn : int\n    Number of rows in the output.\nM : int, optional\n    Number of columns in the output, defaults to `n`.\nk : int, optional\n    Index of the diagonal: 0 refers to the main diagonal,\n    a positive value refers to an upper diagonal,\n    and a negative value to a lower diagonal.\ndtype : dtype, optional\n    Data-type of the returned matrix.\norder : {'C', 'F'}, optional\n    Whether the output should be stored in row-major (C-style) or\n    column-major (Fortran-style) order in memory.\n\nReturns\n-------\nI : matrix\n    A `n` x `M` matrix where all elements are equal to zero,\n    except for the `k`-th diagonal, whose values are equal to one.\n\nSee Also\n--------\nnumpy.eye : Equivalent array function.\nidentity : Square identity matrix.\n\nExamples\n--------\n>>> import numpy.matlib\n>>> np.matlib.eye(3, k=1, dtype=float)\nmatrix([[0.,  1.,  0.],\n        [0.,  0.,  1.],\n        [0.,  0.,  0.]])"
    },
    {
      "name": "rand",
      "docstring": "Return a matrix of random values with given shape.\n\nCreate a matrix of the given shape and propagate it with\nrandom samples from a uniform distribution over ``[0, 1)``.\n\nParameters\n----------\n\\*args : Arguments\n    Shape of the output.\n    If given as N integers, each integer specifies the size of one\n    dimension.\n    If given as a tuple, this tuple gives the complete shape.\n\nReturns\n-------\nout : ndarray\n    The matrix of random values with shape given by `\\*args`.\n\nSee Also\n--------\nrandn, numpy.random.RandomState.rand\n\nExamples\n--------\n>>> np.random.seed(123)\n>>> import numpy.matlib\n>>> np.matlib.rand(2, 3)\nmatrix([[0.69646919, 0.28613933, 0.22685145],\n        [0.55131477, 0.71946897, 0.42310646]])\n>>> np.matlib.rand((2, 3))\nmatrix([[0.9807642 , 0.68482974, 0.4809319 ],\n        [0.39211752, 0.34317802, 0.72904971]])\n\nIf the first argument is a tuple, other arguments are ignored:\n\n>>> np.matlib.rand((2, 3), 4)\nmatrix([[0.43857224, 0.0596779 , 0.39804426],\n        [0.73799541, 0.18249173, 0.17545176]])"
    },
    {
      "name": "randn",
      "docstring": "Return a random matrix with data from the \"standard normal\" distribution.\n\n`randn` generates a matrix filled with random floats sampled from a\nunivariate \"normal\" (Gaussian) distribution of mean 0 and variance 1.\n\nParameters\n----------\n\\*args : Arguments\n    Shape of the output.\n    If given as N integers, each integer specifies the size of one\n    dimension. If given as a tuple, this tuple gives the complete shape.\n\nReturns\n-------\nZ : matrix of floats\n    A matrix of floating-point samples drawn from the standard normal\n    distribution.\n\nSee Also\n--------\nrand, numpy.random.RandomState.randn\n\nNotes\n-----\nFor random samples from the normal distribution with mean ``mu`` and\nstandard deviation ``sigma``, use::\n\n    sigma * np.matlib.randn(...) + mu\n\nExamples\n--------\n>>> np.random.seed(123)\n>>> import numpy.matlib\n>>> np.matlib.randn(1)\nmatrix([[-1.0856306]])\n>>> np.matlib.randn(1, 2, 3)\nmatrix([[ 0.99734545,  0.2829785 , -1.50629471],\n        [-0.57860025,  1.65143654, -2.42667924]])\n\nTwo-by-four matrix of samples from the normal distribution with\nmean 3 and standard deviation 2.5:\n\n>>> 2.5 * np.matlib.randn((2, 4)) + 3\nmatrix([[1.92771843, 6.16484065, 0.83314899, 1.30278462],\n        [2.76322758, 6.72847407, 1.40274501, 1.8900451 ]])"
    },
    {
      "name": "repmat",
      "docstring": "Repeat a 0-D to 2-D array or matrix MxN times.\n\nParameters\n----------\na : array_like\n    The array or matrix to be repeated.\nm, n : int\n    The number of times `a` is repeated along the first and second axes.\n\nReturns\n-------\nout : ndarray\n    The result of repeating `a`.\n\nExamples\n--------\n>>> import numpy.matlib\n>>> a0 = np.array(1)\n>>> np.matlib.repmat(a0, 2, 3)\narray([[1, 1, 1],\n       [1, 1, 1]])\n\n>>> a1 = np.arange(4)\n>>> np.matlib.repmat(a1, 2, 2)\narray([[0, 1, 2, 3, 0, 1, 2, 3],\n       [0, 1, 2, 3, 0, 1, 2, 3]])\n\n>>> a2 = np.asmatrix(np.arange(6).reshape(2, 3))\n>>> np.matlib.repmat(a2, 2, 3)\nmatrix([[0, 1, 2, 0, 1, 2, 0, 1, 2],\n        [3, 4, 5, 3, 4, 5, 3, 4, 5],\n        [0, 1, 2, 0, 1, 2, 0, 1, 2],\n        [3, 4, 5, 3, 4, 5, 3, 4, 5]])"
    }
  ],
  "innovations": []
}