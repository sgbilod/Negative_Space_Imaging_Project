{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\axis.py",
  "classes": [
    {
      "name": "Tick",
      "docstring": "Abstract base class for the axis ticks, grid lines and labels.\n\nTicks mark a position on an Axis. They contain two lines as markers and\ntwo labels; one each for the bottom and top positions (in case of an\n`.XAxis`) or for the left and right positions (in case of a `.YAxis`).\n\nAttributes\n----------\ntick1line : `~matplotlib.lines.Line2D`\n    The left/bottom tick marker.\ntick2line : `~matplotlib.lines.Line2D`\n    The right/top tick marker.\ngridline : `~matplotlib.lines.Line2D`\n    The grid line associated with the label position.\nlabel1 : `~matplotlib.text.Text`\n    The left/bottom tick label.\nlabel2 : `~matplotlib.text.Text`\n    The right/top tick label.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "bbox is the Bound2D bounding box in display coords of the Axes\nloc is the tick location in data coords\nsize is the tick size in points"
        },
        {
          "name": "get_tickdir",
          "docstring": null
        },
        {
          "name": "get_tick_padding",
          "docstring": "Get the length of the tick outside of the Axes."
        },
        {
          "name": "get_children",
          "docstring": null
        },
        {
          "name": "set_clip_path",
          "docstring": null
        },
        {
          "name": "contains",
          "docstring": "Test whether the mouse event occurred in the Tick marks.\n\nThis function always returns false.  It is more useful to test if the\naxis as a whole contains the mouse rather than the set of tick marks."
        },
        {
          "name": "set_pad",
          "docstring": "Set the tick label pad in points\n\nParameters\n----------\nval : float"
        },
        {
          "name": "get_pad",
          "docstring": "Get the value of the tick label pad in points."
        },
        {
          "name": "get_loc",
          "docstring": "Return the tick location (data coords) as a scalar."
        },
        {
          "name": "draw",
          "docstring": null
        },
        {
          "name": "set_url",
          "docstring": "Set the url of label1 and label2.\n\nParameters\n----------\nurl : str"
        },
        {
          "name": "get_view_interval",
          "docstring": "Return the view limits ``(min, max)`` of the axis the tick belongs to."
        },
        {
          "name": "update_position",
          "docstring": "Set the location of tick in data coords with scalar *loc*."
        }
      ]
    },
    {
      "name": "XTick",
      "docstring": "Contains all the Artists needed to make an x tick - the tick line,\nthe label text and the grid line",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "update_position",
          "docstring": "Set the location of tick in data coords with scalar *loc*."
        },
        {
          "name": "get_view_interval",
          "docstring": null
        }
      ]
    },
    {
      "name": "YTick",
      "docstring": "Contains all the Artists needed to make a Y tick - the tick line,\nthe label text and the grid line",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "update_position",
          "docstring": "Set the location of tick in data coords with scalar *loc*."
        },
        {
          "name": "get_view_interval",
          "docstring": null
        }
      ]
    },
    {
      "name": "Ticker",
      "docstring": "A container for the objects defining tick position and format.\n\nAttributes\n----------\nlocator : `~matplotlib.ticker.Locator` subclass\n    Determines the positions of the ticks.\nformatter : `~matplotlib.ticker.Formatter` subclass\n    Determines the format of the tick labels.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "locator",
          "docstring": null
        },
        {
          "name": "locator",
          "docstring": null
        },
        {
          "name": "formatter",
          "docstring": null
        },
        {
          "name": "formatter",
          "docstring": null
        }
      ]
    },
    {
      "name": "_LazyTickList",
      "docstring": "A descriptor for lazy instantiation of tick lists.\n\nSee comment above definition of the ``majorTicks`` and ``minorTicks``\nattributes.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "Axis",
      "docstring": "Base class for `.XAxis` and `.YAxis`.\n\nAttributes\n----------\nisDefault_label : bool\n\naxes : `~matplotlib.axes.Axes`\n    The `~.axes.Axes` to which the Axis belongs.\nmajor : `~matplotlib.axis.Ticker`\n    Determines the major tick positions and their label format.\nminor : `~matplotlib.axis.Ticker`\n    Determines the minor tick positions and their label format.\ncallbacks : `~matplotlib.cbook.CallbackRegistry`\n\nlabel : `~matplotlib.text.Text`\n    The axis label.\nlabelpad : float\n    The distance between the axis label and the tick labels.\n    Defaults to :rc:`axes.labelpad`.\noffsetText : `~matplotlib.text.Text`\n    A `.Text` object containing the data offset of the ticks (if any).\npickradius : float\n    The acceptance radius for containment tests. See also `.Axis.contains`.\nmajorTicks : list of `.Tick`\n    The major ticks.\n\n    .. warning::\n\n        Ticks are not guaranteed to be persistent. Various operations\n        can create, delete and modify the Tick instances. There is an\n        imminent risk that changes to individual ticks will not\n        survive if you work on the figure further (including also\n        panning/zooming on a displayed figure).\n\n        Working on the individual ticks is a method of last resort.\n        Use `.set_tick_params` instead if possible.\n\nminorTicks : list of `.Tick`\n    The minor ticks.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Parameters\n----------\naxes : `~matplotlib.axes.Axes`\n    The `~.axes.Axes` to which the created Axis belongs.\npickradius : float\n    The acceptance radius for containment tests. See also\n    `.Axis.contains`.\nclear : bool, default: True\n    Whether to clear the Axis on creation. This is not required, e.g.,  when\n    creating an Axis as part of an Axes, as ``Axes.clear`` will call\n    ``Axis.clear``.\n    .. versionadded:: 3.8"
        },
        {
          "name": "isDefault_majloc",
          "docstring": null
        },
        {
          "name": "isDefault_majloc",
          "docstring": null
        },
        {
          "name": "isDefault_majfmt",
          "docstring": null
        },
        {
          "name": "isDefault_majfmt",
          "docstring": null
        },
        {
          "name": "isDefault_minloc",
          "docstring": null
        },
        {
          "name": "isDefault_minloc",
          "docstring": null
        },
        {
          "name": "isDefault_minfmt",
          "docstring": null
        },
        {
          "name": "isDefault_minfmt",
          "docstring": null
        },
        {
          "name": "get_remove_overlapping_locs",
          "docstring": null
        },
        {
          "name": "set_remove_overlapping_locs",
          "docstring": null
        },
        {
          "name": "set_label_coords",
          "docstring": "Set the coordinates of the label.\n\nBy default, the x coordinate of the y label and the y coordinate of the\nx label are determined by the tick label bounding boxes, but this can\nlead to poor alignment of multiple labels if there are multiple Axes.\n\nYou can also specify the coordinate system of the label with the\ntransform.  If None, the default coordinate system will be the axes\ncoordinate system: (0, 0) is bottom left, (0.5, 0.5) is center, etc."
        },
        {
          "name": "get_transform",
          "docstring": "Return the transform used in the Axis' scale"
        },
        {
          "name": "get_scale",
          "docstring": "Return this Axis' scale (as a str)."
        },
        {
          "name": "limit_range_for_scale",
          "docstring": "Return the range *vmin*, *vmax*, restricted to the domain supported by the\ncurrent scale."
        },
        {
          "name": "get_children",
          "docstring": null
        },
        {
          "name": "clear",
          "docstring": "Clear the axis.\n\nThis resets axis properties to their default values:\n\n- the label\n- the scale\n- locators, formatters and ticks\n- major and minor grid\n- units\n- registered callbacks"
        },
        {
          "name": "reset_ticks",
          "docstring": "Re-initialize the major and minor Tick lists.\n\nEach list starts with a single fresh Tick."
        },
        {
          "name": "minorticks_on",
          "docstring": "Display default minor ticks on the Axis, depending on the scale\n(`~.axis.Axis.get_scale`).\n\nScales use specific minor locators:\n\n- log: `~.LogLocator`\n- symlog: `~.SymmetricalLogLocator`\n- asinh: `~.AsinhLocator`\n- logit: `~.LogitLocator`\n- default: `~.AutoMinorLocator`\n\nDisplaying minor ticks may reduce performance; you may turn them off\nusing `minorticks_off()` if drawing speed is a problem."
        },
        {
          "name": "minorticks_off",
          "docstring": "Remove minor ticks from the Axis."
        },
        {
          "name": "set_tick_params",
          "docstring": "Set appearance parameters for ticks, ticklabels, and gridlines.\n\nFor documentation of keyword arguments, see\n:meth:`matplotlib.axes.Axes.tick_params`.\n\nSee Also\n--------\n.Axis.get_tick_params\n    View the current style settings for ticks, ticklabels, and\n    gridlines."
        },
        {
          "name": "get_tick_params",
          "docstring": "Get appearance parameters for ticks, ticklabels, and gridlines.\n\n.. versionadded:: 3.7\n\nParameters\n----------\nwhich : {'major', 'minor'}, default: 'major'\n    The group of ticks for which the parameters are retrieved.\n\nReturns\n-------\ndict\n    Properties for styling tick elements added to the axis.\n\nNotes\n-----\nThis method returns the appearance parameters for styling *new*\nelements added to this axis and may be different from the values\non current elements if they were modified directly by the user\n(e.g., via ``set_*`` methods on individual tick objects).\n\nExamples\n--------\n::\n\n    >>> ax.yaxis.set_tick_params(labelsize=30, labelcolor='red',\n    ...                          direction='out', which='major')\n    >>> ax.yaxis.get_tick_params(which='major')\n    {'direction': 'out',\n    'left': True,\n    'right': False,\n    'labelleft': True,\n    'labelright': False,\n    'gridOn': False,\n    'labelsize': 30,\n    'labelcolor': 'red'}\n    >>> ax.yaxis.get_tick_params(which='minor')\n    {'left': True,\n    'right': False,\n    'labelleft': True,\n    'labelright': False,\n    'gridOn': False}"
        },
        {
          "name": "set_clip_path",
          "docstring": null
        },
        {
          "name": "get_view_interval",
          "docstring": "Return the ``(min, max)`` view limits of this axis."
        },
        {
          "name": "set_view_interval",
          "docstring": "Set the axis view limits.  This method is for internal use; Matplotlib\nusers should typically use e.g. `~.Axes.set_xlim` or `~.Axes.set_ylim`.\n\nIf *ignore* is False (the default), this method will never reduce the\npreexisting view limits, only expand them if *vmin* or *vmax* are not\nwithin them.  Moreover, the order of *vmin* and *vmax* does not matter;\nthe orientation of the axis will not change.\n\nIf *ignore* is True, the view limits will be set exactly to ``(vmin,\nvmax)`` in that order."
        },
        {
          "name": "get_data_interval",
          "docstring": "Return the ``(min, max)`` data limits of this axis."
        },
        {
          "name": "set_data_interval",
          "docstring": "Set the axis data limits.  This method is for internal use.\n\nIf *ignore* is False (the default), this method will never reduce the\npreexisting data limits, only expand them if *vmin* or *vmax* are not\nwithin them.  Moreover, the order of *vmin* and *vmax* does not matter;\nthe orientation of the axis will not change.\n\nIf *ignore* is True, the data limits will be set exactly to ``(vmin,\nvmax)`` in that order."
        },
        {
          "name": "get_inverted",
          "docstring": "Return whether this Axis is oriented in the \"inverse\" direction.\n\nThe \"normal\" direction is increasing to the right for the x-axis and to\nthe top for the y-axis; the \"inverse\" direction is increasing to the\nleft for the x-axis and to the bottom for the y-axis."
        },
        {
          "name": "set_inverted",
          "docstring": "Set whether this Axis is oriented in the \"inverse\" direction.\n\nThe \"normal\" direction is increasing to the right for the x-axis and to\nthe top for the y-axis; the \"inverse\" direction is increasing to the\nleft for the x-axis and to the bottom for the y-axis."
        },
        {
          "name": "set_default_intervals",
          "docstring": "Set the default limits for the axis data and view interval if they\nhave not been not mutated yet."
        },
        {
          "name": "get_tightbbox",
          "docstring": "Return a bounding box that encloses the axis. It only accounts\ntick labels, axis label, and offsetText.\n\nIf *for_layout_only* is True, then the width of the label (if this\nis an x-axis) or the height of the label (if this is a y-axis) is\ncollapsed to near zero.  This allows tight/constrained_layout to ignore\ntoo-long labels when doing their layout."
        },
        {
          "name": "get_tick_padding",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        },
        {
          "name": "get_gridlines",
          "docstring": "Return this Axis' grid lines as a list of `.Line2D`\\s."
        },
        {
          "name": "set_label",
          "docstring": "Assigning legend labels is not supported. Raises RuntimeError."
        },
        {
          "name": "get_label",
          "docstring": "Return the axis label as a Text instance.\n\n.. admonition:: Discouraged\n\n   This overrides `.Artist.get_label`, which is for legend labels, with a new\n   semantic. It is recommended to use the attribute ``Axis.label`` instead."
        },
        {
          "name": "get_offset_text",
          "docstring": "Return the axis offsetText as a Text instance."
        },
        {
          "name": "get_pickradius",
          "docstring": "Return the depth of the axis used by the picker."
        },
        {
          "name": "get_majorticklabels",
          "docstring": "Return this Axis' major tick labels, as a list of `~.text.Text`."
        },
        {
          "name": "get_minorticklabels",
          "docstring": "Return this Axis' minor tick labels, as a list of `~.text.Text`."
        },
        {
          "name": "get_ticklabels",
          "docstring": "Get this Axis' tick labels.\n\nParameters\n----------\nminor : bool\n   Whether to return the minor or the major ticklabels.\n\nwhich : None, ('minor', 'major', 'both')\n   Overrides *minor*.\n\n   Selects which ticklabels to return\n\nReturns\n-------\nlist of `~matplotlib.text.Text`"
        },
        {
          "name": "get_majorticklines",
          "docstring": "Return this Axis' major tick lines as a list of `.Line2D`\\s."
        },
        {
          "name": "get_minorticklines",
          "docstring": "Return this Axis' minor tick lines as a list of `.Line2D`\\s."
        },
        {
          "name": "get_ticklines",
          "docstring": "Return this Axis' tick lines as a list of `.Line2D`\\s."
        },
        {
          "name": "get_majorticklocs",
          "docstring": "Return this Axis' major tick locations in data coordinates."
        },
        {
          "name": "get_minorticklocs",
          "docstring": "Return this Axis' minor tick locations in data coordinates."
        },
        {
          "name": "get_ticklocs",
          "docstring": "Return this Axis' tick locations in data coordinates.\n\nThe locations are not clipped to the current axis limits and hence\nmay contain locations that are not visible in the output.\n\nParameters\n----------\nminor : bool, default: False\n    True to return the minor tick directions,\n    False to return the major tick directions.\n\nReturns\n-------\narray of tick locations"
        },
        {
          "name": "get_ticks_direction",
          "docstring": "Return an array of this Axis' tick directions.\n\nParameters\n----------\nminor : bool, default: False\n    True to return the minor tick directions,\n    False to return the major tick directions.\n\nReturns\n-------\narray of tick directions"
        },
        {
          "name": "get_label_text",
          "docstring": "Get the text of the label."
        },
        {
          "name": "get_major_locator",
          "docstring": "Get the locator of the major ticker."
        },
        {
          "name": "get_minor_locator",
          "docstring": "Get the locator of the minor ticker."
        },
        {
          "name": "get_major_formatter",
          "docstring": "Get the formatter of the major ticker."
        },
        {
          "name": "get_minor_formatter",
          "docstring": "Get the formatter of the minor ticker."
        },
        {
          "name": "get_major_ticks",
          "docstring": "Return the list of major `.Tick`\\s.\n\n.. warning::\n\n    Ticks are not guaranteed to be persistent. Various operations\n    can create, delete and modify the Tick instances. There is an\n    imminent risk that changes to individual ticks will not\n    survive if you work on the figure further (including also\n    panning/zooming on a displayed figure).\n\n    Working on the individual ticks is a method of last resort.\n    Use `.set_tick_params` instead if possible."
        },
        {
          "name": "get_minor_ticks",
          "docstring": "Return the list of minor `.Tick`\\s.\n\n.. warning::\n\n    Ticks are not guaranteed to be persistent. Various operations\n    can create, delete and modify the Tick instances. There is an\n    imminent risk that changes to individual ticks will not\n    survive if you work on the figure further (including also\n    panning/zooming on a displayed figure).\n\n    Working on the individual ticks is a method of last resort.\n    Use `.set_tick_params` instead if possible."
        },
        {
          "name": "grid",
          "docstring": "Configure the grid lines.\n\nParameters\n----------\nvisible : bool or None\n    Whether to show the grid lines.  If any *kwargs* are supplied, it\n    is assumed you want the grid on and *visible* will be set to True.\n\n    If *visible* is *None* and there are no *kwargs*, this toggles the\n    visibility of the lines.\n\nwhich : {'major', 'minor', 'both'}\n    The grid lines to apply the changes on.\n\n**kwargs : `~matplotlib.lines.Line2D` properties\n    Define the line properties of the grid, e.g.::\n\n        grid(color='r', linestyle='-', linewidth=2)"
        },
        {
          "name": "update_units",
          "docstring": "Introspect *data* for units converter and update the\n``axis.get_converter`` instance if necessary. Return *True*\nif *data* is registered for unit conversion."
        },
        {
          "name": "have_units",
          "docstring": null
        },
        {
          "name": "convert_units",
          "docstring": null
        },
        {
          "name": "get_converter",
          "docstring": "Get the unit converter for axis.\n\nReturns\n-------\n`~matplotlib.units.ConversionInterface` or None"
        },
        {
          "name": "set_converter",
          "docstring": "Set the unit converter for axis.\n\nParameters\n----------\nconverter : `~matplotlib.units.ConversionInterface`"
        },
        {
          "name": "set_units",
          "docstring": "Set the units for axis.\n\nParameters\n----------\nu : units tag\n\nNotes\n-----\nThe units of any shared axis will also be updated."
        },
        {
          "name": "get_units",
          "docstring": "Return the units for axis."
        },
        {
          "name": "set_label_text",
          "docstring": "Set the text value of the axis label.\n\nParameters\n----------\nlabel : str\n    Text string.\nfontdict : dict\n    Text properties.\n\n    .. admonition:: Discouraged\n\n       The use of *fontdict* is discouraged. Parameters should be passed as\n       individual keyword arguments or using dictionary-unpacking\n       ``set_label_text(..., **fontdict)``.\n\n**kwargs\n    Merged into fontdict."
        },
        {
          "name": "set_major_formatter",
          "docstring": "Set the formatter of the major ticker.\n\nIn addition to a `~matplotlib.ticker.Formatter` instance,\nthis also accepts a ``str`` or function.\n\nFor a ``str`` a `~matplotlib.ticker.StrMethodFormatter` is used.\nThe field used for the value must be labeled ``'x'`` and the field used\nfor the position must be labeled ``'pos'``.\nSee the  `~matplotlib.ticker.StrMethodFormatter` documentation for\nmore information.\n\nFor a function, a `~matplotlib.ticker.FuncFormatter` is used.\nThe function must take two inputs (a tick value ``x`` and a\nposition ``pos``), and return a string containing the corresponding\ntick label.\nSee the  `~matplotlib.ticker.FuncFormatter` documentation for\nmore information.\n\nParameters\n----------\nformatter : `~matplotlib.ticker.Formatter`, ``str``, or function"
        },
        {
          "name": "set_minor_formatter",
          "docstring": "Set the formatter of the minor ticker.\n\nIn addition to a `~matplotlib.ticker.Formatter` instance,\nthis also accepts a ``str`` or function.\nSee `.Axis.set_major_formatter` for more information.\n\nParameters\n----------\nformatter : `~matplotlib.ticker.Formatter`, ``str``, or function"
        },
        {
          "name": "set_major_locator",
          "docstring": "Set the locator of the major ticker.\n\nParameters\n----------\nlocator : `~matplotlib.ticker.Locator`"
        },
        {
          "name": "set_minor_locator",
          "docstring": "Set the locator of the minor ticker.\n\nParameters\n----------\nlocator : `~matplotlib.ticker.Locator`"
        },
        {
          "name": "set_pickradius",
          "docstring": "Set the depth of the axis used by the picker.\n\nParameters\n----------\npickradius : float\n    The acceptance radius for containment tests.\n    See also `.Axis.contains`."
        },
        {
          "name": "set_ticklabels",
          "docstring": "[*Discouraged*] Set this Axis' tick labels with list of string labels.\n\n.. admonition:: Discouraged\n\n    The use of this method is discouraged, because of the dependency on\n    tick positions. In most cases, you'll want to use\n    ``Axes.set_[x/y/z]ticks(positions, labels)`` or ``Axis.set_ticks``\n    instead.\n\n    If you are using this method, you should always fix the tick\n    positions before, e.g. by using `.Axis.set_ticks` or by explicitly\n    setting a `~.ticker.FixedLocator`. Otherwise, ticks are free to\n    move and the labels may end up in unexpected positions.\n\nParameters\n----------\nlabels : sequence of str or of `.Text`\\s\n    Texts for labeling each tick location in the sequence set by\n    `.Axis.set_ticks`; the number of labels must match the number of locations.\n    The labels are used as is, via a `.FixedFormatter` (without further\n    formatting).\n\nminor : bool\n    If True, set minor ticks instead of major ticks.\n\nfontdict : dict, optional\n\n    .. admonition:: Discouraged\n\n       The use of *fontdict* is discouraged. Parameters should be passed as\n       individual keyword arguments or using dictionary-unpacking\n       ``set_ticklabels(..., **fontdict)``.\n\n    A dictionary controlling the appearance of the ticklabels.\n    The default *fontdict* is::\n\n       {'fontsize': rcParams['axes.titlesize'],\n        'fontweight': rcParams['axes.titleweight'],\n        'verticalalignment': 'baseline',\n        'horizontalalignment': loc}\n\n**kwargs\n    Text properties.\n\n    .. warning::\n\n        This only sets the properties of the current ticks, which is\n        only sufficient for static plots.\n\n        Ticks are not guaranteed to be persistent. Various operations\n        can create, delete and modify the Tick instances. There is an\n        imminent risk that these settings can get lost if you work on\n        the figure further (including also panning/zooming on a\n        displayed figure).\n\n        Use `.set_tick_params` instead if possible.\n\nReturns\n-------\nlist of `.Text`\\s\n    For each tick, includes ``tick.label1`` if it is visible, then\n    ``tick.label2`` if it is visible, in that order."
        },
        {
          "name": "set_ticks",
          "docstring": "Set this Axis' tick locations and optionally tick labels.\n\nIf necessary, the view limits of the Axis are expanded so that all\ngiven ticks are visible.\n\nParameters\n----------\nticks : 1D array-like\n    Array of tick locations (either floats or in axis units). The axis\n    `.Locator` is replaced by a `~.ticker.FixedLocator`.\n\n    Pass an empty list (``set_ticks([])``) to remove all ticks.\n\n    Some tick formatters will not label arbitrary tick positions;\n    e.g. log formatters only label decade ticks by default. In\n    such a case you can set a formatter explicitly on the axis\n    using `.Axis.set_major_formatter` or provide formatted\n    *labels* yourself.\n\nlabels : list of str, optional\n    Tick labels for each location in *ticks*; must have the same length as\n    *ticks*. If set, the labels are used as is, via a `.FixedFormatter`.\n    If not set, the labels are generated using the axis tick `.Formatter`.\n\nminor : bool, default: False\n    If ``False``, set only the major ticks; if ``True``, only the minor ticks.\n\n**kwargs\n    `.Text` properties for the labels. Using these is only allowed if\n    you pass *labels*. In other cases, please use `~.Axes.tick_params`.\n\nNotes\n-----\nThe mandatory expansion of the view limits is an intentional design\nchoice to prevent the surprise of a non-visible tick. If you need\nother limits, you should set the limits explicitly after setting the\nticks."
        },
        {
          "name": "axis_date",
          "docstring": "Set up axis ticks and labels to treat data along this Axis as dates.\n\nParameters\n----------\ntz : str or `datetime.tzinfo`, default: :rc:`timezone`\n    The timezone used to create date labels."
        },
        {
          "name": "get_tick_space",
          "docstring": "Return the estimated number of ticks that can fit on the axis."
        },
        {
          "name": "get_label_position",
          "docstring": "Return the label position (top or bottom)"
        },
        {
          "name": "set_label_position",
          "docstring": "Set the label position (top or bottom)\n\nParameters\n----------\nposition : {'top', 'bottom'}"
        },
        {
          "name": "get_minpos",
          "docstring": null
        }
      ]
    },
    {
      "name": "XAxis",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "contains",
          "docstring": "Test whether the mouse event occurred in the x-axis."
        },
        {
          "name": "set_label_position",
          "docstring": "Set the label position (top or bottom)\n\nParameters\n----------\nposition : {'top', 'bottom'}"
        },
        {
          "name": "set_ticks_position",
          "docstring": "Set the ticks position.\n\nParameters\n----------\nposition : {'top', 'bottom', 'both', 'default', 'none'}\n    'both' sets the ticks to appear on both positions, but does not\n    change the tick labels.  'default' resets the tick positions to\n    the default: ticks on both positions, labels at bottom.  'none'\n    can be used if you don't want any ticks. 'none' and 'both'\n    affect only the ticks, not the labels."
        },
        {
          "name": "tick_top",
          "docstring": "Move ticks and ticklabels (if present) to the top of the Axes."
        },
        {
          "name": "tick_bottom",
          "docstring": "Move ticks and ticklabels (if present) to the bottom of the Axes."
        },
        {
          "name": "get_ticks_position",
          "docstring": "Return the ticks position (\"top\", \"bottom\", \"default\", or \"unknown\")."
        },
        {
          "name": "get_minpos",
          "docstring": null
        },
        {
          "name": "set_default_intervals",
          "docstring": null
        },
        {
          "name": "get_tick_space",
          "docstring": null
        }
      ]
    },
    {
      "name": "YAxis",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "contains",
          "docstring": null
        },
        {
          "name": "set_label_position",
          "docstring": "Set the label position (left or right)\n\nParameters\n----------\nposition : {'left', 'right'}"
        },
        {
          "name": "set_offset_position",
          "docstring": "Parameters\n----------\nposition : {'left', 'right'}"
        },
        {
          "name": "set_ticks_position",
          "docstring": "Set the ticks position.\n\nParameters\n----------\nposition : {'left', 'right', 'both', 'default', 'none'}\n    'both' sets the ticks to appear on both positions, but does not\n    change the tick labels.  'default' resets the tick positions to\n    the default: ticks on both positions, labels at left.  'none'\n    can be used if you don't want any ticks. 'none' and 'both'\n    affect only the ticks, not the labels."
        },
        {
          "name": "tick_right",
          "docstring": "Move ticks and ticklabels (if present) to the right of the Axes."
        },
        {
          "name": "tick_left",
          "docstring": "Move ticks and ticklabels (if present) to the left of the Axes."
        },
        {
          "name": "get_ticks_position",
          "docstring": "Return the ticks position (\"left\", \"right\", \"default\", or \"unknown\")."
        },
        {
          "name": "get_minpos",
          "docstring": null
        },
        {
          "name": "set_default_intervals",
          "docstring": null
        },
        {
          "name": "get_tick_space",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_tickdir",
      "docstring": null
    },
    {
      "name": "get_tick_padding",
      "docstring": "Get the length of the tick outside of the Axes."
    },
    {
      "name": "get_children",
      "docstring": null
    },
    {
      "name": "set_clip_path",
      "docstring": null
    },
    {
      "name": "contains",
      "docstring": "Test whether the mouse event occurred in the Tick marks.\n\nThis function always returns false.  It is more useful to test if the\naxis as a whole contains the mouse rather than the set of tick marks."
    },
    {
      "name": "set_pad",
      "docstring": "Set the tick label pad in points\n\nParameters\n----------\nval : float"
    },
    {
      "name": "get_pad",
      "docstring": "Get the value of the tick label pad in points."
    },
    {
      "name": "get_loc",
      "docstring": "Return the tick location (data coords) as a scalar."
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "set_url",
      "docstring": "Set the url of label1 and label2.\n\nParameters\n----------\nurl : str"
    },
    {
      "name": "get_view_interval",
      "docstring": "Return the view limits ``(min, max)`` of the axis the tick belongs to."
    },
    {
      "name": "update_position",
      "docstring": "Set the location of tick in data coords with scalar *loc*."
    },
    {
      "name": "update_position",
      "docstring": "Set the location of tick in data coords with scalar *loc*."
    },
    {
      "name": "get_view_interval",
      "docstring": null
    },
    {
      "name": "update_position",
      "docstring": "Set the location of tick in data coords with scalar *loc*."
    },
    {
      "name": "get_view_interval",
      "docstring": null
    },
    {
      "name": "locator",
      "docstring": null
    },
    {
      "name": "locator",
      "docstring": null
    },
    {
      "name": "formatter",
      "docstring": null
    },
    {
      "name": "formatter",
      "docstring": null
    },
    {
      "name": "isDefault_majloc",
      "docstring": null
    },
    {
      "name": "isDefault_majloc",
      "docstring": null
    },
    {
      "name": "isDefault_majfmt",
      "docstring": null
    },
    {
      "name": "isDefault_majfmt",
      "docstring": null
    },
    {
      "name": "isDefault_minloc",
      "docstring": null
    },
    {
      "name": "isDefault_minloc",
      "docstring": null
    },
    {
      "name": "isDefault_minfmt",
      "docstring": null
    },
    {
      "name": "isDefault_minfmt",
      "docstring": null
    },
    {
      "name": "get_remove_overlapping_locs",
      "docstring": null
    },
    {
      "name": "set_remove_overlapping_locs",
      "docstring": null
    },
    {
      "name": "set_label_coords",
      "docstring": "Set the coordinates of the label.\n\nBy default, the x coordinate of the y label and the y coordinate of the\nx label are determined by the tick label bounding boxes, but this can\nlead to poor alignment of multiple labels if there are multiple Axes.\n\nYou can also specify the coordinate system of the label with the\ntransform.  If None, the default coordinate system will be the axes\ncoordinate system: (0, 0) is bottom left, (0.5, 0.5) is center, etc."
    },
    {
      "name": "get_transform",
      "docstring": "Return the transform used in the Axis' scale"
    },
    {
      "name": "get_scale",
      "docstring": "Return this Axis' scale (as a str)."
    },
    {
      "name": "limit_range_for_scale",
      "docstring": "Return the range *vmin*, *vmax*, restricted to the domain supported by the\ncurrent scale."
    },
    {
      "name": "get_children",
      "docstring": null
    },
    {
      "name": "clear",
      "docstring": "Clear the axis.\n\nThis resets axis properties to their default values:\n\n- the label\n- the scale\n- locators, formatters and ticks\n- major and minor grid\n- units\n- registered callbacks"
    },
    {
      "name": "reset_ticks",
      "docstring": "Re-initialize the major and minor Tick lists.\n\nEach list starts with a single fresh Tick."
    },
    {
      "name": "minorticks_on",
      "docstring": "Display default minor ticks on the Axis, depending on the scale\n(`~.axis.Axis.get_scale`).\n\nScales use specific minor locators:\n\n- log: `~.LogLocator`\n- symlog: `~.SymmetricalLogLocator`\n- asinh: `~.AsinhLocator`\n- logit: `~.LogitLocator`\n- default: `~.AutoMinorLocator`\n\nDisplaying minor ticks may reduce performance; you may turn them off\nusing `minorticks_off()` if drawing speed is a problem."
    },
    {
      "name": "minorticks_off",
      "docstring": "Remove minor ticks from the Axis."
    },
    {
      "name": "set_tick_params",
      "docstring": "Set appearance parameters for ticks, ticklabels, and gridlines.\n\nFor documentation of keyword arguments, see\n:meth:`matplotlib.axes.Axes.tick_params`.\n\nSee Also\n--------\n.Axis.get_tick_params\n    View the current style settings for ticks, ticklabels, and\n    gridlines."
    },
    {
      "name": "get_tick_params",
      "docstring": "Get appearance parameters for ticks, ticklabels, and gridlines.\n\n.. versionadded:: 3.7\n\nParameters\n----------\nwhich : {'major', 'minor'}, default: 'major'\n    The group of ticks for which the parameters are retrieved.\n\nReturns\n-------\ndict\n    Properties for styling tick elements added to the axis.\n\nNotes\n-----\nThis method returns the appearance parameters for styling *new*\nelements added to this axis and may be different from the values\non current elements if they were modified directly by the user\n(e.g., via ``set_*`` methods on individual tick objects).\n\nExamples\n--------\n::\n\n    >>> ax.yaxis.set_tick_params(labelsize=30, labelcolor='red',\n    ...                          direction='out', which='major')\n    >>> ax.yaxis.get_tick_params(which='major')\n    {'direction': 'out',\n    'left': True,\n    'right': False,\n    'labelleft': True,\n    'labelright': False,\n    'gridOn': False,\n    'labelsize': 30,\n    'labelcolor': 'red'}\n    >>> ax.yaxis.get_tick_params(which='minor')\n    {'left': True,\n    'right': False,\n    'labelleft': True,\n    'labelright': False,\n    'gridOn': False}"
    },
    {
      "name": "set_clip_path",
      "docstring": null
    },
    {
      "name": "get_view_interval",
      "docstring": "Return the ``(min, max)`` view limits of this axis."
    },
    {
      "name": "set_view_interval",
      "docstring": "Set the axis view limits.  This method is for internal use; Matplotlib\nusers should typically use e.g. `~.Axes.set_xlim` or `~.Axes.set_ylim`.\n\nIf *ignore* is False (the default), this method will never reduce the\npreexisting view limits, only expand them if *vmin* or *vmax* are not\nwithin them.  Moreover, the order of *vmin* and *vmax* does not matter;\nthe orientation of the axis will not change.\n\nIf *ignore* is True, the view limits will be set exactly to ``(vmin,\nvmax)`` in that order."
    },
    {
      "name": "get_data_interval",
      "docstring": "Return the ``(min, max)`` data limits of this axis."
    },
    {
      "name": "set_data_interval",
      "docstring": "Set the axis data limits.  This method is for internal use.\n\nIf *ignore* is False (the default), this method will never reduce the\npreexisting data limits, only expand them if *vmin* or *vmax* are not\nwithin them.  Moreover, the order of *vmin* and *vmax* does not matter;\nthe orientation of the axis will not change.\n\nIf *ignore* is True, the data limits will be set exactly to ``(vmin,\nvmax)`` in that order."
    },
    {
      "name": "get_inverted",
      "docstring": "Return whether this Axis is oriented in the \"inverse\" direction.\n\nThe \"normal\" direction is increasing to the right for the x-axis and to\nthe top for the y-axis; the \"inverse\" direction is increasing to the\nleft for the x-axis and to the bottom for the y-axis."
    },
    {
      "name": "set_inverted",
      "docstring": "Set whether this Axis is oriented in the \"inverse\" direction.\n\nThe \"normal\" direction is increasing to the right for the x-axis and to\nthe top for the y-axis; the \"inverse\" direction is increasing to the\nleft for the x-axis and to the bottom for the y-axis."
    },
    {
      "name": "set_default_intervals",
      "docstring": "Set the default limits for the axis data and view interval if they\nhave not been not mutated yet."
    },
    {
      "name": "get_tightbbox",
      "docstring": "Return a bounding box that encloses the axis. It only accounts\ntick labels, axis label, and offsetText.\n\nIf *for_layout_only* is True, then the width of the label (if this\nis an x-axis) or the height of the label (if this is a y-axis) is\ncollapsed to near zero.  This allows tight/constrained_layout to ignore\ntoo-long labels when doing their layout."
    },
    {
      "name": "get_tick_padding",
      "docstring": null
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "get_gridlines",
      "docstring": "Return this Axis' grid lines as a list of `.Line2D`\\s."
    },
    {
      "name": "set_label",
      "docstring": "Assigning legend labels is not supported. Raises RuntimeError."
    },
    {
      "name": "get_label",
      "docstring": "Return the axis label as a Text instance.\n\n.. admonition:: Discouraged\n\n   This overrides `.Artist.get_label`, which is for legend labels, with a new\n   semantic. It is recommended to use the attribute ``Axis.label`` instead."
    },
    {
      "name": "get_offset_text",
      "docstring": "Return the axis offsetText as a Text instance."
    },
    {
      "name": "get_pickradius",
      "docstring": "Return the depth of the axis used by the picker."
    },
    {
      "name": "get_majorticklabels",
      "docstring": "Return this Axis' major tick labels, as a list of `~.text.Text`."
    },
    {
      "name": "get_minorticklabels",
      "docstring": "Return this Axis' minor tick labels, as a list of `~.text.Text`."
    },
    {
      "name": "get_ticklabels",
      "docstring": "Get this Axis' tick labels.\n\nParameters\n----------\nminor : bool\n   Whether to return the minor or the major ticklabels.\n\nwhich : None, ('minor', 'major', 'both')\n   Overrides *minor*.\n\n   Selects which ticklabels to return\n\nReturns\n-------\nlist of `~matplotlib.text.Text`"
    },
    {
      "name": "get_majorticklines",
      "docstring": "Return this Axis' major tick lines as a list of `.Line2D`\\s."
    },
    {
      "name": "get_minorticklines",
      "docstring": "Return this Axis' minor tick lines as a list of `.Line2D`\\s."
    },
    {
      "name": "get_ticklines",
      "docstring": "Return this Axis' tick lines as a list of `.Line2D`\\s."
    },
    {
      "name": "get_majorticklocs",
      "docstring": "Return this Axis' major tick locations in data coordinates."
    },
    {
      "name": "get_minorticklocs",
      "docstring": "Return this Axis' minor tick locations in data coordinates."
    },
    {
      "name": "get_ticklocs",
      "docstring": "Return this Axis' tick locations in data coordinates.\n\nThe locations are not clipped to the current axis limits and hence\nmay contain locations that are not visible in the output.\n\nParameters\n----------\nminor : bool, default: False\n    True to return the minor tick directions,\n    False to return the major tick directions.\n\nReturns\n-------\narray of tick locations"
    },
    {
      "name": "get_ticks_direction",
      "docstring": "Return an array of this Axis' tick directions.\n\nParameters\n----------\nminor : bool, default: False\n    True to return the minor tick directions,\n    False to return the major tick directions.\n\nReturns\n-------\narray of tick directions"
    },
    {
      "name": "get_label_text",
      "docstring": "Get the text of the label."
    },
    {
      "name": "get_major_locator",
      "docstring": "Get the locator of the major ticker."
    },
    {
      "name": "get_minor_locator",
      "docstring": "Get the locator of the minor ticker."
    },
    {
      "name": "get_major_formatter",
      "docstring": "Get the formatter of the major ticker."
    },
    {
      "name": "get_minor_formatter",
      "docstring": "Get the formatter of the minor ticker."
    },
    {
      "name": "get_major_ticks",
      "docstring": "Return the list of major `.Tick`\\s.\n\n.. warning::\n\n    Ticks are not guaranteed to be persistent. Various operations\n    can create, delete and modify the Tick instances. There is an\n    imminent risk that changes to individual ticks will not\n    survive if you work on the figure further (including also\n    panning/zooming on a displayed figure).\n\n    Working on the individual ticks is a method of last resort.\n    Use `.set_tick_params` instead if possible."
    },
    {
      "name": "get_minor_ticks",
      "docstring": "Return the list of minor `.Tick`\\s.\n\n.. warning::\n\n    Ticks are not guaranteed to be persistent. Various operations\n    can create, delete and modify the Tick instances. There is an\n    imminent risk that changes to individual ticks will not\n    survive if you work on the figure further (including also\n    panning/zooming on a displayed figure).\n\n    Working on the individual ticks is a method of last resort.\n    Use `.set_tick_params` instead if possible."
    },
    {
      "name": "grid",
      "docstring": "Configure the grid lines.\n\nParameters\n----------\nvisible : bool or None\n    Whether to show the grid lines.  If any *kwargs* are supplied, it\n    is assumed you want the grid on and *visible* will be set to True.\n\n    If *visible* is *None* and there are no *kwargs*, this toggles the\n    visibility of the lines.\n\nwhich : {'major', 'minor', 'both'}\n    The grid lines to apply the changes on.\n\n**kwargs : `~matplotlib.lines.Line2D` properties\n    Define the line properties of the grid, e.g.::\n\n        grid(color='r', linestyle='-', linewidth=2)"
    },
    {
      "name": "update_units",
      "docstring": "Introspect *data* for units converter and update the\n``axis.get_converter`` instance if necessary. Return *True*\nif *data* is registered for unit conversion."
    },
    {
      "name": "have_units",
      "docstring": null
    },
    {
      "name": "convert_units",
      "docstring": null
    },
    {
      "name": "get_converter",
      "docstring": "Get the unit converter for axis.\n\nReturns\n-------\n`~matplotlib.units.ConversionInterface` or None"
    },
    {
      "name": "set_converter",
      "docstring": "Set the unit converter for axis.\n\nParameters\n----------\nconverter : `~matplotlib.units.ConversionInterface`"
    },
    {
      "name": "set_units",
      "docstring": "Set the units for axis.\n\nParameters\n----------\nu : units tag\n\nNotes\n-----\nThe units of any shared axis will also be updated."
    },
    {
      "name": "get_units",
      "docstring": "Return the units for axis."
    },
    {
      "name": "set_label_text",
      "docstring": "Set the text value of the axis label.\n\nParameters\n----------\nlabel : str\n    Text string.\nfontdict : dict\n    Text properties.\n\n    .. admonition:: Discouraged\n\n       The use of *fontdict* is discouraged. Parameters should be passed as\n       individual keyword arguments or using dictionary-unpacking\n       ``set_label_text(..., **fontdict)``.\n\n**kwargs\n    Merged into fontdict."
    },
    {
      "name": "set_major_formatter",
      "docstring": "Set the formatter of the major ticker.\n\nIn addition to a `~matplotlib.ticker.Formatter` instance,\nthis also accepts a ``str`` or function.\n\nFor a ``str`` a `~matplotlib.ticker.StrMethodFormatter` is used.\nThe field used for the value must be labeled ``'x'`` and the field used\nfor the position must be labeled ``'pos'``.\nSee the  `~matplotlib.ticker.StrMethodFormatter` documentation for\nmore information.\n\nFor a function, a `~matplotlib.ticker.FuncFormatter` is used.\nThe function must take two inputs (a tick value ``x`` and a\nposition ``pos``), and return a string containing the corresponding\ntick label.\nSee the  `~matplotlib.ticker.FuncFormatter` documentation for\nmore information.\n\nParameters\n----------\nformatter : `~matplotlib.ticker.Formatter`, ``str``, or function"
    },
    {
      "name": "set_minor_formatter",
      "docstring": "Set the formatter of the minor ticker.\n\nIn addition to a `~matplotlib.ticker.Formatter` instance,\nthis also accepts a ``str`` or function.\nSee `.Axis.set_major_formatter` for more information.\n\nParameters\n----------\nformatter : `~matplotlib.ticker.Formatter`, ``str``, or function"
    },
    {
      "name": "set_major_locator",
      "docstring": "Set the locator of the major ticker.\n\nParameters\n----------\nlocator : `~matplotlib.ticker.Locator`"
    },
    {
      "name": "set_minor_locator",
      "docstring": "Set the locator of the minor ticker.\n\nParameters\n----------\nlocator : `~matplotlib.ticker.Locator`"
    },
    {
      "name": "set_pickradius",
      "docstring": "Set the depth of the axis used by the picker.\n\nParameters\n----------\npickradius : float\n    The acceptance radius for containment tests.\n    See also `.Axis.contains`."
    },
    {
      "name": "set_ticklabels",
      "docstring": "[*Discouraged*] Set this Axis' tick labels with list of string labels.\n\n.. admonition:: Discouraged\n\n    The use of this method is discouraged, because of the dependency on\n    tick positions. In most cases, you'll want to use\n    ``Axes.set_[x/y/z]ticks(positions, labels)`` or ``Axis.set_ticks``\n    instead.\n\n    If you are using this method, you should always fix the tick\n    positions before, e.g. by using `.Axis.set_ticks` or by explicitly\n    setting a `~.ticker.FixedLocator`. Otherwise, ticks are free to\n    move and the labels may end up in unexpected positions.\n\nParameters\n----------\nlabels : sequence of str or of `.Text`\\s\n    Texts for labeling each tick location in the sequence set by\n    `.Axis.set_ticks`; the number of labels must match the number of locations.\n    The labels are used as is, via a `.FixedFormatter` (without further\n    formatting).\n\nminor : bool\n    If True, set minor ticks instead of major ticks.\n\nfontdict : dict, optional\n\n    .. admonition:: Discouraged\n\n       The use of *fontdict* is discouraged. Parameters should be passed as\n       individual keyword arguments or using dictionary-unpacking\n       ``set_ticklabels(..., **fontdict)``.\n\n    A dictionary controlling the appearance of the ticklabels.\n    The default *fontdict* is::\n\n       {'fontsize': rcParams['axes.titlesize'],\n        'fontweight': rcParams['axes.titleweight'],\n        'verticalalignment': 'baseline',\n        'horizontalalignment': loc}\n\n**kwargs\n    Text properties.\n\n    .. warning::\n\n        This only sets the properties of the current ticks, which is\n        only sufficient for static plots.\n\n        Ticks are not guaranteed to be persistent. Various operations\n        can create, delete and modify the Tick instances. There is an\n        imminent risk that these settings can get lost if you work on\n        the figure further (including also panning/zooming on a\n        displayed figure).\n\n        Use `.set_tick_params` instead if possible.\n\nReturns\n-------\nlist of `.Text`\\s\n    For each tick, includes ``tick.label1`` if it is visible, then\n    ``tick.label2`` if it is visible, in that order."
    },
    {
      "name": "set_ticks",
      "docstring": "Set this Axis' tick locations and optionally tick labels.\n\nIf necessary, the view limits of the Axis are expanded so that all\ngiven ticks are visible.\n\nParameters\n----------\nticks : 1D array-like\n    Array of tick locations (either floats or in axis units). The axis\n    `.Locator` is replaced by a `~.ticker.FixedLocator`.\n\n    Pass an empty list (``set_ticks([])``) to remove all ticks.\n\n    Some tick formatters will not label arbitrary tick positions;\n    e.g. log formatters only label decade ticks by default. In\n    such a case you can set a formatter explicitly on the axis\n    using `.Axis.set_major_formatter` or provide formatted\n    *labels* yourself.\n\nlabels : list of str, optional\n    Tick labels for each location in *ticks*; must have the same length as\n    *ticks*. If set, the labels are used as is, via a `.FixedFormatter`.\n    If not set, the labels are generated using the axis tick `.Formatter`.\n\nminor : bool, default: False\n    If ``False``, set only the major ticks; if ``True``, only the minor ticks.\n\n**kwargs\n    `.Text` properties for the labels. Using these is only allowed if\n    you pass *labels*. In other cases, please use `~.Axes.tick_params`.\n\nNotes\n-----\nThe mandatory expansion of the view limits is an intentional design\nchoice to prevent the surprise of a non-visible tick. If you need\nother limits, you should set the limits explicitly after setting the\nticks."
    },
    {
      "name": "axis_date",
      "docstring": "Set up axis ticks and labels to treat data along this Axis as dates.\n\nParameters\n----------\ntz : str or `datetime.tzinfo`, default: :rc:`timezone`\n    The timezone used to create date labels."
    },
    {
      "name": "get_tick_space",
      "docstring": "Return the estimated number of ticks that can fit on the axis."
    },
    {
      "name": "get_label_position",
      "docstring": "Return the label position (top or bottom)"
    },
    {
      "name": "set_label_position",
      "docstring": "Set the label position (top or bottom)\n\nParameters\n----------\nposition : {'top', 'bottom'}"
    },
    {
      "name": "get_minpos",
      "docstring": null
    },
    {
      "name": "getter",
      "docstring": null
    },
    {
      "name": "setter",
      "docstring": null
    },
    {
      "name": "contains",
      "docstring": "Test whether the mouse event occurred in the x-axis."
    },
    {
      "name": "set_label_position",
      "docstring": "Set the label position (top or bottom)\n\nParameters\n----------\nposition : {'top', 'bottom'}"
    },
    {
      "name": "set_ticks_position",
      "docstring": "Set the ticks position.\n\nParameters\n----------\nposition : {'top', 'bottom', 'both', 'default', 'none'}\n    'both' sets the ticks to appear on both positions, but does not\n    change the tick labels.  'default' resets the tick positions to\n    the default: ticks on both positions, labels at bottom.  'none'\n    can be used if you don't want any ticks. 'none' and 'both'\n    affect only the ticks, not the labels."
    },
    {
      "name": "tick_top",
      "docstring": "Move ticks and ticklabels (if present) to the top of the Axes."
    },
    {
      "name": "tick_bottom",
      "docstring": "Move ticks and ticklabels (if present) to the bottom of the Axes."
    },
    {
      "name": "get_ticks_position",
      "docstring": "Return the ticks position (\"top\", \"bottom\", \"default\", or \"unknown\")."
    },
    {
      "name": "get_minpos",
      "docstring": null
    },
    {
      "name": "set_default_intervals",
      "docstring": null
    },
    {
      "name": "get_tick_space",
      "docstring": null
    },
    {
      "name": "contains",
      "docstring": null
    },
    {
      "name": "set_label_position",
      "docstring": "Set the label position (left or right)\n\nParameters\n----------\nposition : {'left', 'right'}"
    },
    {
      "name": "set_offset_position",
      "docstring": "Parameters\n----------\nposition : {'left', 'right'}"
    },
    {
      "name": "set_ticks_position",
      "docstring": "Set the ticks position.\n\nParameters\n----------\nposition : {'left', 'right', 'both', 'default', 'none'}\n    'both' sets the ticks to appear on both positions, but does not\n    change the tick labels.  'default' resets the tick positions to\n    the default: ticks on both positions, labels at left.  'none'\n    can be used if you don't want any ticks. 'none' and 'both'\n    affect only the ticks, not the labels."
    },
    {
      "name": "tick_right",
      "docstring": "Move ticks and ticklabels (if present) to the right of the Axes."
    },
    {
      "name": "tick_left",
      "docstring": "Move ticks and ticklabels (if present) to the left of the Axes."
    },
    {
      "name": "get_ticks_position",
      "docstring": "Return the ticks position (\"left\", \"right\", \"default\", or \"unknown\")."
    },
    {
      "name": "get_minpos",
      "docstring": null
    },
    {
      "name": "set_default_intervals",
      "docstring": null
    },
    {
      "name": "get_tick_space",
      "docstring": null
    }
  ],
  "innovations": []
}