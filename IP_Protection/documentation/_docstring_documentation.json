{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\_docstring.py",
  "classes": [
    {
      "name": "Substitution",
      "docstring": "A decorator that performs %-substitution on an object's docstring.\n\nThis decorator should be robust even if ``obj.__doc__`` is None (for\nexample, if -OO was passed to the interpreter).\n\nUsage: construct a docstring.Substitution with a sequence or dictionary\nsuitable for performing substitution; then decorate a suitable function\nwith the constructed object, e.g.::\n\n    sub_author_name = Substitution(author='Jason')\n\n    @sub_author_name\n    def some_function(x):\n        \"%(author)s wrote this function\"\n\n    # note that some_function.__doc__ is now \"Jason wrote this function\"\n\nOne can also use positional arguments::\n\n    sub_first_last_names = Substitution('Edgar Allen', 'Poe')\n\n    @sub_first_last_names\n    def some_function(x):\n        \"%s %s wrote the Raven\"",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "_ArtistKwdocLoader",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_ArtistPropertiesSubstitution",
      "docstring": "A class to substitute formatted placeholders in docstrings.\n\nThis is realized in a single instance ``_docstring.interpd``.\n\nUse `~._ArtistPropertiesSubstition.register` to define placeholders and\ntheir substitution, e.g. ``_docstring.interpd.register(name=\"some value\")``.\n\nUse this as a decorator to apply the substitution::\n\n    @_docstring.interpd\n    def some_func():\n        '''Replace %(name)s.'''\n\nDecorating a class triggers substitution both on the class docstring and\non the class' ``__init__`` docstring (which is a commonly required\npattern for Artist subclasses).\n\nSubstitutions of the form ``%(classname:kwdoc)s`` (ending with the\nliteral \":kwdoc\" suffix) trigger lookup of an Artist subclass with the\ngiven *classname*, and are substituted with the `.kwdoc` of that class.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "register",
          "docstring": "Register substitutions.\n\n``_docstring.interpd.register(name=\"some value\")`` makes \"name\" available\nas a named parameter that will be replaced by \"some value\"."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "kwarg_doc",
      "docstring": "Decorator for defining the kwdoc documentation of artist properties.\n\nThis decorator can be applied to artist property setter methods.\nThe given text is stored in a private attribute ``_kwarg_doc`` on\nthe method.  It is used to overwrite auto-generated documentation\nin the *kwdoc list* for artists. The kwdoc list is used to document\n``**kwargs`` when they are properties of an artist. See e.g. the\n``**kwargs`` section in `.Axes.text`.\n\nThe text should contain the supported types, as well as the default\nvalue if applicable, e.g.:\n\n    @_docstring.kwarg_doc(\"bool, default: :rc:`text.usetex`\")\n    def set_usetex(self, usetex):\n\nSee Also\n--------\nmatplotlib.artist.kwdoc"
    },
    {
      "name": "copy",
      "docstring": "Copy a docstring from another source function (if present)."
    },
    {
      "name": "decorator",
      "docstring": null
    },
    {
      "name": "register",
      "docstring": "Register substitutions.\n\n``_docstring.interpd.register(name=\"some value\")`` makes \"name\" available\nas a named parameter that will be replaced by \"some value\"."
    },
    {
      "name": "do_copy",
      "docstring": null
    }
  ],
  "innovations": []
}