{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\testing\\jpl_units\\UnitDbl.py",
  "classes": [
    {
      "name": "UnitDbl",
      "docstring": "Class UnitDbl in development.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Create a new UnitDbl object.\n\nUnits are internally converted to km, rad, and sec.  The only\nvalid inputs for units are [m, km, mile, rad, deg, sec, min, hour].\n\nThe field UnitDbl.value will contain the converted value.  Use\nthe convert() method to get a specific type of units back.\n\n= ERROR CONDITIONS\n- If the input units are not in the allowed list, an error is thrown.\n\n= INPUT VARIABLES\n- value     The numeric value of the UnitDbl.\n- units     The string name of the units the value is in."
        },
        {
          "name": "convert",
          "docstring": "Convert the UnitDbl to a specific set of units.\n\n= ERROR CONDITIONS\n- If the input units are not in the allowed list, an error is thrown.\n\n= INPUT VARIABLES\n- units     The string name of the units to convert to.\n\n= RETURN VALUE\n- Returns the value of the UnitDbl in the requested units as a floating\n  point number."
        },
        {
          "name": "type",
          "docstring": "Return the type of UnitDbl data."
        },
        {
          "name": "range",
          "docstring": "Generate a range of UnitDbl objects.\n\nSimilar to the Python range() method.  Returns the range [\nstart, stop) at the requested step.  Each element will be a\nUnitDbl object.\n\n= INPUT VARIABLES\n- start     The starting value of the range.\n- stop      The stop value of the range.\n- step      Optional step to use.  If set to None, then a UnitDbl of\n              value 1 w/ the units of the start is used.\n\n= RETURN VALUE\n- Returns a list containing the requested UnitDbl values."
        },
        {
          "name": "checkSameUnits",
          "docstring": "Check to see if units are the same.\n\n= ERROR CONDITIONS\n- If the units of the rhs UnitDbl are not the same as our units,\n  an error is thrown.\n\n= INPUT VARIABLES\n- rhs     The UnitDbl to check for the same units\n- func    The name of the function doing the check."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "convert",
      "docstring": "Convert the UnitDbl to a specific set of units.\n\n= ERROR CONDITIONS\n- If the input units are not in the allowed list, an error is thrown.\n\n= INPUT VARIABLES\n- units     The string name of the units to convert to.\n\n= RETURN VALUE\n- Returns the value of the UnitDbl in the requested units as a floating\n  point number."
    },
    {
      "name": "type",
      "docstring": "Return the type of UnitDbl data."
    },
    {
      "name": "range",
      "docstring": "Generate a range of UnitDbl objects.\n\nSimilar to the Python range() method.  Returns the range [\nstart, stop) at the requested step.  Each element will be a\nUnitDbl object.\n\n= INPUT VARIABLES\n- start     The starting value of the range.\n- stop      The stop value of the range.\n- step      Optional step to use.  If set to None, then a UnitDbl of\n              value 1 w/ the units of the start is used.\n\n= RETURN VALUE\n- Returns a list containing the requested UnitDbl values."
    },
    {
      "name": "checkSameUnits",
      "docstring": "Check to see if units are the same.\n\n= ERROR CONDITIONS\n- If the units of the rhs UnitDbl are not the same as our units,\n  an error is thrown.\n\n= INPUT VARIABLES\n- rhs     The UnitDbl to check for the same units\n- func    The name of the function doing the check."
    }
  ],
  "innovations": []
}