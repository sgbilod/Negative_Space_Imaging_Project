{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\rich\\segment.py",
  "classes": [
    {
      "name": "ControlType",
      "docstring": "Non-printable control codes which typically translate to ANSI codes.",
      "methods": []
    },
    {
      "name": "Segment",
      "docstring": "A piece of text with associated style. Segments are produced by the Console render process and\nare ultimately converted in to strings to be written to the terminal.\n\nArgs:\n    text (str): A piece of text.\n    style (:class:`~rich.style.Style`, optional): An optional style to apply to the text.\n    control (Tuple[ControlCode], optional): Optional sequence of control codes.\n\nAttributes:\n    cell_length (int): The cell length of this Segment.",
      "methods": [
        {
          "name": "cell_length",
          "docstring": "The number of terminal cells required to display self.text.\n\nReturns:\n    int: A number of cells."
        },
        {
          "name": "is_control",
          "docstring": "Check if the segment contains control codes."
        },
        {
          "name": "split_cells",
          "docstring": "Split segment in to two segments at the specified column.\n\nIf the cut point falls in the middle of a 2-cell wide character then it is replaced\nby two spaces, to preserve the display width of the parent segment.\n\nArgs:\n    cut (int): Offset within the segment to cut.\n\nReturns:\n    Tuple[Segment, Segment]: Two segments."
        },
        {
          "name": "line",
          "docstring": "Make a new line segment."
        },
        {
          "name": "apply_style",
          "docstring": "Apply style(s) to an iterable of segments.\n\nReturns an iterable of segments where the style is replaced by ``style + segment.style + post_style``.\n\nArgs:\n    segments (Iterable[Segment]): Segments to process.\n    style (Style, optional): Base style. Defaults to None.\n    post_style (Style, optional): Style to apply on top of segment style. Defaults to None.\n\nReturns:\n    Iterable[Segments]: A new iterable of segments (possibly the same iterable)."
        },
        {
          "name": "filter_control",
          "docstring": "Filter segments by ``is_control`` attribute.\n\nArgs:\n    segments (Iterable[Segment]): An iterable of Segment instances.\n    is_control (bool, optional): is_control flag to match in search.\n\nReturns:\n    Iterable[Segment]: And iterable of Segment instances."
        },
        {
          "name": "split_lines",
          "docstring": "Split a sequence of segments in to a list of lines.\n\nArgs:\n    segments (Iterable[Segment]): Segments potentially containing line feeds.\n\nYields:\n    Iterable[List[Segment]]: Iterable of segment lists, one per line."
        },
        {
          "name": "split_and_crop_lines",
          "docstring": "Split segments in to lines, and crop lines greater than a given length.\n\nArgs:\n    segments (Iterable[Segment]): An iterable of segments, probably\n        generated from console.render.\n    length (int): Desired line length.\n    style (Style, optional): Style to use for any padding.\n    pad (bool): Enable padding of lines that are less than `length`.\n\nReturns:\n    Iterable[List[Segment]]: An iterable of lines of segments."
        },
        {
          "name": "adjust_line_length",
          "docstring": "Adjust a line to a given width (cropping or padding as required).\n\nArgs:\n    segments (Iterable[Segment]): A list of segments in a single line.\n    length (int): The desired width of the line.\n    style (Style, optional): The style of padding if used (space on the end). Defaults to None.\n    pad (bool, optional): Pad lines with spaces if they are shorter than `length`. Defaults to True.\n\nReturns:\n    List[Segment]: A line of segments with the desired length."
        },
        {
          "name": "get_line_length",
          "docstring": "Get the length of list of segments.\n\nArgs:\n    line (List[Segment]): A line encoded as a list of Segments (assumes no '\\\\n' characters),\n\nReturns:\n    int: The length of the line."
        },
        {
          "name": "get_shape",
          "docstring": "Get the shape (enclosing rectangle) of a list of lines.\n\nArgs:\n    lines (List[List[Segment]]): A list of lines (no '\\\\n' characters).\n\nReturns:\n    Tuple[int, int]: Width and height in characters."
        },
        {
          "name": "set_shape",
          "docstring": "Set the shape of a list of lines (enclosing rectangle).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style, optional): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        "
        },
        {
          "name": "align_top",
          "docstring": "Aligns lines to top (adds extra lines to bottom as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        "
        },
        {
          "name": "align_bottom",
          "docstring": "Aligns render to bottom (adds extra lines above as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added. Defaults to None.\n            new_lines (bool, optional): Padded lines should include \"\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        "
        },
        {
          "name": "align_middle",
          "docstring": "Aligns lines to middle (adds extra lines to above and below as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        "
        },
        {
          "name": "simplify",
          "docstring": "Simplify an iterable of segments by combining contiguous segments with the same style.\n\nArgs:\n    segments (Iterable[Segment]): An iterable of segments.\n\nReturns:\n    Iterable[Segment]: A possibly smaller iterable of segments that will render the same way."
        },
        {
          "name": "strip_links",
          "docstring": "Remove all links from an iterable of styles.\n\nArgs:\n    segments (Iterable[Segment]): An iterable segments.\n\nYields:\n    Segment: Segments with link removed."
        },
        {
          "name": "strip_styles",
          "docstring": "Remove all styles from an iterable of segments.\n\nArgs:\n    segments (Iterable[Segment]): An iterable segments.\n\nYields:\n    Segment: Segments with styles replace with None"
        },
        {
          "name": "remove_color",
          "docstring": "Remove all color from an iterable of segments.\n\nArgs:\n    segments (Iterable[Segment]): An iterable segments.\n\nYields:\n    Segment: Segments with colorless style."
        },
        {
          "name": "divide",
          "docstring": "Divides an iterable of segments in to portions.\n\nArgs:\n    cuts (Iterable[int]): Cell positions where to divide.\n\nYields:\n    [Iterable[List[Segment]]]: An iterable of Segments in List."
        }
      ]
    },
    {
      "name": "Segments",
      "docstring": "A simple renderable to render an iterable of segments. This class may be useful if\nyou want to print segments outside of a __rich_console__ method.\n\nArgs:\n    segments (Iterable[Segment]): An iterable of segments.\n    new_lines (bool, optional): Add new lines between segments. Defaults to False.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "SegmentLines",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": "A simple renderable containing a number of lines of segments. May be used as an intermediate\nin rendering process.\n\nArgs:\n    lines (Iterable[List[Segment]]): Lists of segments forming lines.\n    new_lines (bool, optional): Insert new lines after each line. Defaults to False."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "cell_length",
      "docstring": "The number of terminal cells required to display self.text.\n\nReturns:\n    int: A number of cells."
    },
    {
      "name": "is_control",
      "docstring": "Check if the segment contains control codes."
    },
    {
      "name": "split_cells",
      "docstring": "Split segment in to two segments at the specified column.\n\nIf the cut point falls in the middle of a 2-cell wide character then it is replaced\nby two spaces, to preserve the display width of the parent segment.\n\nArgs:\n    cut (int): Offset within the segment to cut.\n\nReturns:\n    Tuple[Segment, Segment]: Two segments."
    },
    {
      "name": "line",
      "docstring": "Make a new line segment."
    },
    {
      "name": "apply_style",
      "docstring": "Apply style(s) to an iterable of segments.\n\nReturns an iterable of segments where the style is replaced by ``style + segment.style + post_style``.\n\nArgs:\n    segments (Iterable[Segment]): Segments to process.\n    style (Style, optional): Base style. Defaults to None.\n    post_style (Style, optional): Style to apply on top of segment style. Defaults to None.\n\nReturns:\n    Iterable[Segments]: A new iterable of segments (possibly the same iterable)."
    },
    {
      "name": "filter_control",
      "docstring": "Filter segments by ``is_control`` attribute.\n\nArgs:\n    segments (Iterable[Segment]): An iterable of Segment instances.\n    is_control (bool, optional): is_control flag to match in search.\n\nReturns:\n    Iterable[Segment]: And iterable of Segment instances."
    },
    {
      "name": "split_lines",
      "docstring": "Split a sequence of segments in to a list of lines.\n\nArgs:\n    segments (Iterable[Segment]): Segments potentially containing line feeds.\n\nYields:\n    Iterable[List[Segment]]: Iterable of segment lists, one per line."
    },
    {
      "name": "split_and_crop_lines",
      "docstring": "Split segments in to lines, and crop lines greater than a given length.\n\nArgs:\n    segments (Iterable[Segment]): An iterable of segments, probably\n        generated from console.render.\n    length (int): Desired line length.\n    style (Style, optional): Style to use for any padding.\n    pad (bool): Enable padding of lines that are less than `length`.\n\nReturns:\n    Iterable[List[Segment]]: An iterable of lines of segments."
    },
    {
      "name": "adjust_line_length",
      "docstring": "Adjust a line to a given width (cropping or padding as required).\n\nArgs:\n    segments (Iterable[Segment]): A list of segments in a single line.\n    length (int): The desired width of the line.\n    style (Style, optional): The style of padding if used (space on the end). Defaults to None.\n    pad (bool, optional): Pad lines with spaces if they are shorter than `length`. Defaults to True.\n\nReturns:\n    List[Segment]: A line of segments with the desired length."
    },
    {
      "name": "get_line_length",
      "docstring": "Get the length of list of segments.\n\nArgs:\n    line (List[Segment]): A line encoded as a list of Segments (assumes no '\\\\n' characters),\n\nReturns:\n    int: The length of the line."
    },
    {
      "name": "get_shape",
      "docstring": "Get the shape (enclosing rectangle) of a list of lines.\n\nArgs:\n    lines (List[List[Segment]]): A list of lines (no '\\\\n' characters).\n\nReturns:\n    Tuple[int, int]: Width and height in characters."
    },
    {
      "name": "set_shape",
      "docstring": "Set the shape of a list of lines (enclosing rectangle).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style, optional): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        "
    },
    {
      "name": "align_top",
      "docstring": "Aligns lines to top (adds extra lines to bottom as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        "
    },
    {
      "name": "align_bottom",
      "docstring": "Aligns render to bottom (adds extra lines above as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added. Defaults to None.\n            new_lines (bool, optional): Padded lines should include \"\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        "
    },
    {
      "name": "align_middle",
      "docstring": "Aligns lines to middle (adds extra lines to above and below as required).\n\n        Args:\n            lines (List[List[Segment]]): A list of lines.\n            width (int): Desired width.\n            height (int, optional): Desired height or None for no change.\n            style (Style): Style of any padding added.\n            new_lines (bool, optional): Padded lines should include \"\n\". Defaults to False.\n\n        Returns:\n            List[List[Segment]]: New list of lines.\n        "
    },
    {
      "name": "simplify",
      "docstring": "Simplify an iterable of segments by combining contiguous segments with the same style.\n\nArgs:\n    segments (Iterable[Segment]): An iterable of segments.\n\nReturns:\n    Iterable[Segment]: A possibly smaller iterable of segments that will render the same way."
    },
    {
      "name": "strip_links",
      "docstring": "Remove all links from an iterable of styles.\n\nArgs:\n    segments (Iterable[Segment]): An iterable segments.\n\nYields:\n    Segment: Segments with link removed."
    },
    {
      "name": "strip_styles",
      "docstring": "Remove all styles from an iterable of segments.\n\nArgs:\n    segments (Iterable[Segment]): An iterable segments.\n\nYields:\n    Segment: Segments with styles replace with None"
    },
    {
      "name": "remove_color",
      "docstring": "Remove all color from an iterable of segments.\n\nArgs:\n    segments (Iterable[Segment]): An iterable segments.\n\nYields:\n    Segment: Segments with colorless style."
    },
    {
      "name": "divide",
      "docstring": "Divides an iterable of segments in to portions.\n\nArgs:\n    cuts (Iterable[int]): Cell positions where to divide.\n\nYields:\n    [Iterable[List[Segment]]]: An iterable of Segments in List."
    }
  ],
  "innovations": []
}