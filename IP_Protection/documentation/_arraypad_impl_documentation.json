{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\lib\\_arraypad_impl.py",
  "classes": [],
  "functions": [
    {
      "name": "pad",
      "docstring": "Pad an array.\n\nParameters\n----------\narray : array_like of rank N\n    The array to pad.\npad_width : {sequence, array_like, int}\n    Number of values padded to the edges of each axis.\n    ``((before_1, after_1), ... (before_N, after_N))`` unique pad widths\n    for each axis.\n    ``(before, after)`` or ``((before, after),)`` yields same before\n    and after pad for each axis.\n    ``(pad,)`` or ``int`` is a shortcut for before = after = pad width\n    for all axes.\nmode : str or function, optional\n    One of the following string values or a user supplied function.\n\n    'constant' (default)\n        Pads with a constant value.\n    'edge'\n        Pads with the edge values of array.\n    'linear_ramp'\n        Pads with the linear ramp between end_value and the\n        array edge value.\n    'maximum'\n        Pads with the maximum value of all or part of the\n        vector along each axis.\n    'mean'\n        Pads with the mean value of all or part of the\n        vector along each axis.\n    'median'\n        Pads with the median value of all or part of the\n        vector along each axis.\n    'minimum'\n        Pads with the minimum value of all or part of the\n        vector along each axis.\n    'reflect'\n        Pads with the reflection of the vector mirrored on\n        the first and last values of the vector along each\n        axis.\n    'symmetric'\n        Pads with the reflection of the vector mirrored\n        along the edge of the array.\n    'wrap'\n        Pads with the wrap of the vector along the axis.\n        The first values are used to pad the end and the\n        end values are used to pad the beginning.\n    'empty'\n        Pads with undefined values.\n\n    <function>\n        Padding function, see Notes.\nstat_length : sequence or int, optional\n    Used in 'maximum', 'mean', 'median', and 'minimum'.  Number of\n    values at edge of each axis used to calculate the statistic value.\n\n    ``((before_1, after_1), ... (before_N, after_N))`` unique statistic\n    lengths for each axis.\n\n    ``(before, after)`` or ``((before, after),)`` yields same before\n    and after statistic lengths for each axis.\n\n    ``(stat_length,)`` or ``int`` is a shortcut for\n    ``before = after = statistic`` length for all axes.\n\n    Default is ``None``, to use the entire axis.\nconstant_values : sequence or scalar, optional\n    Used in 'constant'.  The values to set the padded values for each\n    axis.\n\n    ``((before_1, after_1), ... (before_N, after_N))`` unique pad constants\n    for each axis.\n\n    ``(before, after)`` or ``((before, after),)`` yields same before\n    and after constants for each axis.\n\n    ``(constant,)`` or ``constant`` is a shortcut for\n    ``before = after = constant`` for all axes.\n\n    Default is 0.\nend_values : sequence or scalar, optional\n    Used in 'linear_ramp'.  The values used for the ending value of the\n    linear_ramp and that will form the edge of the padded array.\n\n    ``((before_1, after_1), ... (before_N, after_N))`` unique end values\n    for each axis.\n\n    ``(before, after)`` or ``((before, after),)`` yields same before\n    and after end values for each axis.\n\n    ``(constant,)`` or ``constant`` is a shortcut for\n    ``before = after = constant`` for all axes.\n\n    Default is 0.\nreflect_type : {'even', 'odd'}, optional\n    Used in 'reflect', and 'symmetric'.  The 'even' style is the\n    default with an unaltered reflection around the edge value.  For\n    the 'odd' style, the extended part of the array is created by\n    subtracting the reflected values from two times the edge value.\n\nReturns\n-------\npad : ndarray\n    Padded array of rank equal to `array` with shape increased\n    according to `pad_width`.\n\nNotes\n-----\nFor an array with rank greater than 1, some of the padding of later\naxes is calculated from padding of previous axes.  This is easiest to\nthink about with a rank 2 array where the corners of the padded array\nare calculated by using padded values from the first axis.\n\nThe padding function, if used, should modify a rank 1 array in-place. It\nhas the following signature::\n\n    padding_func(vector, iaxis_pad_width, iaxis, kwargs)\n\nwhere\n\nvector : ndarray\n    A rank 1 array already padded with zeros.  Padded values are\n    vector[:iaxis_pad_width[0]] and vector[-iaxis_pad_width[1]:].\niaxis_pad_width : tuple\n    A 2-tuple of ints, iaxis_pad_width[0] represents the number of\n    values padded at the beginning of vector where\n    iaxis_pad_width[1] represents the number of values padded at\n    the end of vector.\niaxis : int\n    The axis currently being calculated.\nkwargs : dict\n    Any keyword arguments the function requires.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = [1, 2, 3, 4, 5]\n>>> np.pad(a, (2, 3), 'constant', constant_values=(4, 6))\narray([4, 4, 1, ..., 6, 6, 6])\n\n>>> np.pad(a, (2, 3), 'edge')\narray([1, 1, 1, ..., 5, 5, 5])\n\n>>> np.pad(a, (2, 3), 'linear_ramp', end_values=(5, -4))\narray([ 5,  3,  1,  2,  3,  4,  5,  2, -1, -4])\n\n>>> np.pad(a, (2,), 'maximum')\narray([5, 5, 1, 2, 3, 4, 5, 5, 5])\n\n>>> np.pad(a, (2,), 'mean')\narray([3, 3, 1, 2, 3, 4, 5, 3, 3])\n\n>>> np.pad(a, (2,), 'median')\narray([3, 3, 1, 2, 3, 4, 5, 3, 3])\n\n>>> a = [[1, 2], [3, 4]]\n>>> np.pad(a, ((3, 2), (2, 3)), 'minimum')\narray([[1, 1, 1, 2, 1, 1, 1],\n       [1, 1, 1, 2, 1, 1, 1],\n       [1, 1, 1, 2, 1, 1, 1],\n       [1, 1, 1, 2, 1, 1, 1],\n       [3, 3, 3, 4, 3, 3, 3],\n       [1, 1, 1, 2, 1, 1, 1],\n       [1, 1, 1, 2, 1, 1, 1]])\n\n>>> a = [1, 2, 3, 4, 5]\n>>> np.pad(a, (2, 3), 'reflect')\narray([3, 2, 1, 2, 3, 4, 5, 4, 3, 2])\n\n>>> np.pad(a, (2, 3), 'reflect', reflect_type='odd')\narray([-1,  0,  1,  2,  3,  4,  5,  6,  7,  8])\n\n>>> np.pad(a, (2, 3), 'symmetric')\narray([2, 1, 1, 2, 3, 4, 5, 5, 4, 3])\n\n>>> np.pad(a, (2, 3), 'symmetric', reflect_type='odd')\narray([0, 1, 1, 2, 3, 4, 5, 5, 6, 7])\n\n>>> np.pad(a, (2, 3), 'wrap')\narray([4, 5, 1, 2, 3, 4, 5, 1, 2, 3])\n\n>>> def pad_with(vector, pad_width, iaxis, kwargs):\n...     pad_value = kwargs.get('padder', 10)\n...     vector[:pad_width[0]] = pad_value\n...     vector[-pad_width[1]:] = pad_value\n>>> a = np.arange(6)\n>>> a = a.reshape((2, 3))\n>>> np.pad(a, 2, pad_with)\narray([[10, 10, 10, 10, 10, 10, 10],\n       [10, 10, 10, 10, 10, 10, 10],\n       [10, 10,  0,  1,  2, 10, 10],\n       [10, 10,  3,  4,  5, 10, 10],\n       [10, 10, 10, 10, 10, 10, 10],\n       [10, 10, 10, 10, 10, 10, 10]])\n>>> np.pad(a, 2, pad_with, padder=100)\narray([[100, 100, 100, 100, 100, 100, 100],\n       [100, 100, 100, 100, 100, 100, 100],\n       [100, 100,   0,   1,   2, 100, 100],\n       [100, 100,   3,   4,   5, 100, 100],\n       [100, 100, 100, 100, 100, 100, 100],\n       [100, 100, 100, 100, 100, 100, 100]])"
    }
  ],
  "innovations": [
    {
      "type": "potential_innovation",
      "marker": "optimization",
      "context": "        x = np.round(x).astype(np.intp, copy=False)\n\n    if x.ndim < 3:\n        # Optimization: Possibly use faster paths for cases where `x` has\n        # only 1 or 2 elements. `np.broadcast_to` could handle these as well\n        # but is currently slower\n"
    }
  ]
}