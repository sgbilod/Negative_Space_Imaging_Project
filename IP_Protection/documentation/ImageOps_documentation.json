{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\PIL\\ImageOps.py",
  "classes": [
    {
      "name": "SupportsGetMesh",
      "docstring": "An object that supports the ``getmesh`` method, taking an image as an\nargument, and returning a list of tuples. Each tuple contains two tuples,\nthe source box as a tuple of 4 integers, and a tuple of 8 integers for the\nfinal quadrilateral, in order of top left, bottom left, bottom right, top\nright.",
      "methods": [
        {
          "name": "getmesh",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "autocontrast",
      "docstring": "Maximize (normalize) image contrast. This function calculates a\nhistogram of the input image (or mask region), removes ``cutoff`` percent of the\nlightest and darkest pixels from the histogram, and remaps the image\nso that the darkest pixel becomes black (0), and the lightest\nbecomes white (255).\n\n:param image: The image to process.\n:param cutoff: The percent to cut off from the histogram on the low and\n               high ends. Either a tuple of (low, high), or a single\n               number for both.\n:param ignore: The background pixel value (use None for no background).\n:param mask: Histogram used in contrast operation is computed using pixels\n             within the mask. If no mask is given the entire image is used\n             for histogram computation.\n:param preserve_tone: Preserve image tone in Photoshop-like style autocontrast.\n\n                      .. versionadded:: 8.2.0\n\n:return: An image."
    },
    {
      "name": "colorize",
      "docstring": "Colorize grayscale image.\nThis function calculates a color wedge which maps all black pixels in\nthe source image to the first color and all white pixels to the\nsecond color. If ``mid`` is specified, it uses three-color mapping.\nThe ``black`` and ``white`` arguments should be RGB tuples or color names;\noptionally you can use three-color mapping by also specifying ``mid``.\nMapping positions for any of the colors can be specified\n(e.g. ``blackpoint``), where these parameters are the integer\nvalue corresponding to where the corresponding color should be mapped.\nThese parameters must have logical order, such that\n``blackpoint <= midpoint <= whitepoint`` (if ``mid`` is specified).\n\n:param image: The image to colorize.\n:param black: The color to use for black input pixels.\n:param white: The color to use for white input pixels.\n:param mid: The color to use for midtone input pixels.\n:param blackpoint: an int value [0, 255] for the black mapping.\n:param whitepoint: an int value [0, 255] for the white mapping.\n:param midpoint: an int value [0, 255] for the midtone mapping.\n:return: An image."
    },
    {
      "name": "contain",
      "docstring": "Returns a resized version of the image, set to the maximum width and height\nwithin the requested size, while maintaining the original aspect ratio.\n\n:param image: The image to resize.\n:param size: The requested output size in pixels, given as a\n             (width, height) tuple.\n:param method: Resampling method to use. Default is\n               :py:attr:`~PIL.Image.Resampling.BICUBIC`.\n               See :ref:`concept-filters`.\n:return: An image."
    },
    {
      "name": "cover",
      "docstring": "Returns a resized version of the image, so that the requested size is\ncovered, while maintaining the original aspect ratio.\n\n:param image: The image to resize.\n:param size: The requested output size in pixels, given as a\n             (width, height) tuple.\n:param method: Resampling method to use. Default is\n               :py:attr:`~PIL.Image.Resampling.BICUBIC`.\n               See :ref:`concept-filters`.\n:return: An image."
    },
    {
      "name": "pad",
      "docstring": "Returns a resized and padded version of the image, expanded to fill the\nrequested aspect ratio and size.\n\n:param image: The image to resize and crop.\n:param size: The requested output size in pixels, given as a\n             (width, height) tuple.\n:param method: Resampling method to use. Default is\n               :py:attr:`~PIL.Image.Resampling.BICUBIC`.\n               See :ref:`concept-filters`.\n:param color: The background color of the padded image.\n:param centering: Control the position of the original image within the\n                  padded version.\n\n                      (0.5, 0.5) will keep the image centered\n                      (0, 0) will keep the image aligned to the top left\n                      (1, 1) will keep the image aligned to the bottom\n                      right\n:return: An image."
    },
    {
      "name": "crop",
      "docstring": "Remove border from image.  The same amount of pixels are removed\nfrom all four sides.  This function works on all image modes.\n\n.. seealso:: :py:meth:`~PIL.Image.Image.crop`\n\n:param image: The image to crop.\n:param border: The number of pixels to remove.\n:return: An image."
    },
    {
      "name": "scale",
      "docstring": "Returns a rescaled image by a specific factor given in parameter.\nA factor greater than 1 expands the image, between 0 and 1 contracts the\nimage.\n\n:param image: The image to rescale.\n:param factor: The expansion factor, as a float.\n:param resample: Resampling method to use. Default is\n                 :py:attr:`~PIL.Image.Resampling.BICUBIC`.\n                 See :ref:`concept-filters`.\n:returns: An :py:class:`~PIL.Image.Image` object."
    },
    {
      "name": "deform",
      "docstring": "Deform the image.\n\n:param image: The image to deform.\n:param deformer: A deformer object.  Any object that implements a\n                ``getmesh`` method can be used.\n:param resample: An optional resampling filter. Same values possible as\n   in the PIL.Image.transform function.\n:return: An image."
    },
    {
      "name": "equalize",
      "docstring": "Equalize the image histogram. This function applies a non-linear\nmapping to the input image, in order to create a uniform\ndistribution of grayscale values in the output image.\n\n:param image: The image to equalize.\n:param mask: An optional mask.  If given, only the pixels selected by\n             the mask are included in the analysis.\n:return: An image."
    },
    {
      "name": "expand",
      "docstring": "Add border to the image\n\n:param image: The image to expand.\n:param border: Border width, in pixels.\n:param fill: Pixel fill value (a color value).  Default is 0 (black).\n:return: An image."
    },
    {
      "name": "fit",
      "docstring": "Returns a resized and cropped version of the image, cropped to the\nrequested aspect ratio and size.\n\nThis function was contributed by Kevin Cazabon.\n\n:param image: The image to resize and crop.\n:param size: The requested output size in pixels, given as a\n             (width, height) tuple.\n:param method: Resampling method to use. Default is\n               :py:attr:`~PIL.Image.Resampling.BICUBIC`.\n               See :ref:`concept-filters`.\n:param bleed: Remove a border around the outside of the image from all\n              four edges. The value is a decimal percentage (use 0.01 for\n              one percent). The default value is 0 (no border).\n              Cannot be greater than or equal to 0.5.\n:param centering: Control the cropping position.  Use (0.5, 0.5) for\n                  center cropping (e.g. if cropping the width, take 50% off\n                  of the left side, and therefore 50% off the right side).\n                  (0.0, 0.0) will crop from the top left corner (i.e. if\n                  cropping the width, take all of the crop off of the right\n                  side, and if cropping the height, take all of it off the\n                  bottom).  (1.0, 0.0) will crop from the bottom left\n                  corner, etc. (i.e. if cropping the width, take all of the\n                  crop off the left side, and if cropping the height take\n                  none from the top, and therefore all off the bottom).\n:return: An image."
    },
    {
      "name": "flip",
      "docstring": "Flip the image vertically (top to bottom).\n\n:param image: The image to flip.\n:return: An image."
    },
    {
      "name": "grayscale",
      "docstring": "Convert the image to grayscale.\n\n:param image: The image to convert.\n:return: An image."
    },
    {
      "name": "invert",
      "docstring": "Invert (negate) the image.\n\n:param image: The image to invert.\n:return: An image."
    },
    {
      "name": "mirror",
      "docstring": "Flip image horizontally (left to right).\n\n:param image: The image to mirror.\n:return: An image."
    },
    {
      "name": "posterize",
      "docstring": "Reduce the number of bits for each color channel.\n\n:param image: The image to posterize.\n:param bits: The number of bits to keep for each channel (1-8).\n:return: An image."
    },
    {
      "name": "solarize",
      "docstring": "Invert all pixel values above a threshold.\n\n:param image: The image to solarize.\n:param threshold: All pixels above this grayscale level are inverted.\n:return: An image."
    },
    {
      "name": "exif_transpose",
      "docstring": null
    },
    {
      "name": "exif_transpose",
      "docstring": null
    },
    {
      "name": "exif_transpose",
      "docstring": "If an image has an EXIF Orientation tag, other than 1, transpose the image\naccordingly, and remove the orientation data.\n\n:param image: The image to transpose.\n:param in_place: Boolean. Keyword-only argument.\n    If ``True``, the original image is modified in-place, and ``None`` is returned.\n    If ``False`` (default), a new :py:class:`~PIL.Image.Image` object is returned\n    with the transposition applied. If there is no transposition, a copy of the\n    image will be returned."
    },
    {
      "name": "getmesh",
      "docstring": null
    }
  ],
  "innovations": []
}