{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\axes\\_axes.py",
  "classes": [
    {
      "name": "Axes",
      "docstring": "An Axes object encapsulates all the elements of an individual (sub-)plot in\na figure.\n\nIt contains most of the (sub-)plot elements: `~.axis.Axis`,\n`~.axis.Tick`, `~.lines.Line2D`, `~.text.Text`, `~.patches.Polygon`, etc.,\nand sets the coordinate system.\n\nLike all visible elements in a figure, Axes is an `.Artist` subclass.\n\nThe `Axes` instance supports callbacks through a callbacks attribute which\nis a `~.cbook.CallbackRegistry` instance.  The events you can connect to\nare 'xlim_changed' and 'ylim_changed' and the callback will be called with\nfunc(*ax*) where *ax* is the `Axes` instance.\n\n.. note::\n\n    As a user, you do not instantiate Axes directly, but use Axes creation\n    methods instead; e.g. from `.pyplot` or `.Figure`:\n    `~.pyplot.subplots`, `~.pyplot.subplot_mosaic` or `.Figure.add_axes`.",
      "methods": [
        {
          "name": "get_title",
          "docstring": "Get an Axes title.\n\nGet one of the three available Axes titles. The available titles\nare positioned above the Axes in the center, flush with the left\nedge, and flush with the right edge.\n\nParameters\n----------\nloc : {'center', 'left', 'right'}, str, default: 'center'\n    Which title to return.\n\nReturns\n-------\nstr\n    The title text string."
        },
        {
          "name": "set_title",
          "docstring": "Set a title for the Axes.\n\nSet one of the three available Axes titles. The available titles\nare positioned above the Axes in the center, flush with the left\nedge, and flush with the right edge.\n\nParameters\n----------\nlabel : str\n    Text to use for the title\n\nfontdict : dict\n\n    .. admonition:: Discouraged\n\n       The use of *fontdict* is discouraged. Parameters should be passed as\n       individual keyword arguments or using dictionary-unpacking\n       ``set_title(..., **fontdict)``.\n\n    A dictionary controlling the appearance of the title text,\n    the default *fontdict* is::\n\n       {'fontsize': rcParams['axes.titlesize'],\n        'fontweight': rcParams['axes.titleweight'],\n        'color': rcParams['axes.titlecolor'],\n        'verticalalignment': 'baseline',\n        'horizontalalignment': loc}\n\nloc : {'center', 'left', 'right'}, default: :rc:`axes.titlelocation`\n    Which title to set.\n\ny : float, default: :rc:`axes.titley`\n    Vertical Axes location for the title (1.0 is the top).  If\n    None (the default) and :rc:`axes.titley` is also None, y is\n    determined automatically to avoid decorators on the Axes.\n\npad : float, default: :rc:`axes.titlepad`\n    The offset of the title from the top of the Axes, in points.\n\nReturns\n-------\n`.Text`\n    The matplotlib text instance representing the title\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.text.Text` properties\n    Other keyword arguments are text properties, see `.Text` for a list\n    of valid text properties."
        },
        {
          "name": "get_legend_handles_labels",
          "docstring": "Return handles and labels for legend\n\n``ax.legend()`` is equivalent to ::\n\n  h, l = ax.get_legend_handles_labels()\n  ax.legend(h, l)"
        },
        {
          "name": "legend",
          "docstring": "Place a legend on the Axes.\n\nCall signatures::\n\n    legend()\n    legend(handles, labels)\n    legend(handles=handles)\n    legend(labels)\n\nThe call signatures correspond to the following different ways to use\nthis method:\n\n**1. Automatic detection of elements to be shown in the legend**\n\nThe elements to be added to the legend are automatically determined,\nwhen you do not pass in any extra arguments.\n\nIn this case, the labels are taken from the artist. You can specify\nthem either at artist creation or by calling the\n:meth:`~.Artist.set_label` method on the artist::\n\n    ax.plot([1, 2, 3], label='Inline label')\n    ax.legend()\n\nor::\n\n    line, = ax.plot([1, 2, 3])\n    line.set_label('Label via method')\n    ax.legend()\n\n.. note::\n    Specific artists can be excluded from the automatic legend element\n    selection by using a label starting with an underscore, \"_\".\n    A string starting with an underscore is the default label for all\n    artists, so calling `.Axes.legend` without any arguments and\n    without setting the labels manually will result in a ``UserWarning``\n    and an empty legend being drawn.\n\n\n**2. Explicitly listing the artists and labels in the legend**\n\nFor full control of which artists have a legend entry, it is possible\nto pass an iterable of legend artists followed by an iterable of\nlegend labels respectively::\n\n    ax.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n\n\n**3. Explicitly listing the artists in the legend**\n\nThis is similar to 2, but the labels are taken from the artists'\nlabel properties. Example::\n\n    line1, = ax.plot([1, 2, 3], label='label1')\n    line2, = ax.plot([1, 2, 3], label='label2')\n    ax.legend(handles=[line1, line2])\n\n\n**4. Labeling existing plot elements**\n\n.. admonition:: Discouraged\n\n    This call signature is discouraged, because the relation between\n    plot elements and labels is only implicit by their order and can\n    easily be mixed up.\n\nTo make a legend for all artists on an Axes, call this function with\nan iterable of strings, one for each legend item. For example::\n\n    ax.plot([1, 2, 3])\n    ax.plot([5, 6, 7])\n    ax.legend(['First line', 'Second line'])\n\n\nParameters\n----------\nhandles : list of (`.Artist` or tuple of `.Artist`), optional\n    A list of Artists (lines, patches) to be added to the legend.\n    Use this together with *labels*, if you need full control on what\n    is shown in the legend and the automatic mechanism described above\n    is not sufficient.\n\n    The length of handles and labels should be the same in this\n    case. If they are not, they are truncated to the smaller length.\n\n    If an entry contains a tuple, then the legend handler for all Artists in the\n    tuple will be placed alongside a single label.\n\nlabels : list of str, optional\n    A list of labels to show next to the artists.\n    Use this together with *handles*, if you need full control on what\n    is shown in the legend and the automatic mechanism described above\n    is not sufficient.\n\nReturns\n-------\n`~matplotlib.legend.Legend`\n\nOther Parameters\n----------------\n%(_legend_kw_axes)s\n\nSee Also\n--------\n.Figure.legend\n\nNotes\n-----\nSome artists are not supported by this function.  See\n:ref:`legend_guide` for details.\n\nExamples\n--------\n.. plot:: gallery/text_labels_and_annotations/legend.py"
        },
        {
          "name": "inset_axes",
          "docstring": "Add a child inset Axes to this existing Axes.\n\n\nParameters\n----------\nbounds : [x0, y0, width, height]\n    Lower-left corner of inset Axes, and its width and height.\n\ntransform : `.Transform`\n    Defaults to `ax.transAxes`, i.e. the units of *rect* are in\n    Axes-relative coordinates.\n\nprojection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optional\n    The projection type of the inset `~.axes.Axes`. *str* is the name\n    of a custom projection, see `~matplotlib.projections`. The default\n    None results in a 'rectilinear' projection.\n\npolar : bool, default: False\n    If True, equivalent to projection='polar'.\n\naxes_class : subclass type of `~.axes.Axes`, optional\n    The `.axes.Axes` subclass that is instantiated.  This parameter\n    is incompatible with *projection* and *polar*.  See\n    :ref:`axisartist_users-guide-index` for examples.\n\nzorder : number\n    Defaults to 5 (same as `.Axes.legend`).  Adjust higher or lower\n    to change whether it is above or below data plotted on the\n    parent Axes.\n\n**kwargs\n    Other keyword arguments are passed on to the inset Axes class.\n\nReturns\n-------\nax\n    The created `~.axes.Axes` instance.\n\nExamples\n--------\nThis example makes two inset Axes, the first is in Axes-relative\ncoordinates, and the second in data-coordinates::\n\n    fig, ax = plt.subplots()\n    ax.plot(range(10))\n    axin1 = ax.inset_axes([0.8, 0.1, 0.15, 0.15])\n    axin2 = ax.inset_axes(\n            [5, 7, 2.3, 2.3], transform=ax.transData)"
        },
        {
          "name": "indicate_inset",
          "docstring": "Add an inset indicator to the Axes.  This is a rectangle on the plot\nat the position indicated by *bounds* that optionally has lines that\nconnect the rectangle to an inset Axes (`.Axes.inset_axes`).\n\nWarnings\n--------\nThis method is experimental as of 3.0, and the API may change.\n\nParameters\n----------\nbounds : [x0, y0, width, height], optional\n    Lower-left corner of rectangle to be marked, and its width\n    and height.  If not set, the bounds will be calculated from the\n    data limits of *inset_ax*, which must be supplied.\n\ninset_ax : `.Axes`, optional\n    An optional inset Axes to draw connecting lines to.  Two lines are\n    drawn connecting the indicator box to the inset Axes on corners\n    chosen so as to not overlap with the indicator box.\n\ntransform : `.Transform`\n    Transform for the rectangle coordinates. Defaults to\n    ``ax.transAxes``, i.e. the units of *rect* are in Axes-relative\n    coordinates.\n\nfacecolor : :mpltype:`color`, default: 'none'\n    Facecolor of the rectangle.\n\nedgecolor : :mpltype:`color`, default: '0.5'\n    Color of the rectangle and color of the connecting lines.\n\nalpha : float or None, default: 0.5\n    Transparency of the rectangle and connector lines.  If not\n    ``None``, this overrides any alpha value included in the\n    *facecolor* and *edgecolor* parameters.\n\nzorder : float, default: 4.99\n    Drawing order of the rectangle and connector lines.  The default,\n    4.99, is just below the default level of inset Axes.\n\n**kwargs\n    Other keyword arguments are passed on to the `.Rectangle` patch:\n\n    %(Rectangle:kwdoc)s\n\nReturns\n-------\ninset_indicator : `.inset.InsetIndicator`\n    An artist which contains\n\n    inset_indicator.rectangle : `.Rectangle`\n        The indicator frame.\n\n    inset_indicator.connectors : 4-tuple of `.patches.ConnectionPatch`\n        The four connector lines connecting to (lower_left, upper_left,\n        lower_right upper_right) corners of *inset_ax*. Two lines are\n        set with visibility to *False*,  but the user can set the\n        visibility to True if the automatic choice is not deemed correct.\n\n    .. versionchanged:: 3.10\n        Previously the rectangle and connectors tuple were returned."
        },
        {
          "name": "indicate_inset_zoom",
          "docstring": "Add an inset indicator rectangle to the Axes based on the axis\nlimits for an *inset_ax* and draw connectors between *inset_ax*\nand the rectangle.\n\nWarnings\n--------\nThis method is experimental as of 3.0, and the API may change.\n\nParameters\n----------\ninset_ax : `.Axes`\n    Inset Axes to draw connecting lines to.  Two lines are\n    drawn connecting the indicator box to the inset Axes on corners\n    chosen so as to not overlap with the indicator box.\n\n**kwargs\n    Other keyword arguments are passed on to `.Axes.indicate_inset`\n\nReturns\n-------\ninset_indicator : `.inset.InsetIndicator`\n    An artist which contains\n\n    inset_indicator.rectangle : `.Rectangle`\n        The indicator frame.\n\n    inset_indicator.connectors : 4-tuple of `.patches.ConnectionPatch`\n        The four connector lines connecting to (lower_left, upper_left,\n        lower_right upper_right) corners of *inset_ax*. Two lines are\n        set with visibility to *False*,  but the user can set the\n        visibility to True if the automatic choice is not deemed correct.\n\n    .. versionchanged:: 3.10\n        Previously the rectangle and connectors tuple were returned."
        },
        {
          "name": "secondary_xaxis",
          "docstring": "Add a second x-axis to this `~.axes.Axes`.\n\nFor example if we want to have a second scale for the data plotted on\nthe xaxis.\n\n%(_secax_docstring)s\n\nExamples\n--------\nThe main axis shows frequency, and the secondary axis shows period.\n\n.. plot::\n\n    fig, ax = plt.subplots()\n    ax.loglog(range(1, 360, 5), range(1, 360, 5))\n    ax.set_xlabel('frequency [Hz]')\n\n    def invert(x):\n        # 1/x with special treatment of x == 0\n        x = np.array(x).astype(float)\n        near_zero = np.isclose(x, 0)\n        x[near_zero] = np.inf\n        x[~near_zero] = 1 / x[~near_zero]\n        return x\n\n    # the inverse of 1/x is itself\n    secax = ax.secondary_xaxis('top', functions=(invert, invert))\n    secax.set_xlabel('Period [s]')\n    plt.show()\n\nTo add a secondary axis relative to your data, you can pass a transform\nto the new axis.\n\n.. plot::\n\n    fig, ax = plt.subplots()\n    ax.plot(range(0, 5), range(-1, 4))\n\n    # Pass 'ax.transData' as a transform to place the axis\n    # relative to your data at y=0\n    secax = ax.secondary_xaxis(0, transform=ax.transData)"
        },
        {
          "name": "secondary_yaxis",
          "docstring": "Add a second y-axis to this `~.axes.Axes`.\n\nFor example if we want to have a second scale for the data plotted on\nthe yaxis.\n\n%(_secax_docstring)s\n\nExamples\n--------\nAdd a secondary Axes that converts from radians to degrees\n\n.. plot::\n\n    fig, ax = plt.subplots()\n    ax.plot(range(1, 360, 5), range(1, 360, 5))\n    ax.set_ylabel('degrees')\n    secax = ax.secondary_yaxis('right', functions=(np.deg2rad,\n                                                   np.rad2deg))\n    secax.set_ylabel('radians')\n\nTo add a secondary axis relative to your data, you can pass a transform\nto the new axis.\n\n.. plot::\n\n    fig, ax = plt.subplots()\n    ax.plot(range(0, 5), range(-1, 4))\n\n    # Pass 'ax.transData' as a transform to place the axis\n    # relative to your data at x=3\n    secax = ax.secondary_yaxis(3, transform=ax.transData)"
        },
        {
          "name": "text",
          "docstring": "Add text to the Axes.\n\nAdd the text *s* to the Axes at location *x*, *y* in data coordinates,\nwith a default ``horizontalalignment`` on the ``left`` and\n``verticalalignment`` at the ``baseline``. See\n:doc:`/gallery/text_labels_and_annotations/text_alignment`.\n\nParameters\n----------\nx, y : float\n    The position to place the text. By default, this is in data\n    coordinates. The coordinate system can be changed using the\n    *transform* parameter.\n\ns : str\n    The text.\n\nfontdict : dict, default: None\n\n    .. admonition:: Discouraged\n\n       The use of *fontdict* is discouraged. Parameters should be passed as\n       individual keyword arguments or using dictionary-unpacking\n       ``text(..., **fontdict)``.\n\n    A dictionary to override the default text properties. If fontdict\n    is None, the defaults are determined by `.rcParams`.\n\nReturns\n-------\n`.Text`\n    The created `.Text` instance.\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.text.Text` properties.\n    Other miscellaneous text parameters.\n\n    %(Text:kwdoc)s\n\nExamples\n--------\nIndividual keyword arguments can be used to override any given\nparameter::\n\n    >>> text(x, y, s, fontsize=12)\n\nThe default transform specifies that text is in data coords,\nalternatively, you can specify text in axis coords ((0, 0) is\nlower-left and (1, 1) is upper-right).  The example below places\ntext in the center of the Axes::\n\n    >>> text(0.5, 0.5, 'matplotlib', horizontalalignment='center',\n    ...      verticalalignment='center', transform=ax.transAxes)\n\nYou can put a rectangular box around the text instance (e.g., to\nset a background color) by using the keyword *bbox*.  *bbox* is\na dictionary of `~matplotlib.patches.Rectangle`\nproperties.  For example::\n\n    >>> text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))"
        },
        {
          "name": "annotate",
          "docstring": null
        },
        {
          "name": "axhline",
          "docstring": "Add a horizontal line spanning the whole or fraction of the Axes.\n\nNote: If you want to set x-limits in data coordinates, use\n`~.Axes.hlines` instead.\n\nParameters\n----------\ny : float, default: 0\n    y position in :ref:`data coordinates <coordinate-systems>`.\n\nxmin : float, default: 0\n    The start x-position in :ref:`axes coordinates <coordinate-systems>`.\n    Should be between 0 and 1, 0 being the far left of the plot,\n    1 the far right of the plot.\n\nxmax : float, default: 1\n    The end x-position in :ref:`axes coordinates <coordinate-systems>`.\n    Should be between 0 and 1, 0 being the far left of the plot,\n    1 the far right of the plot.\n\nReturns\n-------\n`~matplotlib.lines.Line2D`\n    A `.Line2D` specified via two points ``(xmin, y)``, ``(xmax, y)``.\n    Its transform is set such that *x* is in\n    :ref:`axes coordinates <coordinate-systems>` and *y* is in\n    :ref:`data coordinates <coordinate-systems>`.\n\n    This is still a generic line and the horizontal character is only\n    realized through using identical *y* values for both points. Thus,\n    if you want to change the *y* value later, you have to provide two\n    values ``line.set_ydata([3, 3])``.\n\nOther Parameters\n----------------\n**kwargs\n    Valid keyword arguments are `.Line2D` properties, except for\n    'transform':\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nhlines : Add horizontal lines in data coordinates.\naxhspan : Add a horizontal span (rectangle) across the axis.\naxline : Add a line with an arbitrary slope.\n\nExamples\n--------\n* draw a thick red hline at 'y' = 0 that spans the xrange::\n\n    >>> axhline(linewidth=4, color='r')\n\n* draw a default hline at 'y' = 1 that spans the xrange::\n\n    >>> axhline(y=1)\n\n* draw a default hline at 'y' = .5 that spans the middle half of\n  the xrange::\n\n    >>> axhline(y=.5, xmin=0.25, xmax=0.75)"
        },
        {
          "name": "axvline",
          "docstring": "Add a vertical line spanning the whole or fraction of the Axes.\n\nNote: If you want to set y-limits in data coordinates, use\n`~.Axes.vlines` instead.\n\nParameters\n----------\nx : float, default: 0\n    x position in :ref:`data coordinates <coordinate-systems>`.\n\nymin : float, default: 0\n    The start y-position in :ref:`axes coordinates <coordinate-systems>`.\n    Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n    top of the plot.\n\nymax : float, default: 1\n    The end y-position in :ref:`axes coordinates <coordinate-systems>`.\n    Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n    top of the plot.\n\nReturns\n-------\n`~matplotlib.lines.Line2D`\n    A `.Line2D` specified via two points ``(x, ymin)``, ``(x, ymax)``.\n    Its transform is set such that *x* is in\n    :ref:`data coordinates <coordinate-systems>` and *y* is in\n    :ref:`axes coordinates <coordinate-systems>`.\n\n    This is still a generic line and the vertical character is only\n    realized through using identical *x* values for both points. Thus,\n    if you want to change the *x* value later, you have to provide two\n    values ``line.set_xdata([3, 3])``.\n\nOther Parameters\n----------------\n**kwargs\n    Valid keyword arguments are `.Line2D` properties, except for\n    'transform':\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nvlines : Add vertical lines in data coordinates.\naxvspan : Add a vertical span (rectangle) across the axis.\naxline : Add a line with an arbitrary slope.\n\nExamples\n--------\n* draw a thick red vline at *x* = 0 that spans the yrange::\n\n    >>> axvline(linewidth=4, color='r')\n\n* draw a default vline at *x* = 1 that spans the yrange::\n\n    >>> axvline(x=1)\n\n* draw a default vline at *x* = .5 that spans the middle half of\n  the yrange::\n\n    >>> axvline(x=.5, ymin=0.25, ymax=0.75)"
        },
        {
          "name": "axline",
          "docstring": "Add an infinitely long straight line.\n\nThe line can be defined either by two points *xy1* and *xy2*, or\nby one point *xy1* and a *slope*.\n\nThis draws a straight line \"on the screen\", regardless of the x and y\nscales, and is thus also suitable for drawing exponential decays in\nsemilog plots, power laws in loglog plots, etc. However, *slope*\nshould only be used with linear scales; It has no clear meaning for\nall other scales, and thus the behavior is undefined. Please specify\nthe line using the points *xy1*, *xy2* for non-linear scales.\n\nThe *transform* keyword argument only applies to the points *xy1*,\n*xy2*. The *slope* (if given) is always in data coordinates. This can\nbe used e.g. with ``ax.transAxes`` for drawing grid lines with a fixed\nslope.\n\nParameters\n----------\nxy1, xy2 : (float, float)\n    Points for the line to pass through.\n    Either *xy2* or *slope* has to be given.\nslope : float, optional\n    The slope of the line. Either *xy2* or *slope* has to be given.\n\nReturns\n-------\n`.AxLine`\n\nOther Parameters\n----------------\n**kwargs\n    Valid kwargs are `.Line2D` properties\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\naxhline : for horizontal lines\naxvline : for vertical lines\n\nExamples\n--------\nDraw a thick red line passing through (0, 0) and (1, 1)::\n\n    >>> axline((0, 0), (1, 1), linewidth=4, color='r')"
        },
        {
          "name": "axhspan",
          "docstring": "Add a horizontal span (rectangle) across the Axes.\n\nThe rectangle spans from *ymin* to *ymax* vertically, and, by default,\nthe whole x-axis horizontally.  The x-span can be set using *xmin*\n(default: 0) and *xmax* (default: 1) which are in axis units; e.g.\n``xmin = 0.5`` always refers to the middle of the x-axis regardless of\nthe limits set by `~.Axes.set_xlim`.\n\nParameters\n----------\nymin : float\n    Lower y-coordinate of the span, in data units.\nymax : float\n    Upper y-coordinate of the span, in data units.\nxmin : float, default: 0\n    Lower x-coordinate of the span, in x-axis (0-1) units.\nxmax : float, default: 1\n    Upper x-coordinate of the span, in x-axis (0-1) units.\n\nReturns\n-------\n`~matplotlib.patches.Rectangle`\n    Horizontal span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.patches.Rectangle` properties\n\n%(Rectangle:kwdoc)s\n\nSee Also\n--------\naxvspan : Add a vertical span across the Axes."
        },
        {
          "name": "axvspan",
          "docstring": "Add a vertical span (rectangle) across the Axes.\n\nThe rectangle spans from *xmin* to *xmax* horizontally, and, by\ndefault, the whole y-axis vertically.  The y-span can be set using\n*ymin* (default: 0) and *ymax* (default: 1) which are in axis units;\ne.g. ``ymin = 0.5`` always refers to the middle of the y-axis\nregardless of the limits set by `~.Axes.set_ylim`.\n\nParameters\n----------\nxmin : float\n    Lower x-coordinate of the span, in data units.\nxmax : float\n    Upper x-coordinate of the span, in data units.\nymin : float, default: 0\n    Lower y-coordinate of the span, in y-axis units (0-1).\nymax : float, default: 1\n    Upper y-coordinate of the span, in y-axis units (0-1).\n\nReturns\n-------\n`~matplotlib.patches.Rectangle`\n    Vertical span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.patches.Rectangle` properties\n\n%(Rectangle:kwdoc)s\n\nSee Also\n--------\naxhspan : Add a horizontal span across the Axes.\n\nExamples\n--------\nDraw a vertical, green, translucent rectangle from x = 1.25 to\nx = 1.55 that spans the yrange of the Axes.\n\n>>> axvspan(1.25, 1.55, facecolor='g', alpha=0.5)"
        },
        {
          "name": "hlines",
          "docstring": "Plot horizontal lines at each *y* from *xmin* to *xmax*.\n\nParameters\n----------\ny : float or array-like\n    y-indexes where to plot the lines.\n\nxmin, xmax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have the same length.\n\ncolors : :mpltype:`color` or list of color , default: :rc:`lines.color`\n\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, default: 'solid'\n\nlabel : str, default: ''\n\nReturns\n-------\n`~matplotlib.collections.LineCollection`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs :  `~matplotlib.collections.LineCollection` properties.\n\nSee Also\n--------\nvlines : vertical lines\naxhline : horizontal line across the Axes"
        },
        {
          "name": "vlines",
          "docstring": "Plot vertical lines at each *x* from *ymin* to *ymax*.\n\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\n\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have the same length.\n\ncolors : :mpltype:`color` or list of color, default: :rc:`lines.color`\n\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, default: 'solid'\n\nlabel : str, default: ''\n\nReturns\n-------\n`~matplotlib.collections.LineCollection`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs : `~matplotlib.collections.LineCollection` properties.\n\nSee Also\n--------\nhlines : horizontal lines\naxvline : vertical line across the Axes"
        },
        {
          "name": "eventplot",
          "docstring": "Plot identical parallel lines at the given positions.\n\nThis type of plot is commonly used in neuroscience for representing\nneural events, where it is usually called a spike raster, dot raster,\nor raster plot.\n\nHowever, it is useful in any situation where you wish to show the\ntiming or position of multiple sets of discrete events, such as the\narrival times of people to a business on each day of the month or the\ndate of hurricanes each year of the last century.\n\nParameters\n----------\npositions : array-like or list of array-like\n    A 1D array-like defines the positions of one sequence of events.\n\n    Multiple groups of events may be passed as a list of array-likes.\n    Each group can be styled independently by passing lists of values\n    to *lineoffsets*, *linelengths*, *linewidths*, *colors* and\n    *linestyles*.\n\n    Note that *positions* can be a 2D array, but in practice different\n    event groups usually have different counts so that one will use a\n    list of different-length arrays rather than a 2D array.\n\norientation : {'horizontal', 'vertical'}, default: 'horizontal'\n    The direction of the event sequence:\n\n    - 'horizontal': the events are arranged horizontally.\n      The indicator lines are vertical.\n    - 'vertical': the events are arranged vertically.\n      The indicator lines are horizontal.\n\nlineoffsets : float or array-like, default: 1\n    The offset of the center of the lines from the origin, in the\n    direction orthogonal to *orientation*.\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\nlinelengths : float or array-like, default: 1\n    The total height of the lines (i.e. the lines stretches from\n    ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\nlinewidths : float or array-like, default: :rc:`lines.linewidth`\n    The line width(s) of the event lines, in points.\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\ncolors : :mpltype:`color` or list of color, default: :rc:`lines.color`\n    The color(s) of the event lines.\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\nalpha : float or array-like, default: 1\n    The alpha blending value(s), between 0 (transparent) and 1\n    (opaque).\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\nlinestyles : str or tuple or list of such values, default: 'solid'\n    Default is 'solid'. Valid strings are ['solid', 'dashed',\n    'dashdot', 'dotted', '-', '--', '-.', ':']. Dash tuples\n    should be of the form::\n\n        (offset, onoffseq),\n\n    where *onoffseq* is an even length tuple of on and off ink\n    in points.\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Other keyword arguments are line collection properties.  See\n    `.LineCollection` for a list of the valid properties.\n\nReturns\n-------\nlist of `.EventCollection`\n    The `.EventCollection` that were added.\n\nNotes\n-----\nFor *linelengths*, *linewidths*, *colors*, *alpha* and *linestyles*, if\nonly a single value is given, that value is applied to all lines. If an\narray-like is given, it must have the same length as *positions*, and\neach value will be applied to the corresponding row of the array.\n\nExamples\n--------\n.. plot:: gallery/lines_bars_and_markers/eventplot_demo.py"
        },
        {
          "name": "plot",
          "docstring": "Plot y versus x as lines and/or markers.\n\nCall signatures::\n\n    plot([x], y, [fmt], *, data=None, **kwargs)\n    plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThe coordinates of the points or line nodes are given by *x*, *y*.\n\nThe optional parameter *fmt* is a convenient way for defining basic\nformatting like color, marker and linestyle. It's a shortcut string\nnotation described in the *Notes* section below.\n\n>>> plot(x, y)        # plot x and y using default line style and color\n>>> plot(x, y, 'bo')  # plot x and y using blue circle markers\n>>> plot(y)           # plot y using x as index array 0..N-1\n>>> plot(y, 'r+')     # ditto, but with red plusses\n\nYou can use `.Line2D` properties as keyword arguments for more\ncontrol on the appearance. Line properties and *fmt* can be mixed.\nThe following two calls yield identical results:\n\n>>> plot(x, y, 'go--', linewidth=2, markersize=12)\n>>> plot(x, y, color='green', marker='o', linestyle='dashed',\n...      linewidth=2, markersize=12)\n\nWhen conflicting with *fmt*, keyword arguments take precedence.\n\n\n**Plotting labelled data**\n\nThere's a convenient way for plotting objects with labelled data (i.e.\ndata that can be accessed by index ``obj['y']``). Instead of giving\nthe data in *x* and *y*, you can provide the object in the *data*\nparameter and just give the labels for *x* and *y*::\n\n>>> plot('xlabel', 'ylabel', data=obj)\n\nAll indexable objects are supported. This could e.g. be a `dict`, a\n`pandas.DataFrame` or a structured numpy array.\n\n\n**Plotting multiple sets of data**\n\nThere are various ways to plot multiple sets of data.\n\n- The most straight forward way is just to call `plot` multiple times.\n  Example:\n\n  >>> plot(x1, y1, 'bo')\n  >>> plot(x2, y2, 'go')\n\n- If *x* and/or *y* are 2D arrays, a separate data set will be drawn\n  for every column. If both *x* and *y* are 2D, they must have the\n  same shape. If only one of them is 2D with shape (N, m) the other\n  must have length N and will be used for every data set m.\n\n  Example:\n\n  >>> x = [1, 2, 3]\n  >>> y = np.array([[1, 2], [3, 4], [5, 6]])\n  >>> plot(x, y)\n\n  is equivalent to:\n\n  >>> for col in range(y.shape[1]):\n  ...     plot(x, y[:, col])\n\n- The third way is to specify multiple sets of *[x]*, *y*, *[fmt]*\n  groups::\n\n  >>> plot(x1, y1, 'g^', x2, y2, 'g-')\n\n  In this case, any additional keyword argument applies to all\n  datasets. Also, this syntax cannot be combined with the *data*\n  parameter.\n\nBy default, each line is assigned a different style specified by a\n'style cycle'. The *fmt* and line property parameters are only\nnecessary if you want explicit deviations from these defaults.\nAlternatively, you can also change the style cycle using\n:rc:`axes.prop_cycle`.\n\n\nParameters\n----------\nx, y : array-like or float\n    The horizontal / vertical coordinates of the data points.\n    *x* values are optional and default to ``range(len(y))``.\n\n    Commonly, these parameters are 1D arrays.\n\n    They can also be scalars, or two-dimensional (in that case, the\n    columns represent separate data sets).\n\n    These arguments cannot be passed as keywords.\n\nfmt : str, optional\n    A format string, e.g. 'ro' for red circles. See the *Notes*\n    section for a full description of the format strings.\n\n    Format strings are just an abbreviation for quickly setting\n    basic line properties. All of these and more can also be\n    controlled by keyword arguments.\n\n    This argument cannot be passed as keyword.\n\ndata : indexable object, optional\n    An object with labelled data. If given, provide the label names to\n    plot in *x* and *y*.\n\n    .. note::\n        Technically there's a slight ambiguity in calls where the\n        second label is a valid *fmt*. ``plot('n', 'o', data=obj)``\n        could be ``plt(x, y)`` or ``plt(y, fmt)``. In such cases,\n        the former interpretation is chosen, but a warning is issued.\n        You may suppress the warning by adding an empty format string\n        ``plot('n', 'o', '', data=obj)``.\n\nReturns\n-------\nlist of `.Line2D`\n    A list of lines representing the plotted data.\n\nOther Parameters\n----------------\nscalex, scaley : bool, default: True\n    These parameters determine if the view limits are adapted to the\n    data limits. The values are passed on to\n    `~.axes.Axes.autoscale_view`.\n\n**kwargs : `~matplotlib.lines.Line2D` properties, optional\n    *kwargs* are used to specify properties like a line label (for\n    auto legends), linewidth, antialiasing, marker face color.\n    Example::\n\n    >>> plot([1, 2, 3], [1, 2, 3], 'go-', label='line 1', linewidth=2)\n    >>> plot([1, 2, 3], [1, 4, 9], 'rs', label='line 2')\n\n    If you specify multiple lines with one plot call, the kwargs apply\n    to all those lines. In case the label object is iterable, each\n    element is used as labels for each set of data.\n\n    Here is a list of available `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nscatter : XY scatter plot with markers of varying size and/or color (\n    sometimes also called bubble chart).\n\nNotes\n-----\n**Format Strings**\n\nA format string consists of a part for color, marker and line::\n\n    fmt = '[marker][line][color]'\n\nEach of them is optional. If not provided, the value from the style\ncycle is used. Exception: If ``line`` is given, but no ``marker``,\nthe data will be a line without markers.\n\nOther combinations such as ``[color][marker][line]`` are also\nsupported, but note that their parsing may be ambiguous.\n\n**Markers**\n\n=============   ===============================\ncharacter       description\n=============   ===============================\n``'.'``         point marker\n``','``         pixel marker\n``'o'``         circle marker\n``'v'``         triangle_down marker\n``'^'``         triangle_up marker\n``'<'``         triangle_left marker\n``'>'``         triangle_right marker\n``'1'``         tri_down marker\n``'2'``         tri_up marker\n``'3'``         tri_left marker\n``'4'``         tri_right marker\n``'8'``         octagon marker\n``'s'``         square marker\n``'p'``         pentagon marker\n``'P'``         plus (filled) marker\n``'*'``         star marker\n``'h'``         hexagon1 marker\n``'H'``         hexagon2 marker\n``'+'``         plus marker\n``'x'``         x marker\n``'X'``         x (filled) marker\n``'D'``         diamond marker\n``'d'``         thin_diamond marker\n``'|'``         vline marker\n``'_'``         hline marker\n=============   ===============================\n\n**Line Styles**\n\n=============    ===============================\ncharacter        description\n=============    ===============================\n``'-'``          solid line style\n``'--'``         dashed line style\n``'-.'``         dash-dot line style\n``':'``          dotted line style\n=============    ===============================\n\nExample format strings::\n\n    'b'    # blue markers with default shape\n    'or'   # red circles\n    '-g'   # green solid line\n    '--'   # dashed line with default color\n    '^k:'  # black triangle_up markers connected by a dotted line\n\n**Colors**\n\nThe supported color abbreviations are the single letter codes\n\n=============    ===============================\ncharacter        color\n=============    ===============================\n``'b'``          blue\n``'g'``          green\n``'r'``          red\n``'c'``          cyan\n``'m'``          magenta\n``'y'``          yellow\n``'k'``          black\n``'w'``          white\n=============    ===============================\n\nand the ``'CN'`` colors that index into the default property cycle.\n\nIf the color is the only part of the format string, you can\nadditionally use any  `matplotlib.colors` spec, e.g. full names\n(``'green'``) or hex strings (``'#008000'``)."
        },
        {
          "name": "plot_date",
          "docstring": "Plot coercing the axis to treat floats as dates.\n\n.. deprecated:: 3.9\n\n    This method exists for historic reasons and will be removed in version 3.11.\n\n    - ``datetime``-like data should directly be plotted using\n      `~.Axes.plot`.\n    -  If you need to plot plain numeric data as :ref:`date-format` or\n       need to set a timezone, call ``ax.xaxis.axis_date`` /\n       ``ax.yaxis.axis_date`` before `~.Axes.plot`. See\n       `.Axis.axis_date`.\n\nSimilar to `.plot`, this plots *y* vs. *x* as lines or markers.\nHowever, the axis labels are formatted as dates depending on *xdate*\nand *ydate*.  Note that `.plot` will work with `datetime` and\n`numpy.datetime64` objects without resorting to this method.\n\nParameters\n----------\nx, y : array-like\n    The coordinates of the data points. If *xdate* or *ydate* is\n    *True*, the respective values *x* or *y* are interpreted as\n    :ref:`Matplotlib dates <date-format>`.\n\nfmt : str, optional\n    The plot format string. For details, see the corresponding\n    parameter in `.plot`.\n\ntz : timezone string or `datetime.tzinfo`, default: :rc:`timezone`\n    The time zone to use in labeling dates.\n\nxdate : bool, default: True\n    If *True*, the *x*-axis will be interpreted as Matplotlib dates.\n\nydate : bool, default: False\n    If *True*, the *y*-axis will be interpreted as Matplotlib dates.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nmatplotlib.dates : Helper functions on dates.\nmatplotlib.dates.date2num : Convert dates to num.\nmatplotlib.dates.num2date : Convert num to dates.\nmatplotlib.dates.drange : Create an equally spaced sequence of dates.\n\nNotes\n-----\nIf you are using custom date tickers and formatters, it may be\nnecessary to set the formatters/locators after the call to\n`.plot_date`. `.plot_date` will set the default tick locator to\n`.AutoDateLocator` (if the tick locator is not already set to a\n`.DateLocator` instance) and the default tick formatter to\n`.AutoDateFormatter` (if the tick formatter is not already set to a\n`.DateFormatter` instance)."
        },
        {
          "name": "loglog",
          "docstring": "Make a plot with log scaling on both the x- and y-axis.\n\nCall signatures::\n\n    loglog([x], y, [fmt], data=None, **kwargs)\n    loglog([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThis is just a thin wrapper around `.plot` which additionally changes\nboth the x-axis and the y-axis to log scaling. All the concepts and\nparameters of plot can be used here as well.\n\nThe additional parameters *base*, *subs* and *nonpositive* control the\nx/y-axis properties. They are just forwarded to `.Axes.set_xscale` and\n`.Axes.set_yscale`. To use different properties on the x-axis and the\ny-axis, use e.g.\n``ax.set_xscale(\"log\", base=10); ax.set_yscale(\"log\", base=2)``.\n\nParameters\n----------\nbase : float, default: 10\n    Base of the logarithm.\n\nsubs : sequence, optional\n    The location of the minor ticks. If *None*, reasonable locations\n    are automatically chosen depending on the number of decades in the\n    plot. See `.Axes.set_xscale`/`.Axes.set_yscale` for details.\n\nnonpositive : {'mask', 'clip'}, default: 'clip'\n    Non-positive values can be masked as invalid, or clipped to a very\n    small positive number.\n\n**kwargs\n    All parameters supported by `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
        },
        {
          "name": "semilogx",
          "docstring": "Make a plot with log scaling on the x-axis.\n\nCall signatures::\n\n    semilogx([x], y, [fmt], data=None, **kwargs)\n    semilogx([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThis is just a thin wrapper around `.plot` which additionally changes\nthe x-axis to log scaling. All the concepts and parameters of plot can\nbe used here as well.\n\nThe additional parameters *base*, *subs*, and *nonpositive* control the\nx-axis properties. They are just forwarded to `.Axes.set_xscale`.\n\nParameters\n----------\nbase : float, default: 10\n    Base of the x logarithm.\n\nsubs : array-like, optional\n    The location of the minor xticks. If *None*, reasonable locations\n    are automatically chosen depending on the number of decades in the\n    plot. See `.Axes.set_xscale` for details.\n\nnonpositive : {'mask', 'clip'}, default: 'clip'\n    Non-positive values in x can be masked as invalid, or clipped to a\n    very small positive number.\n\n**kwargs\n    All parameters supported by `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
        },
        {
          "name": "semilogy",
          "docstring": "Make a plot with log scaling on the y-axis.\n\nCall signatures::\n\n    semilogy([x], y, [fmt], data=None, **kwargs)\n    semilogy([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThis is just a thin wrapper around `.plot` which additionally changes\nthe y-axis to log scaling. All the concepts and parameters of plot can\nbe used here as well.\n\nThe additional parameters *base*, *subs*, and *nonpositive* control the\ny-axis properties. They are just forwarded to `.Axes.set_yscale`.\n\nParameters\n----------\nbase : float, default: 10\n    Base of the y logarithm.\n\nsubs : array-like, optional\n    The location of the minor yticks. If *None*, reasonable locations\n    are automatically chosen depending on the number of decades in the\n    plot. See `.Axes.set_yscale` for details.\n\nnonpositive : {'mask', 'clip'}, default: 'clip'\n    Non-positive values in y can be masked as invalid, or clipped to a\n    very small positive number.\n\n**kwargs\n    All parameters supported by `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
        },
        {
          "name": "acorr",
          "docstring": "Plot the autocorrelation of *x*.\n\nParameters\n----------\nx : array-like\n    Not run through Matplotlib's unit conversion, so this should\n    be a unit-less array.\n\ndetrend : callable, default: `.mlab.detrend_none` (no detrending)\n    A detrending function applied to *x*.  It must have the\n    signature ::\n\n        detrend(x: np.ndarray) -> np.ndarray\n\nnormed : bool, default: True\n    If ``True``, input vectors are normalised to unit length.\n\nusevlines : bool, default: True\n    Determines the plot style.\n\n    If ``True``, vertical lines are plotted from 0 to the acorr value\n    using `.Axes.vlines`. Additionally, a horizontal line is plotted\n    at y=0 using `.Axes.axhline`.\n\n    If ``False``, markers are plotted at the acorr values using\n    `.Axes.plot`.\n\nmaxlags : int, default: 10\n    Number of lags to show. If ``None``, will return all\n    ``2 * len(x) - 1`` lags.\n\nReturns\n-------\nlags : array (length ``2*maxlags+1``)\n    The lag vector.\nc : array  (length ``2*maxlags+1``)\n    The auto correlation vector.\nline : `.LineCollection` or `.Line2D`\n    `.Artist` added to the Axes of the correlation:\n\n    - `.LineCollection` if *usevlines* is True.\n    - `.Line2D` if *usevlines* is False.\nb : `~matplotlib.lines.Line2D` or None\n    Horizontal line at 0 if *usevlines* is True\n    None *usevlines* is False.\n\nOther Parameters\n----------------\nlinestyle : `~matplotlib.lines.Line2D` property, optional\n    The linestyle for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\nmarker : str, default: 'o'\n    The marker for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additional parameters are passed to `.Axes.vlines` and\n    `.Axes.axhline` if *usevlines* is ``True``; otherwise they are\n    passed to `.Axes.plot`.\n\nNotes\n-----\nThe cross correlation is performed with `numpy.correlate` with\n``mode = \"full\"``."
        },
        {
          "name": "xcorr",
          "docstring": "Plot the cross correlation between *x* and *y*.\n\nThe correlation with lag k is defined as\n:math:`\\sum_n x[n+k] \\cdot y^*[n]`, where :math:`y^*` is the complex\nconjugate of :math:`y`.\n\nParameters\n----------\nx, y : array-like of length n\n    Neither *x* nor *y* are run through Matplotlib's unit conversion, so\n    these should be unit-less arrays.\n\ndetrend : callable, default: `.mlab.detrend_none` (no detrending)\n    A detrending function applied to *x* and *y*.  It must have the\n    signature ::\n\n        detrend(x: np.ndarray) -> np.ndarray\n\nnormed : bool, default: True\n    If ``True``, input vectors are normalised to unit length.\n\nusevlines : bool, default: True\n    Determines the plot style.\n\n    If ``True``, vertical lines are plotted from 0 to the xcorr value\n    using `.Axes.vlines`. Additionally, a horizontal line is plotted\n    at y=0 using `.Axes.axhline`.\n\n    If ``False``, markers are plotted at the xcorr values using\n    `.Axes.plot`.\n\nmaxlags : int, default: 10\n    Number of lags to show. If None, will return all ``2 * len(x) - 1``\n    lags.\n\nReturns\n-------\nlags : array (length ``2*maxlags+1``)\n    The lag vector.\nc : array  (length ``2*maxlags+1``)\n    The auto correlation vector.\nline : `.LineCollection` or `.Line2D`\n    `.Artist` added to the Axes of the correlation:\n\n    - `.LineCollection` if *usevlines* is True.\n    - `.Line2D` if *usevlines* is False.\nb : `~matplotlib.lines.Line2D` or None\n    Horizontal line at 0 if *usevlines* is True\n    None *usevlines* is False.\n\nOther Parameters\n----------------\nlinestyle : `~matplotlib.lines.Line2D` property, optional\n    The linestyle for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\nmarker : str, default: 'o'\n    The marker for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additional parameters are passed to `.Axes.vlines` and\n    `.Axes.axhline` if *usevlines* is ``True``; otherwise they are\n    passed to `.Axes.plot`.\n\nNotes\n-----\nThe cross correlation is performed with `numpy.correlate` with\n``mode = \"full\"``."
        },
        {
          "name": "step",
          "docstring": "Make a step plot.\n\nCall signatures::\n\n    step(x, y, [fmt], *, data=None, where='pre', **kwargs)\n    step(x, y, [fmt], x2, y2, [fmt2], ..., *, where='pre', **kwargs)\n\nThis is just a thin wrapper around `.plot` which changes some\nformatting options. Most of the concepts and parameters of plot can be\nused here as well.\n\n.. note::\n\n    This method uses a standard plot with a step drawstyle: The *x*\n    values are the reference positions and steps extend left/right/both\n    directions depending on *where*.\n\n    For the common case where you know the values and edges of the\n    steps, use `~.Axes.stairs` instead.\n\nParameters\n----------\nx : array-like\n    1D sequence of x positions. It is assumed, but not checked, that\n    it is uniformly increasing.\n\ny : array-like\n    1D sequence of y levels.\n\nfmt : str, optional\n    A format string, e.g. 'g' for a green line. See `.plot` for a more\n    detailed description.\n\n    Note: While full format strings are accepted, it is recommended to\n    only specify the color. Line styles are currently ignored (use\n    the keyword argument *linestyle* instead). Markers are accepted\n    and plotted on the given positions, however, this is a rarely\n    needed feature for step plots.\n\nwhere : {'pre', 'post', 'mid'}, default: 'pre'\n    Define where the steps should be placed:\n\n    - 'pre': The y value is continued constantly to the left from\n      every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n      value ``y[i]``.\n    - 'post': The y value is continued constantly to the right from\n      every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n      value ``y[i]``.\n    - 'mid': Steps occur half-way between the *x* positions.\n\ndata : indexable object, optional\n    An object with labelled data. If given, provide the label names to\n    plot in *x* and *y*.\n\n**kwargs\n    Additional parameters are the same as those for `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
        },
        {
          "name": "bar",
          "docstring": "Make a bar plot.\n\nThe bars are positioned at *x* with the given *align*\\ment. Their\ndimensions are given by *height* and *width*. The vertical baseline\nis *bottom* (default 0).\n\nMany parameters can take either a single value applying to all bars\nor a sequence of values, one for each bar.\n\nParameters\n----------\nx : float or array-like\n    The x coordinates of the bars. See also *align* for the\n    alignment of the bars to the coordinates.\n\n    Bars are often used for categorical data, i.e. string labels below\n    the bars. You can provide a list of strings directly to *x*.\n    ``bar(['A', 'B', 'C'], [1, 2, 3])`` is often a shorter and more\n    convenient notation compared to\n    ``bar(range(3), [1, 2, 3], tick_label=['A', 'B', 'C'])``. They are\n    equivalent as long as the names are unique. The explicit *tick_label*\n    notation draws the names in the sequence given. However, when having\n    duplicate values in categorical *x* data, these values map to the same\n    numerical x coordinate, and hence the corresponding bars are drawn on\n    top of each other.\n\nheight : float or array-like\n    The height(s) of the bars.\n\n    Note that if *bottom* has units (e.g. datetime), *height* should be in\n    units that are a difference from the value of *bottom* (e.g. timedelta).\n\nwidth : float or array-like, default: 0.8\n    The width(s) of the bars.\n\n    Note that if *x* has units (e.g. datetime), then *width* should be in\n    units that are a difference (e.g. timedelta) around the *x* values.\n\nbottom : float or array-like, default: 0\n    The y coordinate(s) of the bottom side(s) of the bars.\n\n    Note that if *bottom* has units, then the y-axis will get a Locator and\n    Formatter appropriate for the units (e.g. dates, or categorical).\n\nalign : {'center', 'edge'}, default: 'center'\n    Alignment of the bars to the *x* coordinates:\n\n    - 'center': Center the base on the *x* positions.\n    - 'edge': Align the left edges of the bars with the *x* positions.\n\n    To align the bars on the right edge pass a negative *width* and\n    ``align='edge'``.\n\nReturns\n-------\n`.BarContainer`\n    Container with all the bars and optionally errorbars.\n\nOther Parameters\n----------------\ncolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar faces. This is an alias for *facecolor*.\n    If both are given, *facecolor* takes precedence.\n\nfacecolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar faces.\n    If both *color* and *facecolor are given, *facecolor* takes precedence.\n\nedgecolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar edges.\n\nlinewidth : float or array-like, optional\n    Width of the bar edge(s). If 0, don't draw edges.\n\ntick_label : str or list of str, optional\n    The tick labels of the bars.\n    Default: None (Use default numeric labels.)\n\nlabel : str or list of str, optional\n    A single label is attached to the resulting `.BarContainer` as a\n    label for the whole dataset.\n    If a list is provided, it must be the same length as *x* and\n    labels the individual bars. Repeated labels are not de-duplicated\n    and will cause repeated label entries, so this is best used when\n    bars also differ in style (e.g., by passing a list to *color*.)\n\nxerr, yerr : float or array-like of shape(N,) or shape(2, N), optional\n    If not *None*, add horizontal / vertical errorbars to the bar tips.\n    The values are +/- sizes relative to the data:\n\n    - scalar: symmetric +/- values for all bars\n    - shape(N,): symmetric +/- values for each bar\n    - shape(2, N): Separate - and + values for each bar. First row\n      contains the lower errors, the second row contains the upper\n      errors.\n    - *None*: No errorbar. (Default)\n\n    See :doc:`/gallery/statistics/errorbar_features` for an example on\n    the usage of *xerr* and *yerr*.\n\necolor : :mpltype:`color` or list of :mpltype:`color`, default: 'black'\n    The line color of the errorbars.\n\ncapsize : float, default: :rc:`errorbar.capsize`\n   The length of the error bar caps in points.\n\nerror_kw : dict, optional\n    Dictionary of keyword arguments to be passed to the\n    `~.Axes.errorbar` method. Values of *ecolor* or *capsize* defined\n    here take precedence over the independent keyword arguments.\n\nlog : bool, default: False\n    If *True*, set the y-axis to be log scale.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs : `.Rectangle` properties\n\n%(Rectangle:kwdoc)s\n\nSee Also\n--------\nbarh : Plot a horizontal bar plot.\n\nNotes\n-----\nStacked bars can be achieved by passing individual *bottom* values per\nbar. See :doc:`/gallery/lines_bars_and_markers/bar_stacked`."
        },
        {
          "name": "barh",
          "docstring": "Make a horizontal bar plot.\n\nThe bars are positioned at *y* with the given *align*\\ment. Their\ndimensions are given by *width* and *height*. The horizontal baseline\nis *left* (default 0).\n\nMany parameters can take either a single value applying to all bars\nor a sequence of values, one for each bar.\n\nParameters\n----------\ny : float or array-like\n    The y coordinates of the bars. See also *align* for the\n    alignment of the bars to the coordinates.\n\n    Bars are often used for categorical data, i.e. string labels below\n    the bars. You can provide a list of strings directly to *y*.\n    ``barh(['A', 'B', 'C'], [1, 2, 3])`` is often a shorter and more\n    convenient notation compared to\n    ``barh(range(3), [1, 2, 3], tick_label=['A', 'B', 'C'])``. They are\n    equivalent as long as the names are unique. The explicit *tick_label*\n    notation draws the names in the sequence given. However, when having\n    duplicate values in categorical *y* data, these values map to the same\n    numerical y coordinate, and hence the corresponding bars are drawn on\n    top of each other.\n\nwidth : float or array-like\n    The width(s) of the bars.\n\n    Note that if *left* has units (e.g. datetime), *width* should be in\n    units that are a difference from the value of *left* (e.g. timedelta).\n\nheight : float or array-like, default: 0.8\n    The heights of the bars.\n\n    Note that if *y* has units (e.g. datetime), then *height* should be in\n    units that are a difference (e.g. timedelta) around the *y* values.\n\nleft : float or array-like, default: 0\n    The x coordinates of the left side(s) of the bars.\n\n    Note that if *left* has units, then the x-axis will get a Locator and\n    Formatter appropriate for the units (e.g. dates, or categorical).\n\nalign : {'center', 'edge'}, default: 'center'\n    Alignment of the base to the *y* coordinates*:\n\n    - 'center': Center the bars on the *y* positions.\n    - 'edge': Align the bottom edges of the bars with the *y*\n      positions.\n\n    To align the bars on the top edge pass a negative *height* and\n    ``align='edge'``.\n\nReturns\n-------\n`.BarContainer`\n    Container with all the bars and optionally errorbars.\n\nOther Parameters\n----------------\ncolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar faces.\n\nedgecolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar edges.\n\nlinewidth : float or array-like, optional\n    Width of the bar edge(s). If 0, don't draw edges.\n\ntick_label : str or list of str, optional\n    The tick labels of the bars.\n    Default: None (Use default numeric labels.)\n\nlabel : str or list of str, optional\n    A single label is attached to the resulting `.BarContainer` as a\n    label for the whole dataset.\n    If a list is provided, it must be the same length as *y* and\n    labels the individual bars. Repeated labels are not de-duplicated\n    and will cause repeated label entries, so this is best used when\n    bars also differ in style (e.g., by passing a list to *color*.)\n\nxerr, yerr : float or array-like of shape(N,) or shape(2, N), optional\n    If not *None*, add horizontal / vertical errorbars to the bar tips.\n    The values are +/- sizes relative to the data:\n\n    - scalar: symmetric +/- values for all bars\n    - shape(N,): symmetric +/- values for each bar\n    - shape(2, N): Separate - and + values for each bar. First row\n      contains the lower errors, the second row contains the upper\n      errors.\n    - *None*: No errorbar. (default)\n\n    See :doc:`/gallery/statistics/errorbar_features` for an example on\n    the usage of *xerr* and *yerr*.\n\necolor : :mpltype:`color` or list of :mpltype:`color`, default: 'black'\n    The line color of the errorbars.\n\ncapsize : float, default: :rc:`errorbar.capsize`\n   The length of the error bar caps in points.\n\nerror_kw : dict, optional\n    Dictionary of keyword arguments to be passed to the\n    `~.Axes.errorbar` method. Values of *ecolor* or *capsize* defined\n    here take precedence over the independent keyword arguments.\n\nlog : bool, default: False\n    If ``True``, set the x-axis to be log scale.\n\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` if  ``s`` is a key in ``data``.\n\n**kwargs : `.Rectangle` properties\n\n%(Rectangle:kwdoc)s\n\nSee Also\n--------\nbar : Plot a vertical bar plot.\n\nNotes\n-----\nStacked bars can be achieved by passing individual *left* values per\nbar. See\n:doc:`/gallery/lines_bars_and_markers/horizontal_barchart_distribution`."
        },
        {
          "name": "bar_label",
          "docstring": "Label a bar plot.\n\nAdds labels to bars in the given `.BarContainer`.\nYou may need to adjust the axis limits to fit the labels.\n\nParameters\n----------\ncontainer : `.BarContainer`\n    Container with all the bars and optionally errorbars, likely\n    returned from `.bar` or `.barh`.\n\nlabels : array-like, optional\n    A list of label texts, that should be displayed. If not given, the\n    label texts will be the data values formatted with *fmt*.\n\nfmt : str or callable, default: '%g'\n    An unnamed %-style or {}-style format string for the label or a\n    function to call with the value as the first argument.\n    When *fmt* is a string and can be interpreted in both formats,\n    %-style takes precedence over {}-style.\n\n    .. versionadded:: 3.7\n       Support for {}-style format string and callables.\n\nlabel_type : {'edge', 'center'}, default: 'edge'\n    The label type. Possible values:\n\n    - 'edge': label placed at the end-point of the bar segment, and the\n      value displayed will be the position of that end-point.\n    - 'center': label placed in the center of the bar segment, and the\n      value displayed will be the length of that segment.\n      (useful for stacked bars, i.e.,\n      :doc:`/gallery/lines_bars_and_markers/bar_label_demo`)\n\npadding : float, default: 0\n    Distance of label from the end of the bar, in points.\n\n**kwargs\n    Any remaining keyword arguments are passed through to\n    `.Axes.annotate`. The alignment parameters (\n    *horizontalalignment* / *ha*, *verticalalignment* / *va*) are\n    not supported because the labels are automatically aligned to\n    the bars.\n\nReturns\n-------\nlist of `.Annotation`\n    A list of `.Annotation` instances for the labels."
        },
        {
          "name": "broken_barh",
          "docstring": "Plot a horizontal sequence of rectangles.\n\nA rectangle is drawn for each element of *xranges*. All rectangles\nhave the same vertical position and size defined by *yrange*.\n\nParameters\n----------\nxranges : sequence of tuples (*xmin*, *xwidth*)\n    The x-positions and extents of the rectangles. For each tuple\n    (*xmin*, *xwidth*) a rectangle is drawn from *xmin* to *xmin* +\n    *xwidth*.\nyrange : (*ymin*, *yheight*)\n    The y-position and extent for all the rectangles.\n\nReturns\n-------\n`~.collections.PolyCollection`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs : `.PolyCollection` properties\n\n    Each *kwarg* can be either a single argument applying to all\n    rectangles, e.g.::\n\n        facecolors='black'\n\n    or a sequence of arguments over which is cycled, e.g.::\n\n        facecolors=('black', 'blue')\n\n    would create interleaving black and blue rectangles.\n\n    Supported keywords:\n\n    %(PolyCollection:kwdoc)s"
        },
        {
          "name": "stem",
          "docstring": "Create a stem plot.\n\nA stem plot draws lines perpendicular to a baseline at each location\n*locs* from the baseline to *heads*, and places a marker there. For\nvertical stem plots (the default), the *locs* are *x* positions, and\nthe *heads* are *y* values. For horizontal stem plots, the *locs* are\n*y* positions, and the *heads* are *x* values.\n\nCall signature::\n\n  stem([locs,] heads, linefmt=None, markerfmt=None, basefmt=None)\n\nThe *locs*-positions are optional. *linefmt* may be provided as\npositional, but all other formats must be provided as keyword\narguments.\n\nParameters\n----------\nlocs : array-like, default: (0, 1, ..., len(heads) - 1)\n    For vertical stem plots, the x-positions of the stems.\n    For horizontal stem plots, the y-positions of the stems.\n\nheads : array-like\n    For vertical stem plots, the y-values of the stem heads.\n    For horizontal stem plots, the x-values of the stem heads.\n\nlinefmt : str, optional\n    A string defining the color and/or linestyle of the vertical lines:\n\n    =========  =============\n    Character  Line Style\n    =========  =============\n    ``'-'``    solid line\n    ``'--'``   dashed line\n    ``'-.'``   dash-dot line\n    ``':'``    dotted line\n    =========  =============\n\n    Default: 'C0-', i.e. solid line with the first color of the color\n    cycle.\n\n    Note: Markers specified through this parameter (e.g. 'x') will be\n    silently ignored. Instead, markers should be specified using\n    *markerfmt*.\n\nmarkerfmt : str, optional\n    A string defining the color and/or shape of the markers at the stem\n    heads. If the marker is not given, use the marker 'o', i.e. filled\n    circles. If the color is not given, use the color from *linefmt*.\n\nbasefmt : str, default: 'C3-' ('C2-' in classic mode)\n    A format string defining the properties of the baseline.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    The orientation of the stems.\n\nbottom : float, default: 0\n    The y/x-position of the baseline (depending on *orientation*).\n\nlabel : str, optional\n    The label to use for the stems in legends.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nReturns\n-------\n`.StemContainer`\n    The container may be treated like a tuple\n    (*markerline*, *stemlines*, *baseline*)\n\nNotes\n-----\n.. seealso::\n    The MATLAB function\n    `stem <https://www.mathworks.com/help/matlab/ref/stem.html>`_\n    which inspired this method."
        },
        {
          "name": "pie",
          "docstring": "Plot a pie chart.\n\nMake a pie chart of array *x*.  The fractional area of each wedge is\ngiven by ``x/sum(x)``.\n\nThe wedges are plotted counterclockwise, by default starting from the\nx-axis.\n\nParameters\n----------\nx : 1D array-like\n    The wedge sizes.\n\nexplode : array-like, default: None\n    If not *None*, is a ``len(x)`` array which specifies the fraction\n    of the radius with which to offset each wedge.\n\nlabels : list, default: None\n    A sequence of strings providing the labels for each wedge\n\ncolors : :mpltype:`color` or list of :mpltype:`color`, default: None\n    A sequence of colors through which the pie chart will cycle.  If\n    *None*, will use the colors in the currently active cycle.\n\nhatch : str or list, default: None\n    Hatching pattern applied to all pie wedges or sequence of patterns\n    through which the chart will cycle. For a list of valid patterns,\n    see :doc:`/gallery/shapes_and_collections/hatch_style_reference`.\n\n    .. versionadded:: 3.7\n\nautopct : None or str or callable, default: None\n    If not *None*, *autopct* is a string or function used to label the\n    wedges with their numeric value. The label will be placed inside\n    the wedge. If *autopct* is a format string, the label will be\n    ``fmt % pct``. If *autopct* is a function, then it will be called.\n\npctdistance : float, default: 0.6\n    The relative distance along the radius at which the text\n    generated by *autopct* is drawn. To draw the text outside the pie,\n    set *pctdistance* > 1. This parameter is ignored if *autopct* is\n    ``None``.\n\nlabeldistance : float or None, default: 1.1\n    The relative distance along the radius at which the labels are\n    drawn. To draw the labels inside the pie, set  *labeldistance* < 1.\n    If set to ``None``, labels are not drawn but are still stored for\n    use in `.legend`.\n\nshadow : bool or dict, default: False\n    If bool, whether to draw a shadow beneath the pie. If dict, draw a shadow\n    passing the properties in the dict to `.Shadow`.\n\n    .. versionadded:: 3.8\n        *shadow* can be a dict.\n\nstartangle : float, default: 0 degrees\n    The angle by which the start of the pie is rotated,\n    counterclockwise from the x-axis.\n\nradius : float, default: 1\n    The radius of the pie.\n\ncounterclock : bool, default: True\n    Specify fractions direction, clockwise or counterclockwise.\n\nwedgeprops : dict, default: None\n    Dict of arguments passed to each `.patches.Wedge` of the pie.\n    For example, ``wedgeprops = {'linewidth': 3}`` sets the width of\n    the wedge border lines equal to 3. By default, ``clip_on=False``.\n    When there is a conflict between these properties and other\n    keywords, properties passed to *wedgeprops* take precedence.\n\ntextprops : dict, default: None\n    Dict of arguments to pass to the text objects.\n\ncenter : (float, float), default: (0, 0)\n    The coordinates of the center of the chart.\n\nframe : bool, default: False\n    Plot Axes frame with the chart if true.\n\nrotatelabels : bool, default: False\n    Rotate each label to the angle of the corresponding slice if true.\n\nnormalize : bool, default: True\n    When *True*, always make a full pie by normalizing x so that\n    ``sum(x) == 1``. *False* makes a partial pie if ``sum(x) <= 1``\n    and raises a `ValueError` for ``sum(x) > 1``.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nReturns\n-------\npatches : list\n    A sequence of `matplotlib.patches.Wedge` instances\n\ntexts : list\n    A list of the label `.Text` instances.\n\nautotexts : list\n    A list of `.Text` instances for the numeric labels. This will only\n    be returned if the parameter *autopct* is not *None*.\n\nNotes\n-----\nThe pie chart will probably look best if the figure and Axes are\nsquare, or the Axes aspect is equal.\nThis method sets the aspect ratio of the axis to \"equal\".\nThe Axes aspect ratio can be controlled with `.Axes.set_aspect`."
        },
        {
          "name": "errorbar",
          "docstring": "Plot y versus x as lines and/or markers with attached errorbars.\n\n*x*, *y* define the data locations, *xerr*, *yerr* define the errorbar\nsizes. By default, this draws the data markers/lines as well as the\nerrorbars. Use fmt='none' to draw errorbars without any data markers.\n\n.. versionadded:: 3.7\n   Caps and error lines are drawn in polar coordinates on polar plots.\n\n\nParameters\n----------\nx, y : float or array-like\n    The data positions.\n\nxerr, yerr : float or array-like, shape(N,) or shape(2, N), optional\n    The errorbar sizes:\n\n    - scalar: Symmetric +/- values for all data points.\n    - shape(N,): Symmetric +/-values for each data point.\n    - shape(2, N): Separate - and + values for each bar. First row\n      contains the lower errors, the second row contains the upper\n      errors.\n    - *None*: No errorbar.\n\n    All values must be >= 0.\n\n    See :doc:`/gallery/statistics/errorbar_features`\n    for an example on the usage of ``xerr`` and ``yerr``.\n\nfmt : str, default: ''\n    The format for the data points / data lines. See `.plot` for\n    details.\n\n    Use 'none' (case-insensitive) to plot errorbars without any data\n    markers.\n\necolor : :mpltype:`color`, default: None\n    The color of the errorbar lines.  If None, use the color of the\n    line connecting the markers.\n\nelinewidth : float, default: None\n    The linewidth of the errorbar lines. If None, the linewidth of\n    the current style is used.\n\ncapsize : float, default: :rc:`errorbar.capsize`\n    The length of the error bar caps in points.\n\ncapthick : float, default: None\n    An alias to the keyword argument *markeredgewidth* (a.k.a. *mew*).\n    This setting is a more sensible name for the property that\n    controls the thickness of the error bar cap in points. For\n    backwards compatibility, if *mew* or *markeredgewidth* are given,\n    then they will over-ride *capthick*. This may change in future\n    releases.\n\nbarsabove : bool, default: False\n    If True, will plot the errorbars above the plot\n    symbols. Default is below.\n\nlolims, uplims, xlolims, xuplims : bool or array-like, default: False\n    These arguments can be used to indicate that a value gives only\n    upper/lower limits.  In that case a caret symbol is used to\n    indicate this. *lims*-arguments may be scalars, or array-likes of\n    the same length as *xerr* and *yerr*.  To use limits with inverted\n    axes, `~.Axes.set_xlim` or `~.Axes.set_ylim` must be called before\n    :meth:`errorbar`.  Note the tricky parameter names: setting e.g.\n    *lolims* to True means that the y-value is a *lower* limit of the\n    True value, so, only an *upward*-pointing arrow will be drawn!\n\nerrorevery : int or (int, int), default: 1\n    draws error bars on a subset of the data. *errorevery* =N draws\n    error bars on the points (x[::N], y[::N]).\n    *errorevery* =(start, N) draws error bars on the points\n    (x[start::N], y[start::N]). e.g. errorevery=(6, 3)\n    adds error bars to the data at (x[6], x[9], x[12], x[15], ...).\n    Used to avoid overlapping error bars when two series share x-axis\n    values.\n\nReturns\n-------\n`.ErrorbarContainer`\n    The container contains:\n\n    - data_line : A `~matplotlib.lines.Line2D` instance of x, y plot markers\n      and/or line.\n    - caplines : A tuple of `~matplotlib.lines.Line2D` instances of the error\n      bar caps.\n    - barlinecols : A tuple of `.LineCollection` with the horizontal and\n      vertical error ranges.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    All other keyword arguments are passed on to the `~.Axes.plot` call\n    drawing the markers. For example, this code makes big red squares\n    with thick green edges::\n\n        x, y, yerr = rand(3, 10)\n        errorbar(x, y, yerr, marker='s', mfc='red',\n                 mec='green', ms=20, mew=4)\n\n    where *mfc*, *mec*, *ms* and *mew* are aliases for the longer\n    property names, *markerfacecolor*, *markeredgecolor*, *markersize*\n    and *markeredgewidth*.\n\n    Valid kwargs for the marker properties are:\n\n    - *dashes*\n    - *dash_capstyle*\n    - *dash_joinstyle*\n    - *drawstyle*\n    - *fillstyle*\n    - *linestyle*\n    - *marker*\n    - *markeredgecolor*\n    - *markeredgewidth*\n    - *markerfacecolor*\n    - *markerfacecoloralt*\n    - *markersize*\n    - *markevery*\n    - *solid_capstyle*\n    - *solid_joinstyle*\n\n    Refer to the corresponding `.Line2D` property for more details:\n\n    %(Line2D:kwdoc)s"
        },
        {
          "name": "boxplot",
          "docstring": "Draw a box and whisker plot.\n\nThe box extends from the first quartile (Q1) to the third\nquartile (Q3) of the data, with a line at the median.\nThe whiskers extend from the box to the farthest data point\nlying within 1.5x the inter-quartile range (IQR) from the box.\nFlier points are those past the end of the whiskers.\nSee https://en.wikipedia.org/wiki/Box_plot for reference.\n\n.. code-block:: none\n\n          Q1-1.5IQR   Q1   median  Q3   Q3+1.5IQR\n                       |-----:-----|\n       o      |--------|     :     |--------|    o  o\n                       |-----:-----|\n     flier             <----------->            fliers\n                            IQR\n\n\nParameters\n----------\nx : Array or a sequence of vectors.\n    The input data.  If a 2D array, a boxplot is drawn for each column\n    in *x*.  If a sequence of 1D arrays, a boxplot is drawn for each\n    array in *x*.\n\nnotch : bool, default: :rc:`boxplot.notch`\n    Whether to draw a notched boxplot (`True`), or a rectangular\n    boxplot (`False`).  The notches represent the confidence interval\n    (CI) around the median.  The documentation for *bootstrap*\n    describes how the locations of the notches are computed by\n    default, but their locations may also be overridden by setting the\n    *conf_intervals* parameter.\n\n    .. note::\n\n        In cases where the values of the CI are less than the\n        lower quartile or greater than the upper quartile, the\n        notches will extend beyond the box, giving it a\n        distinctive \"flipped\" appearance. This is expected\n        behavior and consistent with other statistical\n        visualization packages.\n\nsym : str, optional\n    The default symbol for flier points.  An empty string ('') hides\n    the fliers.  If `None`, then the fliers default to 'b+'.  More\n    control is provided by the *flierprops* parameter.\n\nvert : bool, optional\n    .. deprecated:: 3.11\n        Use *orientation* instead.\n\n        This is a pending deprecation for 3.10, with full deprecation\n        in 3.11 and removal in 3.13.\n        If this is given during the deprecation period, it overrides\n        the *orientation* parameter.\n\n    If True, plots the boxes vertically.\n    If False, plots the boxes horizontally.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', plots the boxes horizontally.\n    Otherwise, plots the boxes vertically.\n\n    .. versionadded:: 3.10\n\nwhis : float or (float, float), default: 1.5\n    The position of the whiskers.\n\n    If a float, the lower whisker is at the lowest datum above\n    ``Q1 - whis*(Q3-Q1)``, and the upper whisker at the highest datum\n    below ``Q3 + whis*(Q3-Q1)``, where Q1 and Q3 are the first and\n    third quartiles.  The default value of ``whis = 1.5`` corresponds\n    to Tukey's original definition of boxplots.\n\n    If a pair of floats, they indicate the percentiles at which to\n    draw the whiskers (e.g., (5, 95)).  In particular, setting this to\n    (0, 100) results in whiskers covering the whole range of the data.\n\n    In the edge case where ``Q1 == Q3``, *whis* is automatically set\n    to (0, 100) (cover the whole range of the data) if *autorange* is\n    True.\n\n    Beyond the whiskers, data are considered outliers and are plotted\n    as individual points.\n\nbootstrap : int, optional\n    Specifies whether to bootstrap the confidence intervals\n    around the median for notched boxplots. If *bootstrap* is\n    None, no bootstrapping is performed, and notches are\n    calculated using a Gaussian-based asymptotic approximation\n    (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and\n    Kendall and Stuart, 1967). Otherwise, bootstrap specifies\n    the number of times to bootstrap the median to determine its\n    95% confidence intervals. Values between 1000 and 10000 are\n    recommended.\n\nusermedians : 1D array-like, optional\n    A 1D array-like of length ``len(x)``.  Each entry that is not\n    `None` forces the value of the median for the corresponding\n    dataset.  For entries that are `None`, the medians are computed\n    by Matplotlib as normal.\n\nconf_intervals : array-like, optional\n    A 2D array-like of shape ``(len(x), 2)``.  Each entry that is not\n    None forces the location of the corresponding notch (which is\n    only drawn if *notch* is `True`).  For entries that are `None`,\n    the notches are computed by the method specified by the other\n    parameters (e.g., *bootstrap*).\n\npositions : array-like, optional\n    The positions of the boxes. The ticks and limits are\n    automatically set to match the positions. Defaults to\n    ``range(1, N+1)`` where N is the number of boxes to be drawn.\n\nwidths : float or array-like\n    The widths of the boxes.  The default is 0.5, or ``0.15*(distance\n    between extreme positions)``, if that is smaller.\n\npatch_artist : bool, default: :rc:`boxplot.patchartist`\n    If `False` produces boxes with the Line2D artist. Otherwise,\n    boxes are drawn with Patch artists.\n\ntick_labels : list of str, optional\n    The tick labels of each boxplot.\n    Ticks are always placed at the box *positions*. If *tick_labels* is given,\n    the ticks are labelled accordingly. Otherwise, they keep their numeric\n    values.\n\n    .. versionchanged:: 3.9\n        Renamed from *labels*, which is deprecated since 3.9\n        and will be removed in 3.11.\n\nmanage_ticks : bool, default: True\n    If True, the tick locations and labels will be adjusted to match\n    the boxplot positions.\n\nautorange : bool, default: False\n    When `True` and the data are distributed such that the 25th and\n    75th percentiles are equal, *whis* is set to (0, 100) such\n    that the whisker ends are at the minimum and maximum of the data.\n\nmeanline : bool, default: :rc:`boxplot.meanline`\n    If `True` (and *showmeans* is `True`), will try to render the\n    mean as a line spanning the full width of the box according to\n    *meanprops* (see below).  Not recommended if *shownotches* is also\n    True.  Otherwise, means will be shown as points.\n\nzorder : float, default: ``Line2D.zorder = 2``\n    The zorder of the boxplot.\n\nReturns\n-------\ndict\n  A dictionary mapping each component of the boxplot to a list\n  of the `.Line2D` instances created. That dictionary has the\n  following keys (assuming vertical boxplots):\n\n  - ``boxes``: the main body of the boxplot showing the\n    quartiles and the median's confidence intervals if\n    enabled.\n\n  - ``medians``: horizontal lines at the median of each box.\n\n  - ``whiskers``: the vertical lines extending to the most\n    extreme, non-outlier data points.\n\n  - ``caps``: the horizontal lines at the ends of the\n    whiskers.\n\n  - ``fliers``: points representing data that extend beyond\n    the whiskers (fliers).\n\n  - ``means``: points or lines representing the means.\n\nOther Parameters\n----------------\nshowcaps : bool, default: :rc:`boxplot.showcaps`\n    Show the caps on the ends of whiskers.\nshowbox : bool, default: :rc:`boxplot.showbox`\n    Show the central box.\nshowfliers : bool, default: :rc:`boxplot.showfliers`\n    Show the outliers beyond the caps.\nshowmeans : bool, default: :rc:`boxplot.showmeans`\n    Show the arithmetic means.\ncapprops : dict, default: None\n    The style of the caps.\ncapwidths : float or array, default: None\n    The widths of the caps.\nboxprops : dict, default: None\n    The style of the box.\nwhiskerprops : dict, default: None\n    The style of the whiskers.\nflierprops : dict, default: None\n    The style of the fliers.\nmedianprops : dict, default: None\n    The style of the median.\nmeanprops : dict, default: None\n    The style of the mean.\nlabel : str or list of str, optional\n    Legend labels. Use a single string when all boxes have the same style and\n    you only want a single legend entry for them. Use a list of strings to\n    label all boxes individually. To be distinguishable, the boxes should be\n    styled individually, which is currently only possible by modifying the\n    returned artists, see e.g. :doc:`/gallery/statistics/boxplot_demo`.\n\n    In the case of a single string, the legend entry will technically be\n    associated with the first box only. By default, the legend will show the\n    median line (``result[\"medians\"]``); if *patch_artist* is True, the legend\n    will show the box `.Patch` artists (``result[\"boxes\"]``) instead.\n\n    .. versionadded:: 3.9\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nSee Also\n--------\n.Axes.bxp : Draw a boxplot from pre-computed statistics.\nviolinplot : Draw an estimate of the probability density function."
        },
        {
          "name": "bxp",
          "docstring": "Draw a box and whisker plot from pre-computed statistics.\n\nThe box extends from the first quartile *q1* to the third\nquartile *q3* of the data, with a line at the median (*med*).\nThe whiskers extend from *whislow* to *whishi*.\nFlier points are markers past the end of the whiskers.\nSee https://en.wikipedia.org/wiki/Box_plot for reference.\n\n.. code-block:: none\n\n           whislow    q1    med    q3    whishi\n                       |-----:-----|\n       o      |--------|     :     |--------|    o  o\n                       |-----:-----|\n     flier                                      fliers\n\n.. note::\n    This is a low-level drawing function for when you already\n    have the statistical parameters. If you want a boxplot based\n    on a dataset, use `~.Axes.boxplot` instead.\n\nParameters\n----------\nbxpstats : list of dicts\n    A list of dictionaries containing stats for each boxplot.\n    Required keys are:\n\n    - ``med``: Median (float).\n    - ``q1``, ``q3``: First & third quartiles (float).\n    - ``whislo``, ``whishi``: Lower & upper whisker positions (float).\n\n    Optional keys are:\n\n    - ``mean``: Mean (float).  Needed if ``showmeans=True``.\n    - ``fliers``: Data beyond the whiskers (array-like).\n      Needed if ``showfliers=True``.\n    - ``cilo``, ``cihi``: Lower & upper confidence intervals\n      about the median. Needed if ``shownotches=True``.\n    - ``label``: Name of the dataset (str).  If available,\n      this will be used a tick label for the boxplot\n\npositions : array-like, default: [1, 2, ..., n]\n    The positions of the boxes. The ticks and limits\n    are automatically set to match the positions.\n\nwidths : float or array-like, default: None\n    The widths of the boxes.  The default is\n    ``clip(0.15*(distance between extreme positions), 0.15, 0.5)``.\n\ncapwidths : float or array-like, default: None\n    Either a scalar or a vector and sets the width of each cap.\n    The default is ``0.5*(width of the box)``, see *widths*.\n\nvert : bool, optional\n    .. deprecated:: 3.11\n        Use *orientation* instead.\n\n        This is a pending deprecation for 3.10, with full deprecation\n        in 3.11 and removal in 3.13.\n        If this is given during the deprecation period, it overrides\n        the *orientation* parameter.\n\n    If True, plots the boxes vertically.\n    If False, plots the boxes horizontally.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', plots the boxes horizontally.\n    Otherwise, plots the boxes vertically.\n\n    .. versionadded:: 3.10\n\npatch_artist : bool, default: False\n    If `False` produces boxes with the `.Line2D` artist.\n    If `True` produces boxes with the `~matplotlib.patches.Patch` artist.\n\nshownotches, showmeans, showcaps, showbox, showfliers : bool\n    Whether to draw the CI notches, the mean value (both default to\n    False), the caps, the box, and the fliers (all three default to\n    True).\n\nboxprops, whiskerprops, capprops, flierprops, medianprops, meanprops : dict, optional\n    Artist properties for the boxes, whiskers, caps, fliers, medians, and\n    means.\n\nmeanline : bool, default: False\n    If `True` (and *showmeans* is `True`), will try to render the mean\n    as a line spanning the full width of the box according to\n    *meanprops*. Not recommended if *shownotches* is also True.\n    Otherwise, means will be shown as points.\n\nmanage_ticks : bool, default: True\n    If True, the tick locations and labels will be adjusted to match the\n    boxplot positions.\n\nlabel : str or list of str, optional\n    Legend labels. Use a single string when all boxes have the same style and\n    you only want a single legend entry for them. Use a list of strings to\n    label all boxes individually. To be distinguishable, the boxes should be\n    styled individually, which is currently only possible by modifying the\n    returned artists, see e.g. :doc:`/gallery/statistics/boxplot_demo`.\n\n    In the case of a single string, the legend entry will technically be\n    associated with the first box only. By default, the legend will show the\n    median line (``result[\"medians\"]``); if *patch_artist* is True, the legend\n    will show the box `.Patch` artists (``result[\"boxes\"]``) instead.\n\n    .. versionadded:: 3.9\n\nzorder : float, default: ``Line2D.zorder = 2``\n    The zorder of the resulting boxplot.\n\nReturns\n-------\ndict\n    A dictionary mapping each component of the boxplot to a list\n    of the `.Line2D` instances created. That dictionary has the\n    following keys (assuming vertical boxplots):\n\n    - ``boxes``: main bodies of the boxplot showing the quartiles, and\n      the median's confidence intervals if enabled.\n    - ``medians``: horizontal lines at the median of each box.\n    - ``whiskers``: vertical lines up to the last non-outlier data.\n    - ``caps``: horizontal lines at the ends of the whiskers.\n    - ``fliers``: points representing data beyond the whiskers (fliers).\n    - ``means``: points or lines representing the means.\n\nSee Also\n--------\nboxplot : Draw a boxplot from data instead of pre-computed statistics."
        },
        {
          "name": "scatter",
          "docstring": "A scatter plot of *y* vs. *x* with varying marker size and/or color.\n\nParameters\n----------\nx, y : float or array-like, shape (n, )\n    The data positions.\n\ns : float or array-like, shape (n, ), optional\n    The marker size in points**2 (typographic points are 1/72 in.).\n    Default is ``rcParams['lines.markersize'] ** 2``.\n\n    The linewidth and edgecolor can visually interact with the marker\n    size, and can lead to artifacts if the marker size is smaller than\n    the linewidth.\n\n    If the linewidth is greater than 0 and the edgecolor is anything\n    but *'none'*, then the effective size of the marker will be\n    increased by half the linewidth because the stroke will be centered\n    on the edge of the shape.\n\n    To eliminate the marker edge either set *linewidth=0* or\n    *edgecolor='none'*.\n\nc : array-like or list of :mpltype:`color` or :mpltype:`color`, optional\n    The marker colors. Possible values:\n\n    - A scalar or sequence of n numbers to be mapped to colors using\n      *cmap* and *norm*.\n    - A 2D array in which the rows are RGB or RGBA.\n    - A sequence of colors of length n.\n    - A single color format string.\n\n    Note that *c* should not be a single numeric RGB or RGBA sequence\n    because that is indistinguishable from an array of values to be\n    colormapped. If you want to specify the same RGB or RGBA value for\n    all points, use a 2D array with a single row.  Otherwise,\n    value-matching will have precedence in case of a size matching with\n    *x* and *y*.\n\n    If you wish to specify a single color for all points\n    prefer the *color* keyword argument.\n\n    Defaults to `None`. In that case the marker color is determined\n    by the value of *color*, *facecolor* or *facecolors*. In case\n    those are not specified or `None`, the marker color is determined\n    by the next color of the ``Axes``' current \"shape and fill\" color\n    cycle. This cycle defaults to :rc:`axes.prop_cycle`.\n\nmarker : `~.markers.MarkerStyle`, default: :rc:`scatter.marker`\n    The marker style. *marker* can be either an instance of the class\n    or the text shorthand for a particular marker.\n    See :mod:`matplotlib.markers` for more information about marker\n    styles.\n\n%(cmap_doc)s\n\n    This parameter is ignored if *c* is RGB(A).\n\n%(norm_doc)s\n\n    This parameter is ignored if *c* is RGB(A).\n\n%(vmin_vmax_doc)s\n\n    This parameter is ignored if *c* is RGB(A).\n\nalpha : float, default: None\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nlinewidths : float or array-like, default: :rc:`lines.linewidth`\n    The linewidth of the marker edges. Note: The default *edgecolors*\n    is 'face'. You may want to change this as well.\n\nedgecolors : {'face', 'none', *None*} or :mpltype:`color` or list of :mpltype:`color`, default: :rc:`scatter.edgecolors`\n    The edge color of the marker. Possible values:\n\n    - 'face': The edge color will always be the same as the face color.\n    - 'none': No patch boundary will be drawn.\n    - A color or sequence of colors.\n\n    For non-filled markers, *edgecolors* is ignored. Instead, the color\n    is determined like with 'face', i.e. from *c*, *colors*, or\n    *facecolors*.\n\n%(colorizer_doc)s\n\n    This parameter is ignored if *c* is RGB(A).\n\nplotnonfinite : bool, default: False\n    Whether to plot points with nonfinite *c* (i.e. ``inf``, ``-inf``\n    or ``nan``). If ``True`` the points are drawn with the *bad*\n    colormap color (see `.Colormap.set_bad`).\n\nReturns\n-------\n`~matplotlib.collections.PathCollection`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs : `~matplotlib.collections.PathCollection` properties\n    %(PathCollection:kwdoc)s\n\nSee Also\n--------\nplot : To plot scatter plots when markers are identical in size and\n    color.\n\nNotes\n-----\n* The `.plot` function will be faster for scatterplots where markers\n  don't vary in size or color.\n\n* Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in which\n  case all masks will be combined and only unmasked points will be\n  plotted.\n\n* Fundamentally, scatter works with 1D arrays; *x*, *y*, *s*, and *c*\n  may be input as N-D arrays, but within scatter they will be\n  flattened. The exception is *c*, which will be flattened only if its\n  size matches the size of *x* and *y*."
        },
        {
          "name": "hexbin",
          "docstring": "Make a 2D hexagonal binning plot of points *x*, *y*.\n\nIf *C* is *None*, the value of the hexagon is determined by the number\nof points in the hexagon. Otherwise, *C* specifies values at the\ncoordinate (x[i], y[i]). For each hexagon, these values are reduced\nusing *reduce_C_function*.\n\nParameters\n----------\nx, y : array-like\n    The data positions. *x* and *y* must be of the same length.\n\nC : array-like, optional\n    If given, these values are accumulated in the bins. Otherwise,\n    every point has a value of 1. Must be of the same length as *x*\n    and *y*.\n\ngridsize : int or (int, int), default: 100\n    If a single int, the number of hexagons in the *x*-direction.\n    The number of hexagons in the *y*-direction is chosen such that\n    the hexagons are approximately regular.\n\n    Alternatively, if a tuple (*nx*, *ny*), the number of hexagons\n    in the *x*-direction and the *y*-direction. In the\n    *y*-direction, counting is done along vertically aligned\n    hexagons, not along the zig-zag chains of hexagons; see the\n    following illustration.\n\n    .. plot::\n\n       import numpy\n       import matplotlib.pyplot as plt\n\n       np.random.seed(19680801)\n       n= 300\n       x = np.random.standard_normal(n)\n       y = np.random.standard_normal(n)\n\n       fig, ax = plt.subplots(figsize=(4, 4))\n       h = ax.hexbin(x, y, gridsize=(5, 3))\n       hx, hy = h.get_offsets().T\n       ax.plot(hx[24::3], hy[24::3], 'ro-')\n       ax.plot(hx[-3:], hy[-3:], 'ro-')\n       ax.set_title('gridsize=(5, 3)')\n       ax.axis('off')\n\n    To get approximately regular hexagons, choose\n    :math:`n_x = \\sqrt{3}\\,n_y`.\n\nbins : 'log' or int or sequence, default: None\n    Discretization of the hexagon values.\n\n    - If *None*, no binning is applied; the color of each hexagon\n      directly corresponds to its count value.\n    - If 'log', use a logarithmic scale for the colormap.\n      Internally, :math:`log_{10}(i+1)` is used to determine the\n      hexagon color. This is equivalent to ``norm=LogNorm()``.\n    - If an integer, divide the counts in the specified number\n      of bins, and color the hexagons accordingly.\n    - If a sequence of values, the values of the lower bound of\n      the bins to be used.\n\nxscale : {'linear', 'log'}, default: 'linear'\n    Use a linear or log10 scale on the horizontal axis.\n\nyscale : {'linear', 'log'}, default: 'linear'\n    Use a linear or log10 scale on the vertical axis.\n\nmincnt : int >= 0, default: *None*\n    If not *None*, only display cells with at least *mincnt*\n    number of points in the cell.\n\nmarginals : bool, default: *False*\n    If marginals is *True*, plot the marginal density as\n    colormapped rectangles along the bottom of the x-axis and\n    left of the y-axis.\n\nextent : 4-tuple of float, default: *None*\n    The limits of the bins (xmin, xmax, ymin, ymax).\n    The default assigns the limits based on\n    *gridsize*, *x*, *y*, *xscale* and *yscale*.\n\n    If *xscale* or *yscale* is set to 'log', the limits are\n    expected to be the exponent for a power of 10. E.g. for\n    x-limits of 1 and 50 in 'linear' scale and y-limits\n    of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).\n\nReturns\n-------\n`~matplotlib.collections.PolyCollection`\n    A `.PolyCollection` defining the hexagonal bins.\n\n    - `.PolyCollection.get_offsets` contains a Mx2 array containing\n      the x, y positions of the M hexagon centers in data coordinates.\n    - `.PolyCollection.get_array` contains the values of the M\n      hexagons.\n\n    If *marginals* is *True*, horizontal\n    bar and vertical bar (both PolyCollections) will be attached\n    to the return collection as attributes *hbar* and *vbar*.\n\nOther Parameters\n----------------\n%(cmap_doc)s\n\n%(norm_doc)s\n\n%(vmin_vmax_doc)s\n\nalpha : float between 0 and 1, optional\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nlinewidths : float, default: *None*\n    If *None*, defaults to :rc:`patch.linewidth`.\n\nedgecolors : {'face', 'none', *None*} or color, default: 'face'\n    The color of the hexagon edges. Possible values are:\n\n    - 'face': Draw the edges in the same color as the fill color.\n    - 'none': No edges are drawn. This can sometimes lead to unsightly\n      unpainted pixels between the hexagons.\n    - *None*: Draw outlines in the default color.\n    - An explicit color.\n\nreduce_C_function : callable, default: `numpy.mean`\n    The function to aggregate *C* within the bins. It is ignored if\n    *C* is not given. This must have the signature::\n\n        def reduce_C_function(C: array) -> float\n\n    Commonly used functions are:\n\n    - `numpy.mean`: average of the points\n    - `numpy.sum`: integral of the point values\n    - `numpy.amax`: value taken from the largest point\n\n    By default will only reduce cells with at least 1 point because some\n    reduction functions (such as `numpy.amax`) will error/warn with empty\n    input. Changing *mincnt* will adjust the cutoff, and if set to 0 will\n    pass empty input to the reduction function.\n\n%(colorizer_doc)s\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs : `~matplotlib.collections.PolyCollection` properties\n    All other keyword arguments are passed on to `.PolyCollection`:\n\n    %(PolyCollection:kwdoc)s\n\nSee Also\n--------\nhist2d : 2D histogram rectangular bins"
        },
        {
          "name": "arrow",
          "docstring": "[*Discouraged*] Add an arrow to the Axes.\n\nThis draws an arrow from ``(x, y)`` to ``(x+dx, y+dy)``.\n\n.. admonition:: Discouraged\n\n    The use of this method is discouraged because it is not guaranteed\n    that the arrow renders reasonably. For example, the resulting arrow\n    is affected by the Axes aspect ratio and limits, which may distort\n    the arrow.\n\n    Consider using `~.Axes.annotate` without a text instead, e.g. ::\n\n        ax.annotate(\"\", xytext=(0, 0), xy=(0.5, 0.5),\n                    arrowprops=dict(arrowstyle=\"->\"))\n\nParameters\n----------\n%(FancyArrow)s\n\nReturns\n-------\n`.FancyArrow`\n    The created `.FancyArrow` object."
        },
        {
          "name": "quiverkey",
          "docstring": null
        },
        {
          "name": "quiver",
          "docstring": "%(quiver_doc)s"
        },
        {
          "name": "barbs",
          "docstring": "%(barbs_doc)s"
        },
        {
          "name": "fill",
          "docstring": "Plot filled polygons.\n\nParameters\n----------\n*args : sequence of x, y, [color]\n    Each polygon is defined by the lists of *x* and *y* positions of\n    its nodes, optionally followed by a *color* specifier. See\n    :mod:`matplotlib.colors` for supported color specifiers. The\n    standard color cycle is used for polygons without a color\n    specifier.\n\n    You can plot multiple polygons by providing multiple *x*, *y*,\n    *[color]* groups.\n\n    For example, each of the following is legal::\n\n        ax.fill(x, y)                    # a polygon with default color\n        ax.fill(x, y, \"b\")               # a blue polygon\n        ax.fill(x, y, x2, y2)            # two polygons\n        ax.fill(x, y, \"b\", x2, y2, \"r\")  # a blue and a red polygon\n\ndata : indexable object, optional\n    An object with labelled data. If given, provide the label names to\n    plot in *x* and *y*, e.g.::\n\n        ax.fill(\"time\", \"signal\",\n                data={\"time\": [0, 1, 2], \"signal\": [0, 1, 0]})\n\nReturns\n-------\nlist of `~matplotlib.patches.Polygon`\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.patches.Polygon` properties\n\nNotes\n-----\nUse :meth:`fill_between` if you would like to fill the region between\ntwo curves."
        },
        {
          "name": "fill_between",
          "docstring": null
        },
        {
          "name": "fill_betweenx",
          "docstring": null
        },
        {
          "name": "imshow",
          "docstring": "Display data as an image, i.e., on a 2D regular raster.\n\nThe input may either be actual RGB(A) data, or 2D scalar data, which\nwill be rendered as a pseudocolor image. For displaying a grayscale\nimage, set up the colormapping using the parameters\n``cmap='gray', vmin=0, vmax=255``.\n\nThe number of pixels used to render an image is set by the Axes size\nand the figure *dpi*. This can lead to aliasing artifacts when\nthe image is resampled, because the displayed image size will usually\nnot match the size of *X* (see\n:doc:`/gallery/images_contours_and_fields/image_antialiasing`).\nThe resampling can be controlled via the *interpolation* parameter\nand/or :rc:`image.interpolation`.\n\nParameters\n----------\nX : array-like or PIL image\n    The image data. Supported array shapes are:\n\n    - (M, N): an image with scalar data. The values are mapped to\n      colors using normalization and a colormap. See parameters *norm*,\n      *cmap*, *vmin*, *vmax*.\n    - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n    - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n      i.e. including transparency.\n\n    The first two dimensions (M, N) define the rows and columns of\n    the image.\n\n    Out-of-range RGB(A) values are clipped.\n\n%(cmap_doc)s\n\n    This parameter is ignored if *X* is RGB(A).\n\n%(norm_doc)s\n\n    This parameter is ignored if *X* is RGB(A).\n\n%(vmin_vmax_doc)s\n\n    This parameter is ignored if *X* is RGB(A).\n\n%(colorizer_doc)s\n\n    This parameter is ignored if *X* is RGB(A).\n\naspect : {'equal', 'auto'} or float or None, default: None\n    The aspect ratio of the Axes.  This parameter is particularly\n    relevant for images since it determines whether data pixels are\n    square.\n\n    This parameter is a shortcut for explicitly calling\n    `.Axes.set_aspect`. See there for further details.\n\n    - 'equal': Ensures an aspect ratio of 1. Pixels will be square\n      (unless pixel sizes are explicitly made non-square in data\n      coordinates using *extent*).\n    - 'auto': The Axes is kept fixed and the aspect is adjusted so\n      that the data fit in the Axes. In general, this will result in\n      non-square pixels.\n\n    Normally, None (the default) means to use :rc:`image.aspect`.  However, if\n    the image uses a transform that does not contain the axes data transform,\n    then None means to not modify the axes aspect at all (in that case, directly\n    call `.Axes.set_aspect` if desired).\n\ninterpolation : str, default: :rc:`image.interpolation`\n    The interpolation method used.\n\n    Supported values are 'none', 'auto', 'nearest', 'bilinear',\n    'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite',\n    'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell',\n    'sinc', 'lanczos', 'blackman'.\n\n    The data *X* is resampled to the pixel size of the image on the\n    figure canvas, using the interpolation method to either up- or\n    downsample the data.\n\n    If *interpolation* is 'none', then for the ps, pdf, and svg\n    backends no down- or upsampling occurs, and the image data is\n    passed to the backend as a native image.  Note that different ps,\n    pdf, and svg viewers may display these raw pixels differently. On\n    other backends, 'none' is the same as 'nearest'.\n\n    If *interpolation* is the default 'auto', then 'nearest'\n    interpolation is used if the image is upsampled by more than a\n    factor of three (i.e. the number of display pixels is at least\n    three times the size of the data array).  If the upsampling rate is\n    smaller than 3, or the image is downsampled, then 'hanning'\n    interpolation is used to act as an anti-aliasing filter, unless the\n    image happens to be upsampled by exactly a factor of two or one.\n\n    See\n    :doc:`/gallery/images_contours_and_fields/interpolation_methods`\n    for an overview of the supported interpolation methods, and\n    :doc:`/gallery/images_contours_and_fields/image_antialiasing` for\n    a discussion of image antialiasing.\n\n    Some interpolation methods require an additional radius parameter,\n    which can be set by *filterrad*. Additionally, the antigrain image\n    resize filter is controlled by the parameter *filternorm*.\n\ninterpolation_stage : {'auto', 'data', 'rgba'}, default: 'auto'\n    Supported values:\n\n    - 'data': Interpolation is carried out on the data provided by the user\n      This is useful if interpolating between pixels during upsampling.\n    - 'rgba': The interpolation is carried out in RGBA-space after the\n      color-mapping has been applied. This is useful if downsampling and\n      combining pixels visually.\n    - 'auto': Select a suitable interpolation stage automatically. This uses\n      'rgba' when downsampling, or upsampling at a rate less than 3, and\n      'data' when upsampling at a higher rate.\n\n    See :doc:`/gallery/images_contours_and_fields/image_antialiasing` for\n    a discussion of image antialiasing.\n\nalpha : float or array-like, optional\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n    If *alpha* is an array, the alpha blending values are applied pixel\n    by pixel, and *alpha* must have the same shape as *X*.\n\norigin : {'upper', 'lower'}, default: :rc:`image.origin`\n    Place the [0, 0] index of the array in the upper left or lower\n    left corner of the Axes. The convention (the default) 'upper' is\n    typically used for matrices and images.\n\n    Note that the vertical axis points upward for 'lower'\n    but downward for 'upper'.\n\n    See the :ref:`imshow_extent` tutorial for\n    examples and a more detailed description.\n\nextent : floats (left, right, bottom, top), optional\n    The bounding box in data coordinates that the image will fill.\n    These values may be unitful and match the units of the Axes.\n    The image is stretched individually along x and y to fill the box.\n\n    The default extent is determined by the following conditions.\n    Pixels have unit size in data coordinates. Their centers are on\n    integer coordinates, and their center coordinates range from 0 to\n    columns-1 horizontally and from 0 to rows-1 vertically.\n\n    Note that the direction of the vertical axis and thus the default\n    values for top and bottom depend on *origin*:\n\n    - For ``origin == 'upper'`` the default is\n      ``(-0.5, numcols-0.5, numrows-0.5, -0.5)``.\n    - For ``origin == 'lower'`` the default is\n      ``(-0.5, numcols-0.5, -0.5, numrows-0.5)``.\n\n    See the :ref:`imshow_extent` tutorial for\n    examples and a more detailed description.\n\nfilternorm : bool, default: True\n    A parameter for the antigrain image resize filter (see the\n    antigrain documentation).  If *filternorm* is set, the filter\n    normalizes integer values and corrects the rounding errors. It\n    doesn't do anything with the source floating point values, it\n    corrects only integers according to the rule of 1.0 which means\n    that any sum of pixel weights must be equal to 1.0.  So, the\n    filter function must produce a graph of the proper shape.\n\nfilterrad : float > 0, default: 4.0\n    The filter radius for filters that have a radius parameter, i.e.\n    when interpolation is one of: 'sinc', 'lanczos' or 'blackman'.\n\nresample : bool, default: :rc:`image.resample`\n    When *True*, use a full resampling method.  When *False*, only\n    resample when the output image is larger than the input image.\n\nurl : str, optional\n    Set the url of the created `.AxesImage`. See `.Artist.set_url`.\n\nReturns\n-------\n`~matplotlib.image.AxesImage`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs : `~matplotlib.artist.Artist` properties\n    These parameters are passed on to the constructor of the\n    `.AxesImage` artist.\n\nSee Also\n--------\nmatshow : Plot a matrix or an array as an image.\n\nNotes\n-----\nUnless *extent* is used, pixel centers will be located at integer\ncoordinates. In other words: the origin will coincide with the center\nof pixel (0, 0).\n\nThere are two common representations for RGB images with an alpha\nchannel:\n\n-   Straight (unassociated) alpha: R, G, and B channels represent the\n    color of the pixel, disregarding its opacity.\n-   Premultiplied (associated) alpha: R, G, and B channels represent\n    the color of the pixel, adjusted for its opacity by multiplication.\n\n`~matplotlib.pyplot.imshow` expects RGB images adopting the straight\n(unassociated) alpha representation."
        },
        {
          "name": "pcolor",
          "docstring": "Create a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature::\n\n    pcolor([X, Y,] C, /, **kwargs)\n\n*X* and *Y* can be used to specify the corners of the quadrilaterals.\n\nThe arguments *X*, *Y*, *C* are positional-only.\n\n.. hint::\n\n    ``pcolor()`` can be very slow for large arrays. In most\n    cases you should use the similar but much faster\n    `~.Axes.pcolormesh` instead. See\n    :ref:`Differences between pcolor() and pcolormesh()\n    <differences-pcolor-pcolormesh>` for a discussion of the\n    differences.\n\nParameters\n----------\nC : 2D array-like\n    The color-mapped values.  Color-mapping is controlled by *cmap*,\n    *norm*, *vmin*, and *vmax*.\n\nX, Y : array-like, optional\n    The coordinates of the corners of quadrilaterals of a pcolormesh::\n\n        (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                              \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n                              \u2502     \u2502\n                              \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n            (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n\n    Note that the column index corresponds to the x-coordinate, and\n    the row index corresponds to y. For details, see the\n    :ref:`Notes <axes-pcolormesh-grid-orientation>` section below.\n\n    If ``shading='flat'`` the dimensions of *X* and *Y* should be one\n    greater than those of *C*, and the quadrilateral is colored due\n    to the value at ``C[i, j]``.  If *X*, *Y* and *C* have equal\n    dimensions, a warning will be raised and the last row and column\n    of *C* will be ignored.\n\n    If ``shading='nearest'``, the dimensions of *X* and *Y* should be\n    the same as those of *C* (if not, a ValueError will be raised). The\n    color ``C[i, j]`` will be centered on ``(X[i, j], Y[i, j])``.\n\n    If *X* and/or *Y* are 1-D arrays or column vectors they will be\n    expanded as needed into the appropriate 2D arrays, making a\n    rectangular grid.\n\nshading : {'flat', 'nearest', 'auto'}, default: :rc:`pcolor.shading`\n    The fill style for the quadrilateral. Possible values:\n\n    - 'flat': A solid color is used for each quad. The color of the\n      quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\n      ``C[i, j]``. The dimensions of *X* and *Y* should be\n      one greater than those of *C*; if they are the same as *C*,\n      then a deprecation warning is raised, and the last row\n      and column of *C* are dropped.\n    - 'nearest': Each grid point will have a color centered on it,\n      extending halfway between the adjacent grid centers.  The\n      dimensions of *X* and *Y* must be the same as *C*.\n    - 'auto': Choose 'flat' if dimensions of *X* and *Y* are one\n      larger than *C*.  Choose 'nearest' if dimensions are the same.\n\n    See :doc:`/gallery/images_contours_and_fields/pcolormesh_grids`\n    for more description.\n\n%(cmap_doc)s\n\n%(norm_doc)s\n\n%(vmin_vmax_doc)s\n\n%(colorizer_doc)s\n\nedgecolors : {'none', None, 'face', color, color sequence}, optional\n    The color of the edges. Defaults to 'none'. Possible values:\n\n    - 'none' or '': No edge.\n    - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n      :rc:`patch.force_edgecolor` has to be True for this to work.\n    - 'face': Use the adjacent face color.\n    - A color or sequence of colors will set the edge color.\n\n    The singular form *edgecolor* works as an alias.\n\nalpha : float, default: None\n    The alpha blending value of the face color, between 0 (transparent)\n    and 1 (opaque). Note: The edgecolor is currently not affected by\n    this.\n\nsnap : bool, default: False\n    Whether to snap the mesh to pixel boundaries.\n\nReturns\n-------\n`matplotlib.collections.PolyQuadMesh`\n\nOther Parameters\n----------------\nantialiaseds : bool, default: False\n    The default *antialiaseds* is False if the default\n    *edgecolors*\\ =\"none\" is used.  This eliminates artificial lines\n    at patch boundaries, and works regardless of the value of alpha.\n    If *edgecolors* is not \"none\", then the default *antialiaseds*\n    is taken from :rc:`patch.antialiased`.\n    Stroking the edges may be preferred if *alpha* is 1, but will\n    cause artifacts otherwise.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additionally, the following arguments are allowed. They are passed\n    along to the `~matplotlib.collections.PolyQuadMesh` constructor:\n\n%(PolyCollection:kwdoc)s\n\nSee Also\n--------\npcolormesh : for an explanation of the differences between\n    pcolor and pcolormesh.\nimshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n    faster alternative.\n\nNotes\n-----\n**Masked arrays**\n\n*X*, *Y* and *C* may be masked arrays. If either ``C[i, j]``, or one\nof the vertices surrounding ``C[i, j]`` (*X* or *Y* at\n``[i, j], [i+1, j], [i, j+1], [i+1, j+1]``) is masked, nothing is\nplotted.\n\n.. _axes-pcolor-grid-orientation:\n\n**Grid orientation**\n\nThe grid orientation follows the standard matrix convention: An array\n*C* with shape (nrows, ncolumns) is plotted with the column number as\n*X* and the row number as *Y*."
        },
        {
          "name": "pcolormesh",
          "docstring": "Create a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature::\n\n    pcolormesh([X, Y,] C, /, **kwargs)\n\n*X* and *Y* can be used to specify the corners of the quadrilaterals.\n\nThe arguments *X*, *Y*, *C* are positional-only.\n\n.. hint::\n\n   `~.Axes.pcolormesh` is similar to `~.Axes.pcolor`. It is much faster\n   and preferred in most cases. For a detailed discussion on the\n   differences see :ref:`Differences between pcolor() and pcolormesh()\n   <differences-pcolor-pcolormesh>`.\n\nParameters\n----------\nC : array-like\n    The mesh data. Supported array shapes are:\n\n    - (M, N) or M*N: a mesh with scalar data. The values are mapped to\n      colors using normalization and a colormap. See parameters *norm*,\n      *cmap*, *vmin*, *vmax*.\n    - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n    - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n      i.e. including transparency.\n\n    The first two dimensions (M, N) define the rows and columns of\n    the mesh data.\n\nX, Y : array-like, optional\n    The coordinates of the corners of quadrilaterals of a pcolormesh::\n\n        (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                              \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n                              \u2502     \u2502\n                              \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n            (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n\n    Note that the column index corresponds to the x-coordinate, and\n    the row index corresponds to y. For details, see the\n    :ref:`Notes <axes-pcolormesh-grid-orientation>` section below.\n\n    If ``shading='flat'`` the dimensions of *X* and *Y* should be one\n    greater than those of *C*, and the quadrilateral is colored due\n    to the value at ``C[i, j]``.  If *X*, *Y* and *C* have equal\n    dimensions, a warning will be raised and the last row and column\n    of *C* will be ignored.\n\n    If ``shading='nearest'`` or ``'gouraud'``, the dimensions of *X*\n    and *Y* should be the same as those of *C* (if not, a ValueError\n    will be raised).  For ``'nearest'`` the color ``C[i, j]`` is\n    centered on ``(X[i, j], Y[i, j])``.  For ``'gouraud'``, a smooth\n    interpolation is carried out between the quadrilateral corners.\n\n    If *X* and/or *Y* are 1-D arrays or column vectors they will be\n    expanded as needed into the appropriate 2D arrays, making a\n    rectangular grid.\n\n%(cmap_doc)s\n\n%(norm_doc)s\n\n%(vmin_vmax_doc)s\n\n%(colorizer_doc)s\n\nedgecolors : {'none', None, 'face', color, color sequence}, optional\n    The color of the edges. Defaults to 'none'. Possible values:\n\n    - 'none' or '': No edge.\n    - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n      :rc:`patch.force_edgecolor` has to be True for this to work.\n    - 'face': Use the adjacent face color.\n    - A color or sequence of colors will set the edge color.\n\n    The singular form *edgecolor* works as an alias.\n\nalpha : float, default: None\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nshading : {'flat', 'nearest', 'gouraud', 'auto'}, optional\n    The fill style for the quadrilateral; defaults to\n    :rc:`pcolor.shading`. Possible values:\n\n    - 'flat': A solid color is used for each quad. The color of the\n      quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\n      ``C[i, j]``. The dimensions of *X* and *Y* should be\n      one greater than those of *C*; if they are the same as *C*,\n      then a deprecation warning is raised, and the last row\n      and column of *C* are dropped.\n    - 'nearest': Each grid point will have a color centered on it,\n      extending halfway between the adjacent grid centers.  The\n      dimensions of *X* and *Y* must be the same as *C*.\n    - 'gouraud': Each quad will be Gouraud shaded: The color of the\n      corners (i', j') are given by ``C[i', j']``. The color values of\n      the area in between is interpolated from the corner values.\n      The dimensions of *X* and *Y* must be the same as *C*. When\n      Gouraud shading is used, *edgecolors* is ignored.\n    - 'auto': Choose 'flat' if dimensions of *X* and *Y* are one\n      larger than *C*.  Choose 'nearest' if dimensions are the same.\n\n    See :doc:`/gallery/images_contours_and_fields/pcolormesh_grids`\n    for more description.\n\nsnap : bool, default: False\n    Whether to snap the mesh to pixel boundaries.\n\nrasterized : bool, optional\n    Rasterize the pcolormesh when drawing vector graphics.  This can\n    speed up rendering and produce smaller files for large data sets.\n    See also :doc:`/gallery/misc/rasterization_demo`.\n\nReturns\n-------\n`matplotlib.collections.QuadMesh`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additionally, the following arguments are allowed. They are passed\n    along to the `~matplotlib.collections.QuadMesh` constructor:\n\n%(QuadMesh:kwdoc)s\n\nSee Also\n--------\npcolor : An alternative implementation with slightly different\n    features. For a detailed discussion on the differences see\n    :ref:`Differences between pcolor() and pcolormesh()\n    <differences-pcolor-pcolormesh>`.\nimshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n    faster alternative.\n\nNotes\n-----\n**Masked arrays**\n\n*C* may be a masked array. If ``C[i, j]`` is masked, the corresponding\nquadrilateral will be transparent. Masking of *X* and *Y* is not\nsupported. Use `~.Axes.pcolor` if you need this functionality.\n\n.. _axes-pcolormesh-grid-orientation:\n\n**Grid orientation**\n\nThe grid orientation follows the standard matrix convention: An array\n*C* with shape (nrows, ncolumns) is plotted with the column number as\n*X* and the row number as *Y*.\n\n.. _differences-pcolor-pcolormesh:\n\n**Differences between pcolor() and pcolormesh()**\n\nBoth methods are used to create a pseudocolor plot of a 2D array\nusing quadrilaterals.\n\nThe main difference lies in the created object and internal data\nhandling:\nWhile `~.Axes.pcolor` returns a `.PolyQuadMesh`, `~.Axes.pcolormesh`\nreturns a `.QuadMesh`. The latter is more specialized for the given\npurpose and thus is faster. It should almost always be preferred.\n\nThere is also a slight difference in the handling of masked arrays.\nBoth `~.Axes.pcolor` and `~.Axes.pcolormesh` support masked arrays\nfor *C*. However, only `~.Axes.pcolor` supports masked arrays for *X*\nand *Y*. The reason lies in the internal handling of the masked values.\n`~.Axes.pcolor` leaves out the respective polygons from the\nPolyQuadMesh. `~.Axes.pcolormesh` sets the facecolor of the masked\nelements to transparent. You can see the difference when using\nedgecolors. While all edges are drawn irrespective of masking in a\nQuadMesh, the edge between two adjacent masked quadrilaterals in\n`~.Axes.pcolor` is not drawn as the corresponding polygons do not\nexist in the PolyQuadMesh. Because PolyQuadMesh draws each individual\npolygon, it also supports applying hatches and linestyles to the collection.\n\nAnother difference is the support of Gouraud shading in\n`~.Axes.pcolormesh`, which is not available with `~.Axes.pcolor`."
        },
        {
          "name": "pcolorfast",
          "docstring": "Create a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature::\n\n    ax.pcolorfast([X, Y], C, /, **kwargs)\n\nThe arguments *X*, *Y*, *C* are positional-only.\n\nThis method is similar to `~.Axes.pcolor` and `~.Axes.pcolormesh`.\nIt's designed to provide the fastest pcolor-type plotting with the\nAgg backend. To achieve this, it uses different algorithms internally\ndepending on the complexity of the input grid (regular rectangular,\nnon-regular rectangular or arbitrary quadrilateral).\n\n.. warning::\n\n    This method is experimental. Compared to `~.Axes.pcolor` or\n    `~.Axes.pcolormesh` it has some limitations:\n\n    - It supports only flat shading (no outlines)\n    - It lacks support for log scaling of the axes.\n    - It does not have a pyplot wrapper.\n\nParameters\n----------\nC : array-like\n    The image data. Supported array shapes are:\n\n    - (M, N): an image with scalar data.  Color-mapping is controlled\n      by *cmap*, *norm*, *vmin*, and *vmax*.\n    - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n    - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n      i.e. including transparency.\n\n    The first two dimensions (M, N) define the rows and columns of\n    the image.\n\n    This parameter can only be passed positionally.\n\nX, Y : tuple or array-like, default: ``(0, N)``, ``(0, M)``\n    *X* and *Y* are used to specify the coordinates of the\n    quadrilaterals. There are different ways to do this:\n\n    - Use tuples ``X=(xmin, xmax)`` and ``Y=(ymin, ymax)`` to define\n      a *uniform rectangular grid*.\n\n      The tuples define the outer edges of the grid. All individual\n      quadrilaterals will be of the same size. This is the fastest\n      version.\n\n    - Use 1D arrays *X*, *Y* to specify a *non-uniform rectangular\n      grid*.\n\n      In this case *X* and *Y* have to be monotonic 1D arrays of length\n      *N+1* and *M+1*, specifying the x and y boundaries of the cells.\n\n      The speed is intermediate. Note: The grid is checked, and if\n      found to be uniform the fast version is used.\n\n    - Use 2D arrays *X*, *Y* if you need an *arbitrary quadrilateral\n      grid* (i.e. if the quadrilaterals are not rectangular).\n\n      In this case *X* and *Y* are 2D arrays with shape (M + 1, N + 1),\n      specifying the x and y coordinates of the corners of the colored\n      quadrilaterals.\n\n      This is the most general, but the slowest to render.  It may\n      produce faster and more compact output using ps, pdf, and\n      svg backends, however.\n\n    These arguments can only be passed positionally.\n\n%(cmap_doc)s\n\n    This parameter is ignored if *C* is RGB(A).\n\n%(norm_doc)s\n\n    This parameter is ignored if *C* is RGB(A).\n\n%(vmin_vmax_doc)s\n\n    This parameter is ignored if *C* is RGB(A).\n\n%(colorizer_doc)s\n\n    This parameter is ignored if *C* is RGB(A).\n\nalpha : float, default: None\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nsnap : bool, default: False\n    Whether to snap the mesh to pixel boundaries.\n\nReturns\n-------\n`.AxesImage` or `.PcolorImage` or `.QuadMesh`\n    The return type depends on the type of grid:\n\n    - `.AxesImage` for a regular rectangular grid.\n    - `.PcolorImage` for a non-regular rectangular grid.\n    - `.QuadMesh` for a non-rectangular grid.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Supported additional parameters depend on the type of grid.\n    See return types of *image* for further description."
        },
        {
          "name": "contour",
          "docstring": "Plot contour lines.\n\nCall signature::\n\n    contour([X, Y,] Z, /, [levels], **kwargs)\n\nThe arguments *X*, *Y*, *Z* are positional-only.\n%(contour_doc)s"
        },
        {
          "name": "contourf",
          "docstring": "Plot filled contours.\n\nCall signature::\n\n    contourf([X, Y,] Z, /, [levels], **kwargs)\n\nThe arguments *X*, *Y*, *Z* are positional-only.\n%(contour_doc)s"
        },
        {
          "name": "clabel",
          "docstring": "Label a contour plot.\n\nAdds labels to line contours in given `.ContourSet`.\n\nParameters\n----------\nCS : `.ContourSet` instance\n    Line contours to label.\n\nlevels : array-like, optional\n    A list of level values, that should be labeled. The list must be\n    a subset of ``CS.levels``. If not given, all levels are labeled.\n\n**kwargs\n    All other parameters are documented in `~.ContourLabeler.clabel`."
        },
        {
          "name": "hist",
          "docstring": "Compute and plot a histogram.\n\nThis method uses `numpy.histogram` to bin the data in *x* and count the\nnumber of values in each bin, then draws the distribution either as a\n`.BarContainer` or `.Polygon`. The *bins*, *range*, *density*, and\n*weights* parameters are forwarded to `numpy.histogram`.\n\nIf the data has already been binned and counted, use `~.bar` or\n`~.stairs` to plot the distribution::\n\n    counts, bins = np.histogram(x)\n    plt.stairs(counts, bins)\n\nAlternatively, plot pre-computed bins and counts using ``hist()`` by\ntreating each bin as a single point with a weight equal to its count::\n\n    plt.hist(bins[:-1], bins, weights=counts)\n\nThe data input *x* can be a singular array, a list of datasets of\npotentially different lengths ([*x0*, *x1*, ...]), or a 2D ndarray in\nwhich each column is a dataset. Note that the ndarray form is\ntransposed relative to the list form. If the input is an array, then\nthe return value is a tuple (*n*, *bins*, *patches*); if the input is a\nsequence of arrays, then the return value is a tuple\n([*n0*, *n1*, ...], *bins*, [*patches0*, *patches1*, ...]).\n\nMasked arrays are not supported.\n\nParameters\n----------\nx : (n,) array or sequence of (n,) arrays\n    Input values, this takes either a single array or a sequence of\n    arrays which are not required to be of the same length.\n\nbins : int or sequence or str, default: :rc:`hist.bins`\n    If *bins* is an integer, it defines the number of equal-width bins\n    in the range.\n\n    If *bins* is a sequence, it defines the bin edges, including the\n    left edge of the first bin and the right edge of the last bin;\n    in this case, bins may be unequally spaced.  All but the last\n    (righthand-most) bin is half-open.  In other words, if *bins* is::\n\n        [1, 2, 3, 4]\n\n    then the first bin is ``[1, 2)`` (including 1, but excluding 2) and\n    the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which\n    *includes* 4.\n\n    If *bins* is a string, it is one of the binning strategies\n    supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane',\n    'scott', 'stone', 'rice', 'sturges', or 'sqrt'.\n\nrange : tuple or None, default: None\n    The lower and upper range of the bins. Lower and upper outliers\n    are ignored. If not provided, *range* is ``(x.min(), x.max())``.\n    Range has no effect if *bins* is a sequence.\n\n    If *bins* is a sequence or *range* is specified, autoscaling\n    is based on the specified bin range instead of the\n    range of x.\n\ndensity : bool, default: False\n    If ``True``, draw and return a probability density: each bin\n    will display the bin's raw count divided by the total number of\n    counts *and the bin width*\n    (``density = counts / (sum(counts) * np.diff(bins))``),\n    so that the area under the histogram integrates to 1\n    (``np.sum(density * np.diff(bins)) == 1``).\n\n    If *stacked* is also ``True``, the sum of the histograms is\n    normalized to 1.\n\nweights : (n,) array-like or None, default: None\n    An array of weights, of the same shape as *x*.  Each value in\n    *x* only contributes its associated weight towards the bin count\n    (instead of 1).  If *density* is ``True``, the weights are\n    normalized, so that the integral of the density over the range\n    remains 1.\n\ncumulative : bool or -1, default: False\n    If ``True``, then a histogram is computed where each bin gives the\n    counts in that bin plus all bins for smaller values. The last bin\n    gives the total number of datapoints.\n\n    If *density* is also ``True`` then the histogram is normalized such\n    that the last bin equals 1.\n\n    If *cumulative* is a number less than 0 (e.g., -1), the direction\n    of accumulation is reversed.  In this case, if *density* is also\n    ``True``, then the histogram is normalized such that the first bin\n    equals 1.\n\nbottom : array-like or float, default: 0\n    Location of the bottom of each bin, i.e. bins are drawn from\n    ``bottom`` to ``bottom + hist(x, bins)`` If a scalar, the bottom\n    of each bin is shifted by the same amount. If an array, each bin\n    is shifted independently and the length of bottom must match the\n    number of bins. If None, defaults to 0.\n\nhisttype : {'bar', 'barstacked', 'step', 'stepfilled'}, default: 'bar'\n    The type of histogram to draw.\n\n    - 'bar' is a traditional bar-type histogram.  If multiple data\n      are given the bars are arranged side by side.\n    - 'barstacked' is a bar-type histogram where multiple\n      data are stacked on top of each other.\n    - 'step' generates a lineplot that is by default unfilled.\n    - 'stepfilled' generates a lineplot that is by default filled.\n\nalign : {'left', 'mid', 'right'}, default: 'mid'\n    The horizontal alignment of the histogram bars.\n\n    - 'left': bars are centered on the left bin edges.\n    - 'mid': bars are centered between the bin edges.\n    - 'right': bars are centered on the right bin edges.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', `~.Axes.barh` will be used for bar-type histograms\n    and the *bottom* kwarg will be the left edges.\n\nrwidth : float or None, default: None\n    The relative width of the bars as a fraction of the bin width.  If\n    ``None``, automatically compute the width.\n\n    Ignored if *histtype* is 'step' or 'stepfilled'.\n\nlog : bool, default: False\n    If ``True``, the histogram axis will be set to a log scale.\n\ncolor : :mpltype:`color` or list of :mpltype:`color` or None, default: None\n    Color or sequence of colors, one per dataset.  Default (``None``)\n    uses the standard line color sequence.\n\nlabel : str or list of str, optional\n    String, or sequence of strings to match multiple datasets.  Bar\n    charts yield multiple patches per dataset, but only the first gets\n    the label, so that `~.Axes.legend` will work as expected.\n\nstacked : bool, default: False\n    If ``True``, multiple data are stacked on top of each other If\n    ``False`` multiple data are arranged side by side if histtype is\n    'bar' or on top of each other if histtype is 'step'\n\nReturns\n-------\nn : array or list of arrays\n    The values of the histogram bins. See *density* and *weights* for a\n    description of the possible semantics.  If input *x* is an array,\n    then this is an array of length *nbins*. If input is a sequence of\n    arrays ``[data1, data2, ...]``, then this is a list of arrays with\n    the values of the histograms for each of the arrays in the same\n    order.  The dtype of the array *n* (or of its element arrays) will\n    always be float even if no weighting or normalization is used.\n\nbins : array\n    The edges of the bins. Length nbins + 1 (nbins left edges and right\n    edge of last bin).  Always a single array even when multiple data\n    sets are passed in.\n\npatches : `.BarContainer` or list of a single `.Polygon` or list of such objects\n    Container of individual artists used to create the histogram\n    or list of such containers if there are multiple input datasets.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    `~matplotlib.patches.Patch` properties. The following properties\n    additionally accept a sequence of values corresponding to the\n    datasets in *x*:\n    *edgecolor*, *facecolor*, *linewidth*, *linestyle*, *hatch*.\n\n    .. versionadded:: 3.10\n       Allowing sequences of values in above listed Patch properties.\n\nSee Also\n--------\nhist2d : 2D histogram with rectangular bins\nhexbin : 2D histogram with hexagonal bins\nstairs : Plot a pre-computed histogram\nbar : Plot a pre-computed histogram\n\nNotes\n-----\nFor large numbers of bins (>1000), plotting can be significantly\naccelerated by using `~.Axes.stairs` to plot a pre-computed histogram\n(``plt.stairs(*np.histogram(data))``), or by setting *histtype* to\n'step' or 'stepfilled' rather than 'bar' or 'barstacked'."
        },
        {
          "name": "stairs",
          "docstring": "Draw a stepwise constant function as a line or a filled plot.\n\n*edges* define the x-axis positions of the steps. *values* the function values\nbetween these steps. Depending on *fill*, the function is drawn either as a\ncontinuous line with vertical segments at the edges, or as a filled area.\n\nParameters\n----------\nvalues : array-like\n    The step heights.\n\nedges : array-like\n    The step positions, with ``len(edges) == len(vals) + 1``,\n    between which the curve takes on vals values.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    The direction of the steps. Vertical means that *values* are along\n    the y-axis, and edges are along the x-axis.\n\nbaseline : float, array-like or None, default: 0\n    The bottom value of the bounding edges or when\n    ``fill=True``, position of lower edge. If *fill* is\n    True or an array is passed to *baseline*, a closed\n    path is drawn.\n\n    If None, then drawn as an unclosed Path.\n\nfill : bool, default: False\n    Whether the area under the step curve should be filled.\n\n    Passing both ``fill=True` and ``baseline=None`` will likely result in\n    undesired filling: the first and last points will be connected\n    with a straight line and the fill will be between this line and the stairs.\n\n\nReturns\n-------\nStepPatch : `~matplotlib.patches.StepPatch`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    `~matplotlib.patches.StepPatch` properties"
        },
        {
          "name": "hist2d",
          "docstring": "Make a 2D histogram plot.\n\nParameters\n----------\nx, y : array-like, shape (n, )\n    Input values\n\nbins : None or int or [int, int] or array-like or [array, array]\n\n    The bin specification:\n\n    - If int, the number of bins for the two dimensions\n      (``nx = ny = bins``).\n    - If ``[int, int]``, the number of bins in each dimension\n      (``nx, ny = bins``).\n    - If array-like, the bin edges for the two dimensions\n      (``x_edges = y_edges = bins``).\n    - If ``[array, array]``, the bin edges in each dimension\n      (``x_edges, y_edges = bins``).\n\n    The default value is 10.\n\nrange : array-like shape(2, 2), optional\n    The leftmost and rightmost edges of the bins along each dimension\n    (if not specified explicitly in the bins parameters): ``[[xmin,\n    xmax], [ymin, ymax]]``. All values outside of this range will be\n    considered outliers and not tallied in the histogram.\n\ndensity : bool, default: False\n    Normalize histogram.  See the documentation for the *density*\n    parameter of `~.Axes.hist` for more details.\n\nweights : array-like, shape (n, ), optional\n    An array of values w_i weighing each sample (x_i, y_i).\n\ncmin, cmax : float, default: None\n    All bins that has count less than *cmin* or more than *cmax* will not be\n    displayed (set to NaN before passing to `~.Axes.pcolormesh`) and these count\n    values in the return value count histogram will also be set to nan upon\n    return.\n\nReturns\n-------\nh : 2D array\n    The bi-dimensional histogram of samples x and y. Values in x are\n    histogrammed along the first dimension and values in y are\n    histogrammed along the second dimension.\nxedges : 1D array\n    The bin edges along the x-axis.\nyedges : 1D array\n    The bin edges along the y-axis.\nimage : `~.matplotlib.collections.QuadMesh`\n\nOther Parameters\n----------------\n%(cmap_doc)s\n\n%(norm_doc)s\n\n%(vmin_vmax_doc)s\n\n%(colorizer_doc)s\n\nalpha : ``0 <= scalar <= 1`` or ``None``, optional\n    The alpha blending value.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additional parameters are passed along to the\n    `~.Axes.pcolormesh` method and `~matplotlib.collections.QuadMesh`\n    constructor.\n\nSee Also\n--------\nhist : 1D histogram plotting\nhexbin : 2D histogram with hexagonal bins\n\nNotes\n-----\n- Currently ``hist2d`` calculates its own axis limits, and any limits\n  previously set are ignored.\n- Rendering the histogram with a logarithmic color scale is\n  accomplished by passing a `.colors.LogNorm` instance to the *norm*\n  keyword argument. Likewise, power-law normalization (similar\n  in effect to gamma correction) can be accomplished with\n  `.colors.PowerNorm`."
        },
        {
          "name": "ecdf",
          "docstring": "Compute and plot the empirical cumulative distribution function of *x*.\n\n.. versionadded:: 3.8\n\nParameters\n----------\nx : 1d array-like\n    The input data.  Infinite entries are kept (and move the relevant\n    end of the ecdf from 0/1), but NaNs and masked values are errors.\n\nweights : 1d array-like or None, default: None\n    The weights of the entries; must have the same shape as *x*.\n    Weights corresponding to NaN data points are dropped, and then the\n    remaining weights are normalized to sum to 1.  If unset, all\n    entries have the same weight.\n\ncomplementary : bool, default: False\n    Whether to plot a cumulative distribution function, which increases\n    from 0 to 1 (the default), or a complementary cumulative\n    distribution function, which decreases from 1 to 0.\n\norientation : {\"vertical\", \"horizontal\"}, default: \"vertical\"\n    Whether the entries are plotted along the x-axis (\"vertical\", the\n    default) or the y-axis (\"horizontal\").  This parameter takes the\n    same values as in `~.Axes.hist`.\n\ncompress : bool, default: False\n    Whether multiple entries with the same values are grouped together\n    (with a summed weight) before plotting.  This is mainly useful if\n    *x* contains many identical data points, to decrease the rendering\n    complexity of the plot. If *x* contains no duplicate points, this\n    has no effect and just uses some time and memory.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nReturns\n-------\n`.Line2D`\n\nNotes\n-----\nThe ecdf plot can be thought of as a cumulative histogram with one bin\nper data entry; i.e. it reports on the entire dataset without any\narbitrary binning.\n\nIf *x* contains NaNs or masked entries, either remove them first from\nthe array (if they should not taken into account), or replace them by\n-inf or +inf (if they should be sorted at the beginning or the end of\nthe array)."
        },
        {
          "name": "psd",
          "docstring": "Plot the power spectral density.\n\nThe power spectral density :math:`P_{xx}` by Welch's average\nperiodogram method.  The vector *x* is divided into *NFFT* length\nsegments.  Each segment is detrended by function *detrend* and\nwindowed by function *window*.  *noverlap* gives the length of\nthe overlap between segments.  The :math:`|\\mathrm{fft}(i)|^2`\nof each segment :math:`i` are averaged to compute :math:`P_{xx}`,\nwith a scaling to correct for power loss due to windowing.\n\nIf len(*x*) < *NFFT*, it will be zero padded to *NFFT*.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data\n\n%(Spectral)s\n\n%(PSD)s\n\nnoverlap : int, default: 0 (no overlap)\n    The number of points of overlap between segments.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nreturn_line : bool, default: False\n    Whether to include the line object plotted in the returned values.\n\nReturns\n-------\nPxx : 1-D array\n    The values for the power spectrum :math:`P_{xx}` before scaling\n    (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *Pxx*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n    Only returned if *return_line* is True.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nspecgram\n    Differs in the default overlap; in not returning the mean of the\n    segment periodograms; in returning the times of the segments; and\n    in plotting a colormap instead of a line.\nmagnitude_spectrum\n    Plots the magnitude spectrum.\ncsd\n    Plots the spectral density between two signals.\n\nNotes\n-----\nFor plotting, the power is plotted as\n:math:`10\\log_{10}(P_{xx})` for decibels, though *Pxx* itself\nis returned.\n\nReferences\n----------\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)"
        },
        {
          "name": "csd",
          "docstring": "Plot the cross-spectral density.\n\nThe cross spectral density :math:`P_{xy}` by Welch's average\nperiodogram method.  The vectors *x* and *y* are divided into\n*NFFT* length segments.  Each segment is detrended by function\n*detrend* and windowed by function *window*.  *noverlap* gives\nthe length of the overlap between segments.  The product of\nthe direct FFTs of *x* and *y* are averaged over each segment\nto compute :math:`P_{xy}`, with a scaling to correct for power\nloss due to windowing.\n\nIf len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero\npadded to *NFFT*.\n\nParameters\n----------\nx, y : 1-D arrays or sequences\n    Arrays or sequences containing the data.\n\n%(Spectral)s\n\n%(PSD)s\n\nnoverlap : int, default: 0 (no overlap)\n    The number of points of overlap between segments.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nreturn_line : bool, default: False\n    Whether to include the line object plotted in the returned values.\n\nReturns\n-------\nPxy : 1-D array\n    The values for the cross spectrum :math:`P_{xy}` before scaling\n    (complex valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *Pxy*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n    Only returned if *return_line* is True.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\npsd : is equivalent to setting ``y = x``.\n\nNotes\n-----\nFor plotting, the power is plotted as\n:math:`10 \\log_{10}(P_{xy})` for decibels, though :math:`P_{xy}` itself\nis returned.\n\nReferences\n----------\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)"
        },
        {
          "name": "magnitude_spectrum",
          "docstring": "Plot the magnitude spectrum.\n\nCompute the magnitude spectrum of *x*.  Data is padded to a\nlength of *pad_to* and the windowing function *window* is applied to\nthe signal.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data.\n\n%(Spectral)s\n\n%(Single_Spectrum)s\n\nscale : {'default', 'linear', 'dB'}\n    The scaling of the values in the *spec*.  'linear' is no scaling.\n    'dB' returns the values in dB scale, i.e., the dB amplitude\n    (20 * log10). 'default' is 'linear'.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nspectrum : 1-D array\n    The values for the magnitude spectrum before scaling (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *spectrum*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\npsd\n    Plots the power spectral density.\nangle_spectrum\n    Plots the angles of the corresponding frequencies.\nphase_spectrum\n    Plots the phase (unwrapped angle) of the corresponding frequencies.\nspecgram\n    Can plot the magnitude spectrum of segments within the signal in a\n    colormap."
        },
        {
          "name": "angle_spectrum",
          "docstring": "Plot the angle spectrum.\n\nCompute the angle spectrum (wrapped phase spectrum) of *x*.\nData is padded to a length of *pad_to* and the windowing function\n*window* is applied to the signal.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data.\n\n%(Spectral)s\n\n%(Single_Spectrum)s\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nspectrum : 1-D array\n    The values for the angle spectrum in radians (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *spectrum*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nmagnitude_spectrum\n    Plots the magnitudes of the corresponding frequencies.\nphase_spectrum\n    Plots the unwrapped version of this function.\nspecgram\n    Can plot the angle spectrum of segments within the signal in a\n    colormap."
        },
        {
          "name": "phase_spectrum",
          "docstring": "Plot the phase spectrum.\n\nCompute the phase spectrum (unwrapped angle spectrum) of *x*.\nData is padded to a length of *pad_to* and the windowing function\n*window* is applied to the signal.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data\n\n%(Spectral)s\n\n%(Single_Spectrum)s\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nspectrum : 1-D array\n    The values for the phase spectrum in radians (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *spectrum*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nmagnitude_spectrum\n    Plots the magnitudes of the corresponding frequencies.\nangle_spectrum\n    Plots the wrapped version of this function.\nspecgram\n    Can plot the phase spectrum of segments within the signal in a\n    colormap."
        },
        {
          "name": "cohere",
          "docstring": "Plot the coherence between *x* and *y*.\n\nCoherence is the normalized cross spectral density:\n\n.. math::\n\n  C_{xy} = \\frac{|P_{xy}|^2}{P_{xx}P_{yy}}\n\nParameters\n----------\n%(Spectral)s\n\n%(PSD)s\n\nnoverlap : int, default: 0 (no overlap)\n    The number of points of overlap between blocks.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nCxy : 1-D array\n    The coherence vector.\n\nfreqs : 1-D array\n    The frequencies for the elements in *Cxy*.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nReferences\n----------\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)"
        },
        {
          "name": "specgram",
          "docstring": "Plot a spectrogram.\n\nCompute and plot a spectrogram of data in *x*.  Data are split into\n*NFFT* length segments and the spectrum of each section is\ncomputed.  The windowing function *window* is applied to each\nsegment, and the amount of overlap of each segment is\nspecified with *noverlap*. The spectrogram is plotted as a colormap\n(using imshow).\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data.\n\n%(Spectral)s\n\n%(PSD)s\n\nmode : {'default', 'psd', 'magnitude', 'angle', 'phase'}\n    What sort of spectrum to use.  Default is 'psd', which takes the\n    power spectral density.  'magnitude' returns the magnitude\n    spectrum.  'angle' returns the phase spectrum without unwrapping.\n    'phase' returns the phase spectrum with unwrapping.\n\nnoverlap : int, default: 128\n    The number of points of overlap between blocks.\n\nscale : {'default', 'linear', 'dB'}\n    The scaling of the values in the *spec*.  'linear' is no scaling.\n    'dB' returns the values in dB scale.  When *mode* is 'psd',\n    this is dB power (10 * log10).  Otherwise, this is dB amplitude\n    (20 * log10). 'default' is 'dB' if *mode* is 'psd' or\n    'magnitude' and 'linear' otherwise.  This must be 'linear'\n    if *mode* is 'angle' or 'phase'.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\ncmap : `.Colormap`, default: :rc:`image.cmap`\n\nxextent : *None* or (xmin, xmax)\n    The image extent along the x-axis. The default sets *xmin* to the\n    left border of the first bin (*spectrum* column) and *xmax* to the\n    right border of the last bin. Note that for *noverlap>0* the width\n    of the bins is smaller than those of the segments.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nvmin, vmax : float, optional\n    vmin and vmax define the data range that the colormap covers.\n    By default, the colormap covers the complete value range of the\n    data.\n\n**kwargs\n    Additional keyword arguments are passed on to `~.axes.Axes.imshow`\n    which makes the specgram image. The origin keyword argument\n    is not supported.\n\nReturns\n-------\nspectrum : 2D array\n    Columns are the periodograms of successive segments.\n\nfreqs : 1-D array\n    The frequencies corresponding to the rows in *spectrum*.\n\nt : 1-D array\n    The times corresponding to midpoints of segments (i.e., the columns\n    in *spectrum*).\n\nim : `.AxesImage`\n    The image created by imshow containing the spectrogram.\n\nSee Also\n--------\npsd\n    Differs in the default overlap; in returning the mean of the\n    segment periodograms; in not returning times; and in generating a\n    line plot instead of colormap.\nmagnitude_spectrum\n    A single spectrum, similar to having a single segment when *mode*\n    is 'magnitude'. Plots a line instead of a colormap.\nangle_spectrum\n    A single spectrum, similar to having a single segment when *mode*\n    is 'angle'. Plots a line instead of a colormap.\nphase_spectrum\n    A single spectrum, similar to having a single segment when *mode*\n    is 'phase'. Plots a line instead of a colormap.\n\nNotes\n-----\nThe parameters *detrend* and *scale_by_freq* do only apply when *mode*\nis set to 'psd'."
        },
        {
          "name": "spy",
          "docstring": "Plot the sparsity pattern of a 2D array.\n\nThis visualizes the non-zero values of the array.\n\nTwo plotting styles are available: image and marker. Both\nare available for full arrays, but only the marker style\nworks for `scipy.sparse.spmatrix` instances.\n\n**Image style**\n\nIf *marker* and *markersize* are *None*, `~.Axes.imshow` is used. Any\nextra remaining keyword arguments are passed to this method.\n\n**Marker style**\n\nIf *Z* is a `scipy.sparse.spmatrix` or *marker* or *markersize* are\n*None*, a `.Line2D` object will be returned with the value of marker\ndetermining the marker type, and any remaining keyword arguments\npassed to `~.Axes.plot`.\n\nParameters\n----------\nZ : (M, N) array-like\n    The array to be plotted.\n\nprecision : float or 'present', default: 0\n    If *precision* is 0, any non-zero value will be plotted. Otherwise,\n    values of :math:`|Z| > precision` will be plotted.\n\n    For `scipy.sparse.spmatrix` instances, you can also\n    pass 'present'. In this case any value present in the array\n    will be plotted, even if it is identically zero.\n\naspect : {'equal', 'auto', None} or float, default: 'equal'\n    The aspect ratio of the Axes.  This parameter is particularly\n    relevant for images since it determines whether data pixels are\n    square.\n\n    This parameter is a shortcut for explicitly calling\n    `.Axes.set_aspect`. See there for further details.\n\n    - 'equal': Ensures an aspect ratio of 1. Pixels will be square.\n    - 'auto': The Axes is kept fixed and the aspect is adjusted so\n      that the data fit in the Axes. In general, this will result in\n      non-square pixels.\n    - *None*: Use :rc:`image.aspect`.\n\norigin : {'upper', 'lower'}, default: :rc:`image.origin`\n    Place the [0, 0] index of the array in the upper left or lower left\n    corner of the Axes. The convention 'upper' is typically used for\n    matrices and images.\n\nReturns\n-------\n`~matplotlib.image.AxesImage` or `.Line2D`\n    The return type depends on the plotting style (see above).\n\nOther Parameters\n----------------\n**kwargs\n    The supported additional parameters depend on the plotting style.\n\n    For the image style, you can pass the following additional\n    parameters of `~.Axes.imshow`:\n\n    - *cmap*\n    - *alpha*\n    - *url*\n    - any `.Artist` properties (passed on to the `.AxesImage`)\n\n    For the marker style, you can pass any `.Line2D` property except\n    for *linestyle*:\n\n    %(Line2D:kwdoc)s"
        },
        {
          "name": "matshow",
          "docstring": "Plot the values of a 2D matrix or array as color-coded image.\n\nThe matrix will be shown the way it would be printed, with the first\nrow at the top.  Row and column numbering is zero-based.\n\nParameters\n----------\nZ : (M, N) array-like\n    The matrix to be displayed.\n\nReturns\n-------\n`~matplotlib.image.AxesImage`\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.axes.Axes.imshow` arguments\n\nSee Also\n--------\nimshow : More general function to plot data on a 2D regular raster.\n\nNotes\n-----\nThis is just a convenience function wrapping `.imshow` to set useful\ndefaults for displaying a matrix. In particular:\n\n- Set ``origin='upper'``.\n- Set ``interpolation='nearest'``.\n- Set ``aspect='equal'``.\n- Ticks are placed to the left and above.\n- Ticks are formatted to show integer indices."
        },
        {
          "name": "violinplot",
          "docstring": "Make a violin plot.\n\nMake a violin plot for each column of *dataset* or each vector in\nsequence *dataset*.  Each filled area extends to represent the\nentire data range, with optional lines at the mean, the median,\nthe minimum, the maximum, and user-specified quantiles.\n\nParameters\n----------\ndataset : Array or a sequence of vectors.\n    The input data.\n\npositions : array-like, default: [1, 2, ..., n]\n    The positions of the violins; i.e. coordinates on the x-axis for\n    vertical violins (or y-axis for horizontal violins).\n\nvert : bool, optional\n    .. deprecated:: 3.10\n        Use *orientation* instead.\n\n        If this is given during the deprecation period, it overrides\n        the *orientation* parameter.\n\n    If True, plots the violins vertically.\n    If False, plots the violins horizontally.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', plots the violins horizontally.\n    Otherwise, plots the violins vertically.\n\n    .. versionadded:: 3.10\n\nwidths : float or array-like, default: 0.5\n    The maximum width of each violin in units of the *positions* axis.\n    The default is 0.5, which is half the available space when using default\n    *positions*.\n\nshowmeans : bool, default: False\n    Whether to show the mean with a line.\n\nshowextrema : bool, default: True\n    Whether to show extrema with a line.\n\nshowmedians : bool, default: False\n    Whether to show the median with a line.\n\nquantiles : array-like, default: None\n    If not None, set a list of floats in interval [0, 1] for each violin,\n    which stands for the quantiles that will be rendered for that\n    violin.\n\npoints : int, default: 100\n    The number of points to evaluate each of the gaussian kernel density\n    estimations at.\n\nbw_method : {'scott', 'silverman'} or float or callable, default: 'scott'\n    The method used to calculate the estimator bandwidth.  If a\n    float, this will be used directly as `kde.factor`.  If a\n    callable, it should take a `matplotlib.mlab.GaussianKDE` instance as\n    its only parameter and return a float.\n\nside : {'both', 'low', 'high'}, default: 'both'\n    'both' plots standard violins. 'low'/'high' only\n    plots the side below/above the positions value.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nReturns\n-------\ndict\n    A dictionary mapping each component of the violinplot to a\n    list of the corresponding collection instances created. The\n    dictionary has the following keys:\n\n    - ``bodies``: A list of the `~.collections.PolyCollection`\n      instances containing the filled area of each violin.\n\n    - ``cmeans``: A `~.collections.LineCollection` instance that marks\n      the mean values of each of the violin's distribution.\n\n    - ``cmins``: A `~.collections.LineCollection` instance that marks\n      the bottom of each violin's distribution.\n\n    - ``cmaxes``: A `~.collections.LineCollection` instance that marks\n      the top of each violin's distribution.\n\n    - ``cbars``: A `~.collections.LineCollection` instance that marks\n      the centers of each violin's distribution.\n\n    - ``cmedians``: A `~.collections.LineCollection` instance that\n      marks the median values of each of the violin's distribution.\n\n    - ``cquantiles``: A `~.collections.LineCollection` instance created\n      to identify the quantile values of each of the violin's\n      distribution.\n\nSee Also\n--------\n.Axes.violin : Draw a violin from pre-computed statistics.\nboxplot : Draw a box and whisker plot."
        },
        {
          "name": "violin",
          "docstring": "Draw a violin plot from pre-computed statistics.\n\nDraw a violin plot for each column of *vpstats*. Each filled area\nextends to represent the entire data range, with optional lines at the\nmean, the median, the minimum, the maximum, and the quantiles values.\n\nParameters\n----------\nvpstats : list of dicts\n    A list of dictionaries containing stats for each violin plot.\n    Required keys are:\n\n    - ``coords``: A list of scalars containing the coordinates that\n      the violin's kernel density estimate were evaluated at.\n\n    - ``vals``: A list of scalars containing the values of the\n      kernel density estimate at each of the coordinates given\n      in *coords*.\n\n    - ``mean``: The mean value for this violin's dataset.\n\n    - ``median``: The median value for this violin's dataset.\n\n    - ``min``: The minimum value for this violin's dataset.\n\n    - ``max``: The maximum value for this violin's dataset.\n\n    Optional keys are:\n\n    - ``quantiles``: A list of scalars containing the quantile values\n      for this violin's dataset.\n\npositions : array-like, default: [1, 2, ..., n]\n    The positions of the violins; i.e. coordinates on the x-axis for\n    vertical violins (or y-axis for horizontal violins).\n\nvert : bool, optional\n    .. deprecated:: 3.10\n        Use *orientation* instead.\n\n        If this is given during the deprecation period, it overrides\n        the *orientation* parameter.\n\n    If True, plots the violins vertically.\n    If False, plots the violins horizontally.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', plots the violins horizontally.\n    Otherwise, plots the violins vertically.\n\n    .. versionadded:: 3.10\n\nwidths : float or array-like, default: 0.5\n    The maximum width of each violin in units of the *positions* axis.\n    The default is 0.5, which is half available space when using default\n    *positions*.\n\nshowmeans : bool, default: False\n    Whether to show the mean with a line.\n\nshowextrema : bool, default: True\n    Whether to show extrema with a line.\n\nshowmedians : bool, default: False\n    Whether to show the median with a line.\n\nside : {'both', 'low', 'high'}, default: 'both'\n    'both' plots standard violins. 'low'/'high' only\n    plots the side below/above the positions value.\n\nReturns\n-------\ndict\n    A dictionary mapping each component of the violinplot to a\n    list of the corresponding collection instances created. The\n    dictionary has the following keys:\n\n    - ``bodies``: A list of the `~.collections.PolyCollection`\n      instances containing the filled area of each violin.\n\n    - ``cmeans``: A `~.collections.LineCollection` instance that marks\n      the mean values of each of the violin's distribution.\n\n    - ``cmins``: A `~.collections.LineCollection` instance that marks\n      the bottom of each violin's distribution.\n\n    - ``cmaxes``: A `~.collections.LineCollection` instance that marks\n      the top of each violin's distribution.\n\n    - ``cbars``: A `~.collections.LineCollection` instance that marks\n      the centers of each violin's distribution.\n\n    - ``cmedians``: A `~.collections.LineCollection` instance that\n      marks the median values of each of the violin's distribution.\n\n    - ``cquantiles``: A `~.collections.LineCollection` instance created\n      to identify the quantiles values of each of the violin's\n      distribution.\n\nSee Also\n--------\nviolinplot :\n    Draw a violin plot from data instead of pre-computed statistics."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_title",
      "docstring": "Get an Axes title.\n\nGet one of the three available Axes titles. The available titles\nare positioned above the Axes in the center, flush with the left\nedge, and flush with the right edge.\n\nParameters\n----------\nloc : {'center', 'left', 'right'}, str, default: 'center'\n    Which title to return.\n\nReturns\n-------\nstr\n    The title text string."
    },
    {
      "name": "set_title",
      "docstring": "Set a title for the Axes.\n\nSet one of the three available Axes titles. The available titles\nare positioned above the Axes in the center, flush with the left\nedge, and flush with the right edge.\n\nParameters\n----------\nlabel : str\n    Text to use for the title\n\nfontdict : dict\n\n    .. admonition:: Discouraged\n\n       The use of *fontdict* is discouraged. Parameters should be passed as\n       individual keyword arguments or using dictionary-unpacking\n       ``set_title(..., **fontdict)``.\n\n    A dictionary controlling the appearance of the title text,\n    the default *fontdict* is::\n\n       {'fontsize': rcParams['axes.titlesize'],\n        'fontweight': rcParams['axes.titleweight'],\n        'color': rcParams['axes.titlecolor'],\n        'verticalalignment': 'baseline',\n        'horizontalalignment': loc}\n\nloc : {'center', 'left', 'right'}, default: :rc:`axes.titlelocation`\n    Which title to set.\n\ny : float, default: :rc:`axes.titley`\n    Vertical Axes location for the title (1.0 is the top).  If\n    None (the default) and :rc:`axes.titley` is also None, y is\n    determined automatically to avoid decorators on the Axes.\n\npad : float, default: :rc:`axes.titlepad`\n    The offset of the title from the top of the Axes, in points.\n\nReturns\n-------\n`.Text`\n    The matplotlib text instance representing the title\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.text.Text` properties\n    Other keyword arguments are text properties, see `.Text` for a list\n    of valid text properties."
    },
    {
      "name": "get_legend_handles_labels",
      "docstring": "Return handles and labels for legend\n\n``ax.legend()`` is equivalent to ::\n\n  h, l = ax.get_legend_handles_labels()\n  ax.legend(h, l)"
    },
    {
      "name": "legend",
      "docstring": "Place a legend on the Axes.\n\nCall signatures::\n\n    legend()\n    legend(handles, labels)\n    legend(handles=handles)\n    legend(labels)\n\nThe call signatures correspond to the following different ways to use\nthis method:\n\n**1. Automatic detection of elements to be shown in the legend**\n\nThe elements to be added to the legend are automatically determined,\nwhen you do not pass in any extra arguments.\n\nIn this case, the labels are taken from the artist. You can specify\nthem either at artist creation or by calling the\n:meth:`~.Artist.set_label` method on the artist::\n\n    ax.plot([1, 2, 3], label='Inline label')\n    ax.legend()\n\nor::\n\n    line, = ax.plot([1, 2, 3])\n    line.set_label('Label via method')\n    ax.legend()\n\n.. note::\n    Specific artists can be excluded from the automatic legend element\n    selection by using a label starting with an underscore, \"_\".\n    A string starting with an underscore is the default label for all\n    artists, so calling `.Axes.legend` without any arguments and\n    without setting the labels manually will result in a ``UserWarning``\n    and an empty legend being drawn.\n\n\n**2. Explicitly listing the artists and labels in the legend**\n\nFor full control of which artists have a legend entry, it is possible\nto pass an iterable of legend artists followed by an iterable of\nlegend labels respectively::\n\n    ax.legend([line1, line2, line3], ['label1', 'label2', 'label3'])\n\n\n**3. Explicitly listing the artists in the legend**\n\nThis is similar to 2, but the labels are taken from the artists'\nlabel properties. Example::\n\n    line1, = ax.plot([1, 2, 3], label='label1')\n    line2, = ax.plot([1, 2, 3], label='label2')\n    ax.legend(handles=[line1, line2])\n\n\n**4. Labeling existing plot elements**\n\n.. admonition:: Discouraged\n\n    This call signature is discouraged, because the relation between\n    plot elements and labels is only implicit by their order and can\n    easily be mixed up.\n\nTo make a legend for all artists on an Axes, call this function with\nan iterable of strings, one for each legend item. For example::\n\n    ax.plot([1, 2, 3])\n    ax.plot([5, 6, 7])\n    ax.legend(['First line', 'Second line'])\n\n\nParameters\n----------\nhandles : list of (`.Artist` or tuple of `.Artist`), optional\n    A list of Artists (lines, patches) to be added to the legend.\n    Use this together with *labels*, if you need full control on what\n    is shown in the legend and the automatic mechanism described above\n    is not sufficient.\n\n    The length of handles and labels should be the same in this\n    case. If they are not, they are truncated to the smaller length.\n\n    If an entry contains a tuple, then the legend handler for all Artists in the\n    tuple will be placed alongside a single label.\n\nlabels : list of str, optional\n    A list of labels to show next to the artists.\n    Use this together with *handles*, if you need full control on what\n    is shown in the legend and the automatic mechanism described above\n    is not sufficient.\n\nReturns\n-------\n`~matplotlib.legend.Legend`\n\nOther Parameters\n----------------\n%(_legend_kw_axes)s\n\nSee Also\n--------\n.Figure.legend\n\nNotes\n-----\nSome artists are not supported by this function.  See\n:ref:`legend_guide` for details.\n\nExamples\n--------\n.. plot:: gallery/text_labels_and_annotations/legend.py"
    },
    {
      "name": "inset_axes",
      "docstring": "Add a child inset Axes to this existing Axes.\n\n\nParameters\n----------\nbounds : [x0, y0, width, height]\n    Lower-left corner of inset Axes, and its width and height.\n\ntransform : `.Transform`\n    Defaults to `ax.transAxes`, i.e. the units of *rect* are in\n    Axes-relative coordinates.\n\nprojection : {None, 'aitoff', 'hammer', 'lambert', 'mollweide', 'polar', 'rectilinear', str}, optional\n    The projection type of the inset `~.axes.Axes`. *str* is the name\n    of a custom projection, see `~matplotlib.projections`. The default\n    None results in a 'rectilinear' projection.\n\npolar : bool, default: False\n    If True, equivalent to projection='polar'.\n\naxes_class : subclass type of `~.axes.Axes`, optional\n    The `.axes.Axes` subclass that is instantiated.  This parameter\n    is incompatible with *projection* and *polar*.  See\n    :ref:`axisartist_users-guide-index` for examples.\n\nzorder : number\n    Defaults to 5 (same as `.Axes.legend`).  Adjust higher or lower\n    to change whether it is above or below data plotted on the\n    parent Axes.\n\n**kwargs\n    Other keyword arguments are passed on to the inset Axes class.\n\nReturns\n-------\nax\n    The created `~.axes.Axes` instance.\n\nExamples\n--------\nThis example makes two inset Axes, the first is in Axes-relative\ncoordinates, and the second in data-coordinates::\n\n    fig, ax = plt.subplots()\n    ax.plot(range(10))\n    axin1 = ax.inset_axes([0.8, 0.1, 0.15, 0.15])\n    axin2 = ax.inset_axes(\n            [5, 7, 2.3, 2.3], transform=ax.transData)"
    },
    {
      "name": "indicate_inset",
      "docstring": "Add an inset indicator to the Axes.  This is a rectangle on the plot\nat the position indicated by *bounds* that optionally has lines that\nconnect the rectangle to an inset Axes (`.Axes.inset_axes`).\n\nWarnings\n--------\nThis method is experimental as of 3.0, and the API may change.\n\nParameters\n----------\nbounds : [x0, y0, width, height], optional\n    Lower-left corner of rectangle to be marked, and its width\n    and height.  If not set, the bounds will be calculated from the\n    data limits of *inset_ax*, which must be supplied.\n\ninset_ax : `.Axes`, optional\n    An optional inset Axes to draw connecting lines to.  Two lines are\n    drawn connecting the indicator box to the inset Axes on corners\n    chosen so as to not overlap with the indicator box.\n\ntransform : `.Transform`\n    Transform for the rectangle coordinates. Defaults to\n    ``ax.transAxes``, i.e. the units of *rect* are in Axes-relative\n    coordinates.\n\nfacecolor : :mpltype:`color`, default: 'none'\n    Facecolor of the rectangle.\n\nedgecolor : :mpltype:`color`, default: '0.5'\n    Color of the rectangle and color of the connecting lines.\n\nalpha : float or None, default: 0.5\n    Transparency of the rectangle and connector lines.  If not\n    ``None``, this overrides any alpha value included in the\n    *facecolor* and *edgecolor* parameters.\n\nzorder : float, default: 4.99\n    Drawing order of the rectangle and connector lines.  The default,\n    4.99, is just below the default level of inset Axes.\n\n**kwargs\n    Other keyword arguments are passed on to the `.Rectangle` patch:\n\n    %(Rectangle:kwdoc)s\n\nReturns\n-------\ninset_indicator : `.inset.InsetIndicator`\n    An artist which contains\n\n    inset_indicator.rectangle : `.Rectangle`\n        The indicator frame.\n\n    inset_indicator.connectors : 4-tuple of `.patches.ConnectionPatch`\n        The four connector lines connecting to (lower_left, upper_left,\n        lower_right upper_right) corners of *inset_ax*. Two lines are\n        set with visibility to *False*,  but the user can set the\n        visibility to True if the automatic choice is not deemed correct.\n\n    .. versionchanged:: 3.10\n        Previously the rectangle and connectors tuple were returned."
    },
    {
      "name": "indicate_inset_zoom",
      "docstring": "Add an inset indicator rectangle to the Axes based on the axis\nlimits for an *inset_ax* and draw connectors between *inset_ax*\nand the rectangle.\n\nWarnings\n--------\nThis method is experimental as of 3.0, and the API may change.\n\nParameters\n----------\ninset_ax : `.Axes`\n    Inset Axes to draw connecting lines to.  Two lines are\n    drawn connecting the indicator box to the inset Axes on corners\n    chosen so as to not overlap with the indicator box.\n\n**kwargs\n    Other keyword arguments are passed on to `.Axes.indicate_inset`\n\nReturns\n-------\ninset_indicator : `.inset.InsetIndicator`\n    An artist which contains\n\n    inset_indicator.rectangle : `.Rectangle`\n        The indicator frame.\n\n    inset_indicator.connectors : 4-tuple of `.patches.ConnectionPatch`\n        The four connector lines connecting to (lower_left, upper_left,\n        lower_right upper_right) corners of *inset_ax*. Two lines are\n        set with visibility to *False*,  but the user can set the\n        visibility to True if the automatic choice is not deemed correct.\n\n    .. versionchanged:: 3.10\n        Previously the rectangle and connectors tuple were returned."
    },
    {
      "name": "secondary_xaxis",
      "docstring": "Add a second x-axis to this `~.axes.Axes`.\n\nFor example if we want to have a second scale for the data plotted on\nthe xaxis.\n\n%(_secax_docstring)s\n\nExamples\n--------\nThe main axis shows frequency, and the secondary axis shows period.\n\n.. plot::\n\n    fig, ax = plt.subplots()\n    ax.loglog(range(1, 360, 5), range(1, 360, 5))\n    ax.set_xlabel('frequency [Hz]')\n\n    def invert(x):\n        # 1/x with special treatment of x == 0\n        x = np.array(x).astype(float)\n        near_zero = np.isclose(x, 0)\n        x[near_zero] = np.inf\n        x[~near_zero] = 1 / x[~near_zero]\n        return x\n\n    # the inverse of 1/x is itself\n    secax = ax.secondary_xaxis('top', functions=(invert, invert))\n    secax.set_xlabel('Period [s]')\n    plt.show()\n\nTo add a secondary axis relative to your data, you can pass a transform\nto the new axis.\n\n.. plot::\n\n    fig, ax = plt.subplots()\n    ax.plot(range(0, 5), range(-1, 4))\n\n    # Pass 'ax.transData' as a transform to place the axis\n    # relative to your data at y=0\n    secax = ax.secondary_xaxis(0, transform=ax.transData)"
    },
    {
      "name": "secondary_yaxis",
      "docstring": "Add a second y-axis to this `~.axes.Axes`.\n\nFor example if we want to have a second scale for the data plotted on\nthe yaxis.\n\n%(_secax_docstring)s\n\nExamples\n--------\nAdd a secondary Axes that converts from radians to degrees\n\n.. plot::\n\n    fig, ax = plt.subplots()\n    ax.plot(range(1, 360, 5), range(1, 360, 5))\n    ax.set_ylabel('degrees')\n    secax = ax.secondary_yaxis('right', functions=(np.deg2rad,\n                                                   np.rad2deg))\n    secax.set_ylabel('radians')\n\nTo add a secondary axis relative to your data, you can pass a transform\nto the new axis.\n\n.. plot::\n\n    fig, ax = plt.subplots()\n    ax.plot(range(0, 5), range(-1, 4))\n\n    # Pass 'ax.transData' as a transform to place the axis\n    # relative to your data at x=3\n    secax = ax.secondary_yaxis(3, transform=ax.transData)"
    },
    {
      "name": "text",
      "docstring": "Add text to the Axes.\n\nAdd the text *s* to the Axes at location *x*, *y* in data coordinates,\nwith a default ``horizontalalignment`` on the ``left`` and\n``verticalalignment`` at the ``baseline``. See\n:doc:`/gallery/text_labels_and_annotations/text_alignment`.\n\nParameters\n----------\nx, y : float\n    The position to place the text. By default, this is in data\n    coordinates. The coordinate system can be changed using the\n    *transform* parameter.\n\ns : str\n    The text.\n\nfontdict : dict, default: None\n\n    .. admonition:: Discouraged\n\n       The use of *fontdict* is discouraged. Parameters should be passed as\n       individual keyword arguments or using dictionary-unpacking\n       ``text(..., **fontdict)``.\n\n    A dictionary to override the default text properties. If fontdict\n    is None, the defaults are determined by `.rcParams`.\n\nReturns\n-------\n`.Text`\n    The created `.Text` instance.\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.text.Text` properties.\n    Other miscellaneous text parameters.\n\n    %(Text:kwdoc)s\n\nExamples\n--------\nIndividual keyword arguments can be used to override any given\nparameter::\n\n    >>> text(x, y, s, fontsize=12)\n\nThe default transform specifies that text is in data coords,\nalternatively, you can specify text in axis coords ((0, 0) is\nlower-left and (1, 1) is upper-right).  The example below places\ntext in the center of the Axes::\n\n    >>> text(0.5, 0.5, 'matplotlib', horizontalalignment='center',\n    ...      verticalalignment='center', transform=ax.transAxes)\n\nYou can put a rectangular box around the text instance (e.g., to\nset a background color) by using the keyword *bbox*.  *bbox* is\na dictionary of `~matplotlib.patches.Rectangle`\nproperties.  For example::\n\n    >>> text(x, y, s, bbox=dict(facecolor='red', alpha=0.5))"
    },
    {
      "name": "annotate",
      "docstring": null
    },
    {
      "name": "axhline",
      "docstring": "Add a horizontal line spanning the whole or fraction of the Axes.\n\nNote: If you want to set x-limits in data coordinates, use\n`~.Axes.hlines` instead.\n\nParameters\n----------\ny : float, default: 0\n    y position in :ref:`data coordinates <coordinate-systems>`.\n\nxmin : float, default: 0\n    The start x-position in :ref:`axes coordinates <coordinate-systems>`.\n    Should be between 0 and 1, 0 being the far left of the plot,\n    1 the far right of the plot.\n\nxmax : float, default: 1\n    The end x-position in :ref:`axes coordinates <coordinate-systems>`.\n    Should be between 0 and 1, 0 being the far left of the plot,\n    1 the far right of the plot.\n\nReturns\n-------\n`~matplotlib.lines.Line2D`\n    A `.Line2D` specified via two points ``(xmin, y)``, ``(xmax, y)``.\n    Its transform is set such that *x* is in\n    :ref:`axes coordinates <coordinate-systems>` and *y* is in\n    :ref:`data coordinates <coordinate-systems>`.\n\n    This is still a generic line and the horizontal character is only\n    realized through using identical *y* values for both points. Thus,\n    if you want to change the *y* value later, you have to provide two\n    values ``line.set_ydata([3, 3])``.\n\nOther Parameters\n----------------\n**kwargs\n    Valid keyword arguments are `.Line2D` properties, except for\n    'transform':\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nhlines : Add horizontal lines in data coordinates.\naxhspan : Add a horizontal span (rectangle) across the axis.\naxline : Add a line with an arbitrary slope.\n\nExamples\n--------\n* draw a thick red hline at 'y' = 0 that spans the xrange::\n\n    >>> axhline(linewidth=4, color='r')\n\n* draw a default hline at 'y' = 1 that spans the xrange::\n\n    >>> axhline(y=1)\n\n* draw a default hline at 'y' = .5 that spans the middle half of\n  the xrange::\n\n    >>> axhline(y=.5, xmin=0.25, xmax=0.75)"
    },
    {
      "name": "axvline",
      "docstring": "Add a vertical line spanning the whole or fraction of the Axes.\n\nNote: If you want to set y-limits in data coordinates, use\n`~.Axes.vlines` instead.\n\nParameters\n----------\nx : float, default: 0\n    x position in :ref:`data coordinates <coordinate-systems>`.\n\nymin : float, default: 0\n    The start y-position in :ref:`axes coordinates <coordinate-systems>`.\n    Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n    top of the plot.\n\nymax : float, default: 1\n    The end y-position in :ref:`axes coordinates <coordinate-systems>`.\n    Should be between 0 and 1, 0 being the bottom of the plot, 1 the\n    top of the plot.\n\nReturns\n-------\n`~matplotlib.lines.Line2D`\n    A `.Line2D` specified via two points ``(x, ymin)``, ``(x, ymax)``.\n    Its transform is set such that *x* is in\n    :ref:`data coordinates <coordinate-systems>` and *y* is in\n    :ref:`axes coordinates <coordinate-systems>`.\n\n    This is still a generic line and the vertical character is only\n    realized through using identical *x* values for both points. Thus,\n    if you want to change the *x* value later, you have to provide two\n    values ``line.set_xdata([3, 3])``.\n\nOther Parameters\n----------------\n**kwargs\n    Valid keyword arguments are `.Line2D` properties, except for\n    'transform':\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nvlines : Add vertical lines in data coordinates.\naxvspan : Add a vertical span (rectangle) across the axis.\naxline : Add a line with an arbitrary slope.\n\nExamples\n--------\n* draw a thick red vline at *x* = 0 that spans the yrange::\n\n    >>> axvline(linewidth=4, color='r')\n\n* draw a default vline at *x* = 1 that spans the yrange::\n\n    >>> axvline(x=1)\n\n* draw a default vline at *x* = .5 that spans the middle half of\n  the yrange::\n\n    >>> axvline(x=.5, ymin=0.25, ymax=0.75)"
    },
    {
      "name": "axline",
      "docstring": "Add an infinitely long straight line.\n\nThe line can be defined either by two points *xy1* and *xy2*, or\nby one point *xy1* and a *slope*.\n\nThis draws a straight line \"on the screen\", regardless of the x and y\nscales, and is thus also suitable for drawing exponential decays in\nsemilog plots, power laws in loglog plots, etc. However, *slope*\nshould only be used with linear scales; It has no clear meaning for\nall other scales, and thus the behavior is undefined. Please specify\nthe line using the points *xy1*, *xy2* for non-linear scales.\n\nThe *transform* keyword argument only applies to the points *xy1*,\n*xy2*. The *slope* (if given) is always in data coordinates. This can\nbe used e.g. with ``ax.transAxes`` for drawing grid lines with a fixed\nslope.\n\nParameters\n----------\nxy1, xy2 : (float, float)\n    Points for the line to pass through.\n    Either *xy2* or *slope* has to be given.\nslope : float, optional\n    The slope of the line. Either *xy2* or *slope* has to be given.\n\nReturns\n-------\n`.AxLine`\n\nOther Parameters\n----------------\n**kwargs\n    Valid kwargs are `.Line2D` properties\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\naxhline : for horizontal lines\naxvline : for vertical lines\n\nExamples\n--------\nDraw a thick red line passing through (0, 0) and (1, 1)::\n\n    >>> axline((0, 0), (1, 1), linewidth=4, color='r')"
    },
    {
      "name": "axhspan",
      "docstring": "Add a horizontal span (rectangle) across the Axes.\n\nThe rectangle spans from *ymin* to *ymax* vertically, and, by default,\nthe whole x-axis horizontally.  The x-span can be set using *xmin*\n(default: 0) and *xmax* (default: 1) which are in axis units; e.g.\n``xmin = 0.5`` always refers to the middle of the x-axis regardless of\nthe limits set by `~.Axes.set_xlim`.\n\nParameters\n----------\nymin : float\n    Lower y-coordinate of the span, in data units.\nymax : float\n    Upper y-coordinate of the span, in data units.\nxmin : float, default: 0\n    Lower x-coordinate of the span, in x-axis (0-1) units.\nxmax : float, default: 1\n    Upper x-coordinate of the span, in x-axis (0-1) units.\n\nReturns\n-------\n`~matplotlib.patches.Rectangle`\n    Horizontal span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.patches.Rectangle` properties\n\n%(Rectangle:kwdoc)s\n\nSee Also\n--------\naxvspan : Add a vertical span across the Axes."
    },
    {
      "name": "axvspan",
      "docstring": "Add a vertical span (rectangle) across the Axes.\n\nThe rectangle spans from *xmin* to *xmax* horizontally, and, by\ndefault, the whole y-axis vertically.  The y-span can be set using\n*ymin* (default: 0) and *ymax* (default: 1) which are in axis units;\ne.g. ``ymin = 0.5`` always refers to the middle of the y-axis\nregardless of the limits set by `~.Axes.set_ylim`.\n\nParameters\n----------\nxmin : float\n    Lower x-coordinate of the span, in data units.\nxmax : float\n    Upper x-coordinate of the span, in data units.\nymin : float, default: 0\n    Lower y-coordinate of the span, in y-axis units (0-1).\nymax : float, default: 1\n    Upper y-coordinate of the span, in y-axis units (0-1).\n\nReturns\n-------\n`~matplotlib.patches.Rectangle`\n    Vertical span (rectangle) from (xmin, ymin) to (xmax, ymax).\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.patches.Rectangle` properties\n\n%(Rectangle:kwdoc)s\n\nSee Also\n--------\naxhspan : Add a horizontal span across the Axes.\n\nExamples\n--------\nDraw a vertical, green, translucent rectangle from x = 1.25 to\nx = 1.55 that spans the yrange of the Axes.\n\n>>> axvspan(1.25, 1.55, facecolor='g', alpha=0.5)"
    },
    {
      "name": "hlines",
      "docstring": "Plot horizontal lines at each *y* from *xmin* to *xmax*.\n\nParameters\n----------\ny : float or array-like\n    y-indexes where to plot the lines.\n\nxmin, xmax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have the same length.\n\ncolors : :mpltype:`color` or list of color , default: :rc:`lines.color`\n\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, default: 'solid'\n\nlabel : str, default: ''\n\nReturns\n-------\n`~matplotlib.collections.LineCollection`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs :  `~matplotlib.collections.LineCollection` properties.\n\nSee Also\n--------\nvlines : vertical lines\naxhline : horizontal line across the Axes"
    },
    {
      "name": "vlines",
      "docstring": "Plot vertical lines at each *x* from *ymin* to *ymax*.\n\nParameters\n----------\nx : float or array-like\n    x-indexes where to plot the lines.\n\nymin, ymax : float or array-like\n    Respective beginning and end of each line. If scalars are\n    provided, all lines will have the same length.\n\ncolors : :mpltype:`color` or list of color, default: :rc:`lines.color`\n\nlinestyles : {'solid', 'dashed', 'dashdot', 'dotted'}, default: 'solid'\n\nlabel : str, default: ''\n\nReturns\n-------\n`~matplotlib.collections.LineCollection`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs : `~matplotlib.collections.LineCollection` properties.\n\nSee Also\n--------\nhlines : horizontal lines\naxvline : vertical line across the Axes"
    },
    {
      "name": "eventplot",
      "docstring": "Plot identical parallel lines at the given positions.\n\nThis type of plot is commonly used in neuroscience for representing\nneural events, where it is usually called a spike raster, dot raster,\nor raster plot.\n\nHowever, it is useful in any situation where you wish to show the\ntiming or position of multiple sets of discrete events, such as the\narrival times of people to a business on each day of the month or the\ndate of hurricanes each year of the last century.\n\nParameters\n----------\npositions : array-like or list of array-like\n    A 1D array-like defines the positions of one sequence of events.\n\n    Multiple groups of events may be passed as a list of array-likes.\n    Each group can be styled independently by passing lists of values\n    to *lineoffsets*, *linelengths*, *linewidths*, *colors* and\n    *linestyles*.\n\n    Note that *positions* can be a 2D array, but in practice different\n    event groups usually have different counts so that one will use a\n    list of different-length arrays rather than a 2D array.\n\norientation : {'horizontal', 'vertical'}, default: 'horizontal'\n    The direction of the event sequence:\n\n    - 'horizontal': the events are arranged horizontally.\n      The indicator lines are vertical.\n    - 'vertical': the events are arranged vertically.\n      The indicator lines are horizontal.\n\nlineoffsets : float or array-like, default: 1\n    The offset of the center of the lines from the origin, in the\n    direction orthogonal to *orientation*.\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\nlinelengths : float or array-like, default: 1\n    The total height of the lines (i.e. the lines stretches from\n    ``lineoffset - linelength/2`` to ``lineoffset + linelength/2``).\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\nlinewidths : float or array-like, default: :rc:`lines.linewidth`\n    The line width(s) of the event lines, in points.\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\ncolors : :mpltype:`color` or list of color, default: :rc:`lines.color`\n    The color(s) of the event lines.\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\nalpha : float or array-like, default: 1\n    The alpha blending value(s), between 0 (transparent) and 1\n    (opaque).\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\nlinestyles : str or tuple or list of such values, default: 'solid'\n    Default is 'solid'. Valid strings are ['solid', 'dashed',\n    'dashdot', 'dotted', '-', '--', '-.', ':']. Dash tuples\n    should be of the form::\n\n        (offset, onoffseq),\n\n    where *onoffseq* is an even length tuple of on and off ink\n    in points.\n\n    If *positions* is 2D, this can be a sequence with length matching\n    the length of *positions*.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Other keyword arguments are line collection properties.  See\n    `.LineCollection` for a list of the valid properties.\n\nReturns\n-------\nlist of `.EventCollection`\n    The `.EventCollection` that were added.\n\nNotes\n-----\nFor *linelengths*, *linewidths*, *colors*, *alpha* and *linestyles*, if\nonly a single value is given, that value is applied to all lines. If an\narray-like is given, it must have the same length as *positions*, and\neach value will be applied to the corresponding row of the array.\n\nExamples\n--------\n.. plot:: gallery/lines_bars_and_markers/eventplot_demo.py"
    },
    {
      "name": "plot",
      "docstring": "Plot y versus x as lines and/or markers.\n\nCall signatures::\n\n    plot([x], y, [fmt], *, data=None, **kwargs)\n    plot([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThe coordinates of the points or line nodes are given by *x*, *y*.\n\nThe optional parameter *fmt* is a convenient way for defining basic\nformatting like color, marker and linestyle. It's a shortcut string\nnotation described in the *Notes* section below.\n\n>>> plot(x, y)        # plot x and y using default line style and color\n>>> plot(x, y, 'bo')  # plot x and y using blue circle markers\n>>> plot(y)           # plot y using x as index array 0..N-1\n>>> plot(y, 'r+')     # ditto, but with red plusses\n\nYou can use `.Line2D` properties as keyword arguments for more\ncontrol on the appearance. Line properties and *fmt* can be mixed.\nThe following two calls yield identical results:\n\n>>> plot(x, y, 'go--', linewidth=2, markersize=12)\n>>> plot(x, y, color='green', marker='o', linestyle='dashed',\n...      linewidth=2, markersize=12)\n\nWhen conflicting with *fmt*, keyword arguments take precedence.\n\n\n**Plotting labelled data**\n\nThere's a convenient way for plotting objects with labelled data (i.e.\ndata that can be accessed by index ``obj['y']``). Instead of giving\nthe data in *x* and *y*, you can provide the object in the *data*\nparameter and just give the labels for *x* and *y*::\n\n>>> plot('xlabel', 'ylabel', data=obj)\n\nAll indexable objects are supported. This could e.g. be a `dict`, a\n`pandas.DataFrame` or a structured numpy array.\n\n\n**Plotting multiple sets of data**\n\nThere are various ways to plot multiple sets of data.\n\n- The most straight forward way is just to call `plot` multiple times.\n  Example:\n\n  >>> plot(x1, y1, 'bo')\n  >>> plot(x2, y2, 'go')\n\n- If *x* and/or *y* are 2D arrays, a separate data set will be drawn\n  for every column. If both *x* and *y* are 2D, they must have the\n  same shape. If only one of them is 2D with shape (N, m) the other\n  must have length N and will be used for every data set m.\n\n  Example:\n\n  >>> x = [1, 2, 3]\n  >>> y = np.array([[1, 2], [3, 4], [5, 6]])\n  >>> plot(x, y)\n\n  is equivalent to:\n\n  >>> for col in range(y.shape[1]):\n  ...     plot(x, y[:, col])\n\n- The third way is to specify multiple sets of *[x]*, *y*, *[fmt]*\n  groups::\n\n  >>> plot(x1, y1, 'g^', x2, y2, 'g-')\n\n  In this case, any additional keyword argument applies to all\n  datasets. Also, this syntax cannot be combined with the *data*\n  parameter.\n\nBy default, each line is assigned a different style specified by a\n'style cycle'. The *fmt* and line property parameters are only\nnecessary if you want explicit deviations from these defaults.\nAlternatively, you can also change the style cycle using\n:rc:`axes.prop_cycle`.\n\n\nParameters\n----------\nx, y : array-like or float\n    The horizontal / vertical coordinates of the data points.\n    *x* values are optional and default to ``range(len(y))``.\n\n    Commonly, these parameters are 1D arrays.\n\n    They can also be scalars, or two-dimensional (in that case, the\n    columns represent separate data sets).\n\n    These arguments cannot be passed as keywords.\n\nfmt : str, optional\n    A format string, e.g. 'ro' for red circles. See the *Notes*\n    section for a full description of the format strings.\n\n    Format strings are just an abbreviation for quickly setting\n    basic line properties. All of these and more can also be\n    controlled by keyword arguments.\n\n    This argument cannot be passed as keyword.\n\ndata : indexable object, optional\n    An object with labelled data. If given, provide the label names to\n    plot in *x* and *y*.\n\n    .. note::\n        Technically there's a slight ambiguity in calls where the\n        second label is a valid *fmt*. ``plot('n', 'o', data=obj)``\n        could be ``plt(x, y)`` or ``plt(y, fmt)``. In such cases,\n        the former interpretation is chosen, but a warning is issued.\n        You may suppress the warning by adding an empty format string\n        ``plot('n', 'o', '', data=obj)``.\n\nReturns\n-------\nlist of `.Line2D`\n    A list of lines representing the plotted data.\n\nOther Parameters\n----------------\nscalex, scaley : bool, default: True\n    These parameters determine if the view limits are adapted to the\n    data limits. The values are passed on to\n    `~.axes.Axes.autoscale_view`.\n\n**kwargs : `~matplotlib.lines.Line2D` properties, optional\n    *kwargs* are used to specify properties like a line label (for\n    auto legends), linewidth, antialiasing, marker face color.\n    Example::\n\n    >>> plot([1, 2, 3], [1, 2, 3], 'go-', label='line 1', linewidth=2)\n    >>> plot([1, 2, 3], [1, 4, 9], 'rs', label='line 2')\n\n    If you specify multiple lines with one plot call, the kwargs apply\n    to all those lines. In case the label object is iterable, each\n    element is used as labels for each set of data.\n\n    Here is a list of available `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nscatter : XY scatter plot with markers of varying size and/or color (\n    sometimes also called bubble chart).\n\nNotes\n-----\n**Format Strings**\n\nA format string consists of a part for color, marker and line::\n\n    fmt = '[marker][line][color]'\n\nEach of them is optional. If not provided, the value from the style\ncycle is used. Exception: If ``line`` is given, but no ``marker``,\nthe data will be a line without markers.\n\nOther combinations such as ``[color][marker][line]`` are also\nsupported, but note that their parsing may be ambiguous.\n\n**Markers**\n\n=============   ===============================\ncharacter       description\n=============   ===============================\n``'.'``         point marker\n``','``         pixel marker\n``'o'``         circle marker\n``'v'``         triangle_down marker\n``'^'``         triangle_up marker\n``'<'``         triangle_left marker\n``'>'``         triangle_right marker\n``'1'``         tri_down marker\n``'2'``         tri_up marker\n``'3'``         tri_left marker\n``'4'``         tri_right marker\n``'8'``         octagon marker\n``'s'``         square marker\n``'p'``         pentagon marker\n``'P'``         plus (filled) marker\n``'*'``         star marker\n``'h'``         hexagon1 marker\n``'H'``         hexagon2 marker\n``'+'``         plus marker\n``'x'``         x marker\n``'X'``         x (filled) marker\n``'D'``         diamond marker\n``'d'``         thin_diamond marker\n``'|'``         vline marker\n``'_'``         hline marker\n=============   ===============================\n\n**Line Styles**\n\n=============    ===============================\ncharacter        description\n=============    ===============================\n``'-'``          solid line style\n``'--'``         dashed line style\n``'-.'``         dash-dot line style\n``':'``          dotted line style\n=============    ===============================\n\nExample format strings::\n\n    'b'    # blue markers with default shape\n    'or'   # red circles\n    '-g'   # green solid line\n    '--'   # dashed line with default color\n    '^k:'  # black triangle_up markers connected by a dotted line\n\n**Colors**\n\nThe supported color abbreviations are the single letter codes\n\n=============    ===============================\ncharacter        color\n=============    ===============================\n``'b'``          blue\n``'g'``          green\n``'r'``          red\n``'c'``          cyan\n``'m'``          magenta\n``'y'``          yellow\n``'k'``          black\n``'w'``          white\n=============    ===============================\n\nand the ``'CN'`` colors that index into the default property cycle.\n\nIf the color is the only part of the format string, you can\nadditionally use any  `matplotlib.colors` spec, e.g. full names\n(``'green'``) or hex strings (``'#008000'``)."
    },
    {
      "name": "plot_date",
      "docstring": "Plot coercing the axis to treat floats as dates.\n\n.. deprecated:: 3.9\n\n    This method exists for historic reasons and will be removed in version 3.11.\n\n    - ``datetime``-like data should directly be plotted using\n      `~.Axes.plot`.\n    -  If you need to plot plain numeric data as :ref:`date-format` or\n       need to set a timezone, call ``ax.xaxis.axis_date`` /\n       ``ax.yaxis.axis_date`` before `~.Axes.plot`. See\n       `.Axis.axis_date`.\n\nSimilar to `.plot`, this plots *y* vs. *x* as lines or markers.\nHowever, the axis labels are formatted as dates depending on *xdate*\nand *ydate*.  Note that `.plot` will work with `datetime` and\n`numpy.datetime64` objects without resorting to this method.\n\nParameters\n----------\nx, y : array-like\n    The coordinates of the data points. If *xdate* or *ydate* is\n    *True*, the respective values *x* or *y* are interpreted as\n    :ref:`Matplotlib dates <date-format>`.\n\nfmt : str, optional\n    The plot format string. For details, see the corresponding\n    parameter in `.plot`.\n\ntz : timezone string or `datetime.tzinfo`, default: :rc:`timezone`\n    The time zone to use in labeling dates.\n\nxdate : bool, default: True\n    If *True*, the *x*-axis will be interpreted as Matplotlib dates.\n\nydate : bool, default: False\n    If *True*, the *y*-axis will be interpreted as Matplotlib dates.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nmatplotlib.dates : Helper functions on dates.\nmatplotlib.dates.date2num : Convert dates to num.\nmatplotlib.dates.num2date : Convert num to dates.\nmatplotlib.dates.drange : Create an equally spaced sequence of dates.\n\nNotes\n-----\nIf you are using custom date tickers and formatters, it may be\nnecessary to set the formatters/locators after the call to\n`.plot_date`. `.plot_date` will set the default tick locator to\n`.AutoDateLocator` (if the tick locator is not already set to a\n`.DateLocator` instance) and the default tick formatter to\n`.AutoDateFormatter` (if the tick formatter is not already set to a\n`.DateFormatter` instance)."
    },
    {
      "name": "loglog",
      "docstring": "Make a plot with log scaling on both the x- and y-axis.\n\nCall signatures::\n\n    loglog([x], y, [fmt], data=None, **kwargs)\n    loglog([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThis is just a thin wrapper around `.plot` which additionally changes\nboth the x-axis and the y-axis to log scaling. All the concepts and\nparameters of plot can be used here as well.\n\nThe additional parameters *base*, *subs* and *nonpositive* control the\nx/y-axis properties. They are just forwarded to `.Axes.set_xscale` and\n`.Axes.set_yscale`. To use different properties on the x-axis and the\ny-axis, use e.g.\n``ax.set_xscale(\"log\", base=10); ax.set_yscale(\"log\", base=2)``.\n\nParameters\n----------\nbase : float, default: 10\n    Base of the logarithm.\n\nsubs : sequence, optional\n    The location of the minor ticks. If *None*, reasonable locations\n    are automatically chosen depending on the number of decades in the\n    plot. See `.Axes.set_xscale`/`.Axes.set_yscale` for details.\n\nnonpositive : {'mask', 'clip'}, default: 'clip'\n    Non-positive values can be masked as invalid, or clipped to a very\n    small positive number.\n\n**kwargs\n    All parameters supported by `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
    },
    {
      "name": "semilogx",
      "docstring": "Make a plot with log scaling on the x-axis.\n\nCall signatures::\n\n    semilogx([x], y, [fmt], data=None, **kwargs)\n    semilogx([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThis is just a thin wrapper around `.plot` which additionally changes\nthe x-axis to log scaling. All the concepts and parameters of plot can\nbe used here as well.\n\nThe additional parameters *base*, *subs*, and *nonpositive* control the\nx-axis properties. They are just forwarded to `.Axes.set_xscale`.\n\nParameters\n----------\nbase : float, default: 10\n    Base of the x logarithm.\n\nsubs : array-like, optional\n    The location of the minor xticks. If *None*, reasonable locations\n    are automatically chosen depending on the number of decades in the\n    plot. See `.Axes.set_xscale` for details.\n\nnonpositive : {'mask', 'clip'}, default: 'clip'\n    Non-positive values in x can be masked as invalid, or clipped to a\n    very small positive number.\n\n**kwargs\n    All parameters supported by `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
    },
    {
      "name": "semilogy",
      "docstring": "Make a plot with log scaling on the y-axis.\n\nCall signatures::\n\n    semilogy([x], y, [fmt], data=None, **kwargs)\n    semilogy([x], y, [fmt], [x2], y2, [fmt2], ..., **kwargs)\n\nThis is just a thin wrapper around `.plot` which additionally changes\nthe y-axis to log scaling. All the concepts and parameters of plot can\nbe used here as well.\n\nThe additional parameters *base*, *subs*, and *nonpositive* control the\ny-axis properties. They are just forwarded to `.Axes.set_yscale`.\n\nParameters\n----------\nbase : float, default: 10\n    Base of the y logarithm.\n\nsubs : array-like, optional\n    The location of the minor yticks. If *None*, reasonable locations\n    are automatically chosen depending on the number of decades in the\n    plot. See `.Axes.set_yscale` for details.\n\nnonpositive : {'mask', 'clip'}, default: 'clip'\n    Non-positive values in y can be masked as invalid, or clipped to a\n    very small positive number.\n\n**kwargs\n    All parameters supported by `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
    },
    {
      "name": "acorr",
      "docstring": "Plot the autocorrelation of *x*.\n\nParameters\n----------\nx : array-like\n    Not run through Matplotlib's unit conversion, so this should\n    be a unit-less array.\n\ndetrend : callable, default: `.mlab.detrend_none` (no detrending)\n    A detrending function applied to *x*.  It must have the\n    signature ::\n\n        detrend(x: np.ndarray) -> np.ndarray\n\nnormed : bool, default: True\n    If ``True``, input vectors are normalised to unit length.\n\nusevlines : bool, default: True\n    Determines the plot style.\n\n    If ``True``, vertical lines are plotted from 0 to the acorr value\n    using `.Axes.vlines`. Additionally, a horizontal line is plotted\n    at y=0 using `.Axes.axhline`.\n\n    If ``False``, markers are plotted at the acorr values using\n    `.Axes.plot`.\n\nmaxlags : int, default: 10\n    Number of lags to show. If ``None``, will return all\n    ``2 * len(x) - 1`` lags.\n\nReturns\n-------\nlags : array (length ``2*maxlags+1``)\n    The lag vector.\nc : array  (length ``2*maxlags+1``)\n    The auto correlation vector.\nline : `.LineCollection` or `.Line2D`\n    `.Artist` added to the Axes of the correlation:\n\n    - `.LineCollection` if *usevlines* is True.\n    - `.Line2D` if *usevlines* is False.\nb : `~matplotlib.lines.Line2D` or None\n    Horizontal line at 0 if *usevlines* is True\n    None *usevlines* is False.\n\nOther Parameters\n----------------\nlinestyle : `~matplotlib.lines.Line2D` property, optional\n    The linestyle for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\nmarker : str, default: 'o'\n    The marker for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additional parameters are passed to `.Axes.vlines` and\n    `.Axes.axhline` if *usevlines* is ``True``; otherwise they are\n    passed to `.Axes.plot`.\n\nNotes\n-----\nThe cross correlation is performed with `numpy.correlate` with\n``mode = \"full\"``."
    },
    {
      "name": "xcorr",
      "docstring": "Plot the cross correlation between *x* and *y*.\n\nThe correlation with lag k is defined as\n:math:`\\sum_n x[n+k] \\cdot y^*[n]`, where :math:`y^*` is the complex\nconjugate of :math:`y`.\n\nParameters\n----------\nx, y : array-like of length n\n    Neither *x* nor *y* are run through Matplotlib's unit conversion, so\n    these should be unit-less arrays.\n\ndetrend : callable, default: `.mlab.detrend_none` (no detrending)\n    A detrending function applied to *x* and *y*.  It must have the\n    signature ::\n\n        detrend(x: np.ndarray) -> np.ndarray\n\nnormed : bool, default: True\n    If ``True``, input vectors are normalised to unit length.\n\nusevlines : bool, default: True\n    Determines the plot style.\n\n    If ``True``, vertical lines are plotted from 0 to the xcorr value\n    using `.Axes.vlines`. Additionally, a horizontal line is plotted\n    at y=0 using `.Axes.axhline`.\n\n    If ``False``, markers are plotted at the xcorr values using\n    `.Axes.plot`.\n\nmaxlags : int, default: 10\n    Number of lags to show. If None, will return all ``2 * len(x) - 1``\n    lags.\n\nReturns\n-------\nlags : array (length ``2*maxlags+1``)\n    The lag vector.\nc : array  (length ``2*maxlags+1``)\n    The auto correlation vector.\nline : `.LineCollection` or `.Line2D`\n    `.Artist` added to the Axes of the correlation:\n\n    - `.LineCollection` if *usevlines* is True.\n    - `.Line2D` if *usevlines* is False.\nb : `~matplotlib.lines.Line2D` or None\n    Horizontal line at 0 if *usevlines* is True\n    None *usevlines* is False.\n\nOther Parameters\n----------------\nlinestyle : `~matplotlib.lines.Line2D` property, optional\n    The linestyle for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\nmarker : str, default: 'o'\n    The marker for plotting the data points.\n    Only used if *usevlines* is ``False``.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additional parameters are passed to `.Axes.vlines` and\n    `.Axes.axhline` if *usevlines* is ``True``; otherwise they are\n    passed to `.Axes.plot`.\n\nNotes\n-----\nThe cross correlation is performed with `numpy.correlate` with\n``mode = \"full\"``."
    },
    {
      "name": "step",
      "docstring": "Make a step plot.\n\nCall signatures::\n\n    step(x, y, [fmt], *, data=None, where='pre', **kwargs)\n    step(x, y, [fmt], x2, y2, [fmt2], ..., *, where='pre', **kwargs)\n\nThis is just a thin wrapper around `.plot` which changes some\nformatting options. Most of the concepts and parameters of plot can be\nused here as well.\n\n.. note::\n\n    This method uses a standard plot with a step drawstyle: The *x*\n    values are the reference positions and steps extend left/right/both\n    directions depending on *where*.\n\n    For the common case where you know the values and edges of the\n    steps, use `~.Axes.stairs` instead.\n\nParameters\n----------\nx : array-like\n    1D sequence of x positions. It is assumed, but not checked, that\n    it is uniformly increasing.\n\ny : array-like\n    1D sequence of y levels.\n\nfmt : str, optional\n    A format string, e.g. 'g' for a green line. See `.plot` for a more\n    detailed description.\n\n    Note: While full format strings are accepted, it is recommended to\n    only specify the color. Line styles are currently ignored (use\n    the keyword argument *linestyle* instead). Markers are accepted\n    and plotted on the given positions, however, this is a rarely\n    needed feature for step plots.\n\nwhere : {'pre', 'post', 'mid'}, default: 'pre'\n    Define where the steps should be placed:\n\n    - 'pre': The y value is continued constantly to the left from\n      every *x* position, i.e. the interval ``(x[i-1], x[i]]`` has the\n      value ``y[i]``.\n    - 'post': The y value is continued constantly to the right from\n      every *x* position, i.e. the interval ``[x[i], x[i+1])`` has the\n      value ``y[i]``.\n    - 'mid': Steps occur half-way between the *x* positions.\n\ndata : indexable object, optional\n    An object with labelled data. If given, provide the label names to\n    plot in *x* and *y*.\n\n**kwargs\n    Additional parameters are the same as those for `.plot`.\n\nReturns\n-------\nlist of `.Line2D`\n    Objects representing the plotted data."
    },
    {
      "name": "bar",
      "docstring": "Make a bar plot.\n\nThe bars are positioned at *x* with the given *align*\\ment. Their\ndimensions are given by *height* and *width*. The vertical baseline\nis *bottom* (default 0).\n\nMany parameters can take either a single value applying to all bars\nor a sequence of values, one for each bar.\n\nParameters\n----------\nx : float or array-like\n    The x coordinates of the bars. See also *align* for the\n    alignment of the bars to the coordinates.\n\n    Bars are often used for categorical data, i.e. string labels below\n    the bars. You can provide a list of strings directly to *x*.\n    ``bar(['A', 'B', 'C'], [1, 2, 3])`` is often a shorter and more\n    convenient notation compared to\n    ``bar(range(3), [1, 2, 3], tick_label=['A', 'B', 'C'])``. They are\n    equivalent as long as the names are unique. The explicit *tick_label*\n    notation draws the names in the sequence given. However, when having\n    duplicate values in categorical *x* data, these values map to the same\n    numerical x coordinate, and hence the corresponding bars are drawn on\n    top of each other.\n\nheight : float or array-like\n    The height(s) of the bars.\n\n    Note that if *bottom* has units (e.g. datetime), *height* should be in\n    units that are a difference from the value of *bottom* (e.g. timedelta).\n\nwidth : float or array-like, default: 0.8\n    The width(s) of the bars.\n\n    Note that if *x* has units (e.g. datetime), then *width* should be in\n    units that are a difference (e.g. timedelta) around the *x* values.\n\nbottom : float or array-like, default: 0\n    The y coordinate(s) of the bottom side(s) of the bars.\n\n    Note that if *bottom* has units, then the y-axis will get a Locator and\n    Formatter appropriate for the units (e.g. dates, or categorical).\n\nalign : {'center', 'edge'}, default: 'center'\n    Alignment of the bars to the *x* coordinates:\n\n    - 'center': Center the base on the *x* positions.\n    - 'edge': Align the left edges of the bars with the *x* positions.\n\n    To align the bars on the right edge pass a negative *width* and\n    ``align='edge'``.\n\nReturns\n-------\n`.BarContainer`\n    Container with all the bars and optionally errorbars.\n\nOther Parameters\n----------------\ncolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar faces. This is an alias for *facecolor*.\n    If both are given, *facecolor* takes precedence.\n\nfacecolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar faces.\n    If both *color* and *facecolor are given, *facecolor* takes precedence.\n\nedgecolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar edges.\n\nlinewidth : float or array-like, optional\n    Width of the bar edge(s). If 0, don't draw edges.\n\ntick_label : str or list of str, optional\n    The tick labels of the bars.\n    Default: None (Use default numeric labels.)\n\nlabel : str or list of str, optional\n    A single label is attached to the resulting `.BarContainer` as a\n    label for the whole dataset.\n    If a list is provided, it must be the same length as *x* and\n    labels the individual bars. Repeated labels are not de-duplicated\n    and will cause repeated label entries, so this is best used when\n    bars also differ in style (e.g., by passing a list to *color*.)\n\nxerr, yerr : float or array-like of shape(N,) or shape(2, N), optional\n    If not *None*, add horizontal / vertical errorbars to the bar tips.\n    The values are +/- sizes relative to the data:\n\n    - scalar: symmetric +/- values for all bars\n    - shape(N,): symmetric +/- values for each bar\n    - shape(2, N): Separate - and + values for each bar. First row\n      contains the lower errors, the second row contains the upper\n      errors.\n    - *None*: No errorbar. (Default)\n\n    See :doc:`/gallery/statistics/errorbar_features` for an example on\n    the usage of *xerr* and *yerr*.\n\necolor : :mpltype:`color` or list of :mpltype:`color`, default: 'black'\n    The line color of the errorbars.\n\ncapsize : float, default: :rc:`errorbar.capsize`\n   The length of the error bar caps in points.\n\nerror_kw : dict, optional\n    Dictionary of keyword arguments to be passed to the\n    `~.Axes.errorbar` method. Values of *ecolor* or *capsize* defined\n    here take precedence over the independent keyword arguments.\n\nlog : bool, default: False\n    If *True*, set the y-axis to be log scale.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs : `.Rectangle` properties\n\n%(Rectangle:kwdoc)s\n\nSee Also\n--------\nbarh : Plot a horizontal bar plot.\n\nNotes\n-----\nStacked bars can be achieved by passing individual *bottom* values per\nbar. See :doc:`/gallery/lines_bars_and_markers/bar_stacked`."
    },
    {
      "name": "barh",
      "docstring": "Make a horizontal bar plot.\n\nThe bars are positioned at *y* with the given *align*\\ment. Their\ndimensions are given by *width* and *height*. The horizontal baseline\nis *left* (default 0).\n\nMany parameters can take either a single value applying to all bars\nor a sequence of values, one for each bar.\n\nParameters\n----------\ny : float or array-like\n    The y coordinates of the bars. See also *align* for the\n    alignment of the bars to the coordinates.\n\n    Bars are often used for categorical data, i.e. string labels below\n    the bars. You can provide a list of strings directly to *y*.\n    ``barh(['A', 'B', 'C'], [1, 2, 3])`` is often a shorter and more\n    convenient notation compared to\n    ``barh(range(3), [1, 2, 3], tick_label=['A', 'B', 'C'])``. They are\n    equivalent as long as the names are unique. The explicit *tick_label*\n    notation draws the names in the sequence given. However, when having\n    duplicate values in categorical *y* data, these values map to the same\n    numerical y coordinate, and hence the corresponding bars are drawn on\n    top of each other.\n\nwidth : float or array-like\n    The width(s) of the bars.\n\n    Note that if *left* has units (e.g. datetime), *width* should be in\n    units that are a difference from the value of *left* (e.g. timedelta).\n\nheight : float or array-like, default: 0.8\n    The heights of the bars.\n\n    Note that if *y* has units (e.g. datetime), then *height* should be in\n    units that are a difference (e.g. timedelta) around the *y* values.\n\nleft : float or array-like, default: 0\n    The x coordinates of the left side(s) of the bars.\n\n    Note that if *left* has units, then the x-axis will get a Locator and\n    Formatter appropriate for the units (e.g. dates, or categorical).\n\nalign : {'center', 'edge'}, default: 'center'\n    Alignment of the base to the *y* coordinates*:\n\n    - 'center': Center the bars on the *y* positions.\n    - 'edge': Align the bottom edges of the bars with the *y*\n      positions.\n\n    To align the bars on the top edge pass a negative *height* and\n    ``align='edge'``.\n\nReturns\n-------\n`.BarContainer`\n    Container with all the bars and optionally errorbars.\n\nOther Parameters\n----------------\ncolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar faces.\n\nedgecolor : :mpltype:`color` or list of :mpltype:`color`, optional\n    The colors of the bar edges.\n\nlinewidth : float or array-like, optional\n    Width of the bar edge(s). If 0, don't draw edges.\n\ntick_label : str or list of str, optional\n    The tick labels of the bars.\n    Default: None (Use default numeric labels.)\n\nlabel : str or list of str, optional\n    A single label is attached to the resulting `.BarContainer` as a\n    label for the whole dataset.\n    If a list is provided, it must be the same length as *y* and\n    labels the individual bars. Repeated labels are not de-duplicated\n    and will cause repeated label entries, so this is best used when\n    bars also differ in style (e.g., by passing a list to *color*.)\n\nxerr, yerr : float or array-like of shape(N,) or shape(2, N), optional\n    If not *None*, add horizontal / vertical errorbars to the bar tips.\n    The values are +/- sizes relative to the data:\n\n    - scalar: symmetric +/- values for all bars\n    - shape(N,): symmetric +/- values for each bar\n    - shape(2, N): Separate - and + values for each bar. First row\n      contains the lower errors, the second row contains the upper\n      errors.\n    - *None*: No errorbar. (default)\n\n    See :doc:`/gallery/statistics/errorbar_features` for an example on\n    the usage of *xerr* and *yerr*.\n\necolor : :mpltype:`color` or list of :mpltype:`color`, default: 'black'\n    The line color of the errorbars.\n\ncapsize : float, default: :rc:`errorbar.capsize`\n   The length of the error bar caps in points.\n\nerror_kw : dict, optional\n    Dictionary of keyword arguments to be passed to the\n    `~.Axes.errorbar` method. Values of *ecolor* or *capsize* defined\n    here take precedence over the independent keyword arguments.\n\nlog : bool, default: False\n    If ``True``, set the x-axis to be log scale.\n\ndata : indexable object, optional\n    If given, all parameters also accept a string ``s``, which is\n    interpreted as ``data[s]`` if  ``s`` is a key in ``data``.\n\n**kwargs : `.Rectangle` properties\n\n%(Rectangle:kwdoc)s\n\nSee Also\n--------\nbar : Plot a vertical bar plot.\n\nNotes\n-----\nStacked bars can be achieved by passing individual *left* values per\nbar. See\n:doc:`/gallery/lines_bars_and_markers/horizontal_barchart_distribution`."
    },
    {
      "name": "bar_label",
      "docstring": "Label a bar plot.\n\nAdds labels to bars in the given `.BarContainer`.\nYou may need to adjust the axis limits to fit the labels.\n\nParameters\n----------\ncontainer : `.BarContainer`\n    Container with all the bars and optionally errorbars, likely\n    returned from `.bar` or `.barh`.\n\nlabels : array-like, optional\n    A list of label texts, that should be displayed. If not given, the\n    label texts will be the data values formatted with *fmt*.\n\nfmt : str or callable, default: '%g'\n    An unnamed %-style or {}-style format string for the label or a\n    function to call with the value as the first argument.\n    When *fmt* is a string and can be interpreted in both formats,\n    %-style takes precedence over {}-style.\n\n    .. versionadded:: 3.7\n       Support for {}-style format string and callables.\n\nlabel_type : {'edge', 'center'}, default: 'edge'\n    The label type. Possible values:\n\n    - 'edge': label placed at the end-point of the bar segment, and the\n      value displayed will be the position of that end-point.\n    - 'center': label placed in the center of the bar segment, and the\n      value displayed will be the length of that segment.\n      (useful for stacked bars, i.e.,\n      :doc:`/gallery/lines_bars_and_markers/bar_label_demo`)\n\npadding : float, default: 0\n    Distance of label from the end of the bar, in points.\n\n**kwargs\n    Any remaining keyword arguments are passed through to\n    `.Axes.annotate`. The alignment parameters (\n    *horizontalalignment* / *ha*, *verticalalignment* / *va*) are\n    not supported because the labels are automatically aligned to\n    the bars.\n\nReturns\n-------\nlist of `.Annotation`\n    A list of `.Annotation` instances for the labels."
    },
    {
      "name": "broken_barh",
      "docstring": "Plot a horizontal sequence of rectangles.\n\nA rectangle is drawn for each element of *xranges*. All rectangles\nhave the same vertical position and size defined by *yrange*.\n\nParameters\n----------\nxranges : sequence of tuples (*xmin*, *xwidth*)\n    The x-positions and extents of the rectangles. For each tuple\n    (*xmin*, *xwidth*) a rectangle is drawn from *xmin* to *xmin* +\n    *xwidth*.\nyrange : (*ymin*, *yheight*)\n    The y-position and extent for all the rectangles.\n\nReturns\n-------\n`~.collections.PolyCollection`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs : `.PolyCollection` properties\n\n    Each *kwarg* can be either a single argument applying to all\n    rectangles, e.g.::\n\n        facecolors='black'\n\n    or a sequence of arguments over which is cycled, e.g.::\n\n        facecolors=('black', 'blue')\n\n    would create interleaving black and blue rectangles.\n\n    Supported keywords:\n\n    %(PolyCollection:kwdoc)s"
    },
    {
      "name": "stem",
      "docstring": "Create a stem plot.\n\nA stem plot draws lines perpendicular to a baseline at each location\n*locs* from the baseline to *heads*, and places a marker there. For\nvertical stem plots (the default), the *locs* are *x* positions, and\nthe *heads* are *y* values. For horizontal stem plots, the *locs* are\n*y* positions, and the *heads* are *x* values.\n\nCall signature::\n\n  stem([locs,] heads, linefmt=None, markerfmt=None, basefmt=None)\n\nThe *locs*-positions are optional. *linefmt* may be provided as\npositional, but all other formats must be provided as keyword\narguments.\n\nParameters\n----------\nlocs : array-like, default: (0, 1, ..., len(heads) - 1)\n    For vertical stem plots, the x-positions of the stems.\n    For horizontal stem plots, the y-positions of the stems.\n\nheads : array-like\n    For vertical stem plots, the y-values of the stem heads.\n    For horizontal stem plots, the x-values of the stem heads.\n\nlinefmt : str, optional\n    A string defining the color and/or linestyle of the vertical lines:\n\n    =========  =============\n    Character  Line Style\n    =========  =============\n    ``'-'``    solid line\n    ``'--'``   dashed line\n    ``'-.'``   dash-dot line\n    ``':'``    dotted line\n    =========  =============\n\n    Default: 'C0-', i.e. solid line with the first color of the color\n    cycle.\n\n    Note: Markers specified through this parameter (e.g. 'x') will be\n    silently ignored. Instead, markers should be specified using\n    *markerfmt*.\n\nmarkerfmt : str, optional\n    A string defining the color and/or shape of the markers at the stem\n    heads. If the marker is not given, use the marker 'o', i.e. filled\n    circles. If the color is not given, use the color from *linefmt*.\n\nbasefmt : str, default: 'C3-' ('C2-' in classic mode)\n    A format string defining the properties of the baseline.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    The orientation of the stems.\n\nbottom : float, default: 0\n    The y/x-position of the baseline (depending on *orientation*).\n\nlabel : str, optional\n    The label to use for the stems in legends.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nReturns\n-------\n`.StemContainer`\n    The container may be treated like a tuple\n    (*markerline*, *stemlines*, *baseline*)\n\nNotes\n-----\n.. seealso::\n    The MATLAB function\n    `stem <https://www.mathworks.com/help/matlab/ref/stem.html>`_\n    which inspired this method."
    },
    {
      "name": "pie",
      "docstring": "Plot a pie chart.\n\nMake a pie chart of array *x*.  The fractional area of each wedge is\ngiven by ``x/sum(x)``.\n\nThe wedges are plotted counterclockwise, by default starting from the\nx-axis.\n\nParameters\n----------\nx : 1D array-like\n    The wedge sizes.\n\nexplode : array-like, default: None\n    If not *None*, is a ``len(x)`` array which specifies the fraction\n    of the radius with which to offset each wedge.\n\nlabels : list, default: None\n    A sequence of strings providing the labels for each wedge\n\ncolors : :mpltype:`color` or list of :mpltype:`color`, default: None\n    A sequence of colors through which the pie chart will cycle.  If\n    *None*, will use the colors in the currently active cycle.\n\nhatch : str or list, default: None\n    Hatching pattern applied to all pie wedges or sequence of patterns\n    through which the chart will cycle. For a list of valid patterns,\n    see :doc:`/gallery/shapes_and_collections/hatch_style_reference`.\n\n    .. versionadded:: 3.7\n\nautopct : None or str or callable, default: None\n    If not *None*, *autopct* is a string or function used to label the\n    wedges with their numeric value. The label will be placed inside\n    the wedge. If *autopct* is a format string, the label will be\n    ``fmt % pct``. If *autopct* is a function, then it will be called.\n\npctdistance : float, default: 0.6\n    The relative distance along the radius at which the text\n    generated by *autopct* is drawn. To draw the text outside the pie,\n    set *pctdistance* > 1. This parameter is ignored if *autopct* is\n    ``None``.\n\nlabeldistance : float or None, default: 1.1\n    The relative distance along the radius at which the labels are\n    drawn. To draw the labels inside the pie, set  *labeldistance* < 1.\n    If set to ``None``, labels are not drawn but are still stored for\n    use in `.legend`.\n\nshadow : bool or dict, default: False\n    If bool, whether to draw a shadow beneath the pie. If dict, draw a shadow\n    passing the properties in the dict to `.Shadow`.\n\n    .. versionadded:: 3.8\n        *shadow* can be a dict.\n\nstartangle : float, default: 0 degrees\n    The angle by which the start of the pie is rotated,\n    counterclockwise from the x-axis.\n\nradius : float, default: 1\n    The radius of the pie.\n\ncounterclock : bool, default: True\n    Specify fractions direction, clockwise or counterclockwise.\n\nwedgeprops : dict, default: None\n    Dict of arguments passed to each `.patches.Wedge` of the pie.\n    For example, ``wedgeprops = {'linewidth': 3}`` sets the width of\n    the wedge border lines equal to 3. By default, ``clip_on=False``.\n    When there is a conflict between these properties and other\n    keywords, properties passed to *wedgeprops* take precedence.\n\ntextprops : dict, default: None\n    Dict of arguments to pass to the text objects.\n\ncenter : (float, float), default: (0, 0)\n    The coordinates of the center of the chart.\n\nframe : bool, default: False\n    Plot Axes frame with the chart if true.\n\nrotatelabels : bool, default: False\n    Rotate each label to the angle of the corresponding slice if true.\n\nnormalize : bool, default: True\n    When *True*, always make a full pie by normalizing x so that\n    ``sum(x) == 1``. *False* makes a partial pie if ``sum(x) <= 1``\n    and raises a `ValueError` for ``sum(x) > 1``.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nReturns\n-------\npatches : list\n    A sequence of `matplotlib.patches.Wedge` instances\n\ntexts : list\n    A list of the label `.Text` instances.\n\nautotexts : list\n    A list of `.Text` instances for the numeric labels. This will only\n    be returned if the parameter *autopct* is not *None*.\n\nNotes\n-----\nThe pie chart will probably look best if the figure and Axes are\nsquare, or the Axes aspect is equal.\nThis method sets the aspect ratio of the axis to \"equal\".\nThe Axes aspect ratio can be controlled with `.Axes.set_aspect`."
    },
    {
      "name": "errorbar",
      "docstring": "Plot y versus x as lines and/or markers with attached errorbars.\n\n*x*, *y* define the data locations, *xerr*, *yerr* define the errorbar\nsizes. By default, this draws the data markers/lines as well as the\nerrorbars. Use fmt='none' to draw errorbars without any data markers.\n\n.. versionadded:: 3.7\n   Caps and error lines are drawn in polar coordinates on polar plots.\n\n\nParameters\n----------\nx, y : float or array-like\n    The data positions.\n\nxerr, yerr : float or array-like, shape(N,) or shape(2, N), optional\n    The errorbar sizes:\n\n    - scalar: Symmetric +/- values for all data points.\n    - shape(N,): Symmetric +/-values for each data point.\n    - shape(2, N): Separate - and + values for each bar. First row\n      contains the lower errors, the second row contains the upper\n      errors.\n    - *None*: No errorbar.\n\n    All values must be >= 0.\n\n    See :doc:`/gallery/statistics/errorbar_features`\n    for an example on the usage of ``xerr`` and ``yerr``.\n\nfmt : str, default: ''\n    The format for the data points / data lines. See `.plot` for\n    details.\n\n    Use 'none' (case-insensitive) to plot errorbars without any data\n    markers.\n\necolor : :mpltype:`color`, default: None\n    The color of the errorbar lines.  If None, use the color of the\n    line connecting the markers.\n\nelinewidth : float, default: None\n    The linewidth of the errorbar lines. If None, the linewidth of\n    the current style is used.\n\ncapsize : float, default: :rc:`errorbar.capsize`\n    The length of the error bar caps in points.\n\ncapthick : float, default: None\n    An alias to the keyword argument *markeredgewidth* (a.k.a. *mew*).\n    This setting is a more sensible name for the property that\n    controls the thickness of the error bar cap in points. For\n    backwards compatibility, if *mew* or *markeredgewidth* are given,\n    then they will over-ride *capthick*. This may change in future\n    releases.\n\nbarsabove : bool, default: False\n    If True, will plot the errorbars above the plot\n    symbols. Default is below.\n\nlolims, uplims, xlolims, xuplims : bool or array-like, default: False\n    These arguments can be used to indicate that a value gives only\n    upper/lower limits.  In that case a caret symbol is used to\n    indicate this. *lims*-arguments may be scalars, or array-likes of\n    the same length as *xerr* and *yerr*.  To use limits with inverted\n    axes, `~.Axes.set_xlim` or `~.Axes.set_ylim` must be called before\n    :meth:`errorbar`.  Note the tricky parameter names: setting e.g.\n    *lolims* to True means that the y-value is a *lower* limit of the\n    True value, so, only an *upward*-pointing arrow will be drawn!\n\nerrorevery : int or (int, int), default: 1\n    draws error bars on a subset of the data. *errorevery* =N draws\n    error bars on the points (x[::N], y[::N]).\n    *errorevery* =(start, N) draws error bars on the points\n    (x[start::N], y[start::N]). e.g. errorevery=(6, 3)\n    adds error bars to the data at (x[6], x[9], x[12], x[15], ...).\n    Used to avoid overlapping error bars when two series share x-axis\n    values.\n\nReturns\n-------\n`.ErrorbarContainer`\n    The container contains:\n\n    - data_line : A `~matplotlib.lines.Line2D` instance of x, y plot markers\n      and/or line.\n    - caplines : A tuple of `~matplotlib.lines.Line2D` instances of the error\n      bar caps.\n    - barlinecols : A tuple of `.LineCollection` with the horizontal and\n      vertical error ranges.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    All other keyword arguments are passed on to the `~.Axes.plot` call\n    drawing the markers. For example, this code makes big red squares\n    with thick green edges::\n\n        x, y, yerr = rand(3, 10)\n        errorbar(x, y, yerr, marker='s', mfc='red',\n                 mec='green', ms=20, mew=4)\n\n    where *mfc*, *mec*, *ms* and *mew* are aliases for the longer\n    property names, *markerfacecolor*, *markeredgecolor*, *markersize*\n    and *markeredgewidth*.\n\n    Valid kwargs for the marker properties are:\n\n    - *dashes*\n    - *dash_capstyle*\n    - *dash_joinstyle*\n    - *drawstyle*\n    - *fillstyle*\n    - *linestyle*\n    - *marker*\n    - *markeredgecolor*\n    - *markeredgewidth*\n    - *markerfacecolor*\n    - *markerfacecoloralt*\n    - *markersize*\n    - *markevery*\n    - *solid_capstyle*\n    - *solid_joinstyle*\n\n    Refer to the corresponding `.Line2D` property for more details:\n\n    %(Line2D:kwdoc)s"
    },
    {
      "name": "boxplot",
      "docstring": "Draw a box and whisker plot.\n\nThe box extends from the first quartile (Q1) to the third\nquartile (Q3) of the data, with a line at the median.\nThe whiskers extend from the box to the farthest data point\nlying within 1.5x the inter-quartile range (IQR) from the box.\nFlier points are those past the end of the whiskers.\nSee https://en.wikipedia.org/wiki/Box_plot for reference.\n\n.. code-block:: none\n\n          Q1-1.5IQR   Q1   median  Q3   Q3+1.5IQR\n                       |-----:-----|\n       o      |--------|     :     |--------|    o  o\n                       |-----:-----|\n     flier             <----------->            fliers\n                            IQR\n\n\nParameters\n----------\nx : Array or a sequence of vectors.\n    The input data.  If a 2D array, a boxplot is drawn for each column\n    in *x*.  If a sequence of 1D arrays, a boxplot is drawn for each\n    array in *x*.\n\nnotch : bool, default: :rc:`boxplot.notch`\n    Whether to draw a notched boxplot (`True`), or a rectangular\n    boxplot (`False`).  The notches represent the confidence interval\n    (CI) around the median.  The documentation for *bootstrap*\n    describes how the locations of the notches are computed by\n    default, but their locations may also be overridden by setting the\n    *conf_intervals* parameter.\n\n    .. note::\n\n        In cases where the values of the CI are less than the\n        lower quartile or greater than the upper quartile, the\n        notches will extend beyond the box, giving it a\n        distinctive \"flipped\" appearance. This is expected\n        behavior and consistent with other statistical\n        visualization packages.\n\nsym : str, optional\n    The default symbol for flier points.  An empty string ('') hides\n    the fliers.  If `None`, then the fliers default to 'b+'.  More\n    control is provided by the *flierprops* parameter.\n\nvert : bool, optional\n    .. deprecated:: 3.11\n        Use *orientation* instead.\n\n        This is a pending deprecation for 3.10, with full deprecation\n        in 3.11 and removal in 3.13.\n        If this is given during the deprecation period, it overrides\n        the *orientation* parameter.\n\n    If True, plots the boxes vertically.\n    If False, plots the boxes horizontally.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', plots the boxes horizontally.\n    Otherwise, plots the boxes vertically.\n\n    .. versionadded:: 3.10\n\nwhis : float or (float, float), default: 1.5\n    The position of the whiskers.\n\n    If a float, the lower whisker is at the lowest datum above\n    ``Q1 - whis*(Q3-Q1)``, and the upper whisker at the highest datum\n    below ``Q3 + whis*(Q3-Q1)``, where Q1 and Q3 are the first and\n    third quartiles.  The default value of ``whis = 1.5`` corresponds\n    to Tukey's original definition of boxplots.\n\n    If a pair of floats, they indicate the percentiles at which to\n    draw the whiskers (e.g., (5, 95)).  In particular, setting this to\n    (0, 100) results in whiskers covering the whole range of the data.\n\n    In the edge case where ``Q1 == Q3``, *whis* is automatically set\n    to (0, 100) (cover the whole range of the data) if *autorange* is\n    True.\n\n    Beyond the whiskers, data are considered outliers and are plotted\n    as individual points.\n\nbootstrap : int, optional\n    Specifies whether to bootstrap the confidence intervals\n    around the median for notched boxplots. If *bootstrap* is\n    None, no bootstrapping is performed, and notches are\n    calculated using a Gaussian-based asymptotic approximation\n    (see McGill, R., Tukey, J.W., and Larsen, W.A., 1978, and\n    Kendall and Stuart, 1967). Otherwise, bootstrap specifies\n    the number of times to bootstrap the median to determine its\n    95% confidence intervals. Values between 1000 and 10000 are\n    recommended.\n\nusermedians : 1D array-like, optional\n    A 1D array-like of length ``len(x)``.  Each entry that is not\n    `None` forces the value of the median for the corresponding\n    dataset.  For entries that are `None`, the medians are computed\n    by Matplotlib as normal.\n\nconf_intervals : array-like, optional\n    A 2D array-like of shape ``(len(x), 2)``.  Each entry that is not\n    None forces the location of the corresponding notch (which is\n    only drawn if *notch* is `True`).  For entries that are `None`,\n    the notches are computed by the method specified by the other\n    parameters (e.g., *bootstrap*).\n\npositions : array-like, optional\n    The positions of the boxes. The ticks and limits are\n    automatically set to match the positions. Defaults to\n    ``range(1, N+1)`` where N is the number of boxes to be drawn.\n\nwidths : float or array-like\n    The widths of the boxes.  The default is 0.5, or ``0.15*(distance\n    between extreme positions)``, if that is smaller.\n\npatch_artist : bool, default: :rc:`boxplot.patchartist`\n    If `False` produces boxes with the Line2D artist. Otherwise,\n    boxes are drawn with Patch artists.\n\ntick_labels : list of str, optional\n    The tick labels of each boxplot.\n    Ticks are always placed at the box *positions*. If *tick_labels* is given,\n    the ticks are labelled accordingly. Otherwise, they keep their numeric\n    values.\n\n    .. versionchanged:: 3.9\n        Renamed from *labels*, which is deprecated since 3.9\n        and will be removed in 3.11.\n\nmanage_ticks : bool, default: True\n    If True, the tick locations and labels will be adjusted to match\n    the boxplot positions.\n\nautorange : bool, default: False\n    When `True` and the data are distributed such that the 25th and\n    75th percentiles are equal, *whis* is set to (0, 100) such\n    that the whisker ends are at the minimum and maximum of the data.\n\nmeanline : bool, default: :rc:`boxplot.meanline`\n    If `True` (and *showmeans* is `True`), will try to render the\n    mean as a line spanning the full width of the box according to\n    *meanprops* (see below).  Not recommended if *shownotches* is also\n    True.  Otherwise, means will be shown as points.\n\nzorder : float, default: ``Line2D.zorder = 2``\n    The zorder of the boxplot.\n\nReturns\n-------\ndict\n  A dictionary mapping each component of the boxplot to a list\n  of the `.Line2D` instances created. That dictionary has the\n  following keys (assuming vertical boxplots):\n\n  - ``boxes``: the main body of the boxplot showing the\n    quartiles and the median's confidence intervals if\n    enabled.\n\n  - ``medians``: horizontal lines at the median of each box.\n\n  - ``whiskers``: the vertical lines extending to the most\n    extreme, non-outlier data points.\n\n  - ``caps``: the horizontal lines at the ends of the\n    whiskers.\n\n  - ``fliers``: points representing data that extend beyond\n    the whiskers (fliers).\n\n  - ``means``: points or lines representing the means.\n\nOther Parameters\n----------------\nshowcaps : bool, default: :rc:`boxplot.showcaps`\n    Show the caps on the ends of whiskers.\nshowbox : bool, default: :rc:`boxplot.showbox`\n    Show the central box.\nshowfliers : bool, default: :rc:`boxplot.showfliers`\n    Show the outliers beyond the caps.\nshowmeans : bool, default: :rc:`boxplot.showmeans`\n    Show the arithmetic means.\ncapprops : dict, default: None\n    The style of the caps.\ncapwidths : float or array, default: None\n    The widths of the caps.\nboxprops : dict, default: None\n    The style of the box.\nwhiskerprops : dict, default: None\n    The style of the whiskers.\nflierprops : dict, default: None\n    The style of the fliers.\nmedianprops : dict, default: None\n    The style of the median.\nmeanprops : dict, default: None\n    The style of the mean.\nlabel : str or list of str, optional\n    Legend labels. Use a single string when all boxes have the same style and\n    you only want a single legend entry for them. Use a list of strings to\n    label all boxes individually. To be distinguishable, the boxes should be\n    styled individually, which is currently only possible by modifying the\n    returned artists, see e.g. :doc:`/gallery/statistics/boxplot_demo`.\n\n    In the case of a single string, the legend entry will technically be\n    associated with the first box only. By default, the legend will show the\n    median line (``result[\"medians\"]``); if *patch_artist* is True, the legend\n    will show the box `.Patch` artists (``result[\"boxes\"]``) instead.\n\n    .. versionadded:: 3.9\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nSee Also\n--------\n.Axes.bxp : Draw a boxplot from pre-computed statistics.\nviolinplot : Draw an estimate of the probability density function."
    },
    {
      "name": "bxp",
      "docstring": "Draw a box and whisker plot from pre-computed statistics.\n\nThe box extends from the first quartile *q1* to the third\nquartile *q3* of the data, with a line at the median (*med*).\nThe whiskers extend from *whislow* to *whishi*.\nFlier points are markers past the end of the whiskers.\nSee https://en.wikipedia.org/wiki/Box_plot for reference.\n\n.. code-block:: none\n\n           whislow    q1    med    q3    whishi\n                       |-----:-----|\n       o      |--------|     :     |--------|    o  o\n                       |-----:-----|\n     flier                                      fliers\n\n.. note::\n    This is a low-level drawing function for when you already\n    have the statistical parameters. If you want a boxplot based\n    on a dataset, use `~.Axes.boxplot` instead.\n\nParameters\n----------\nbxpstats : list of dicts\n    A list of dictionaries containing stats for each boxplot.\n    Required keys are:\n\n    - ``med``: Median (float).\n    - ``q1``, ``q3``: First & third quartiles (float).\n    - ``whislo``, ``whishi``: Lower & upper whisker positions (float).\n\n    Optional keys are:\n\n    - ``mean``: Mean (float).  Needed if ``showmeans=True``.\n    - ``fliers``: Data beyond the whiskers (array-like).\n      Needed if ``showfliers=True``.\n    - ``cilo``, ``cihi``: Lower & upper confidence intervals\n      about the median. Needed if ``shownotches=True``.\n    - ``label``: Name of the dataset (str).  If available,\n      this will be used a tick label for the boxplot\n\npositions : array-like, default: [1, 2, ..., n]\n    The positions of the boxes. The ticks and limits\n    are automatically set to match the positions.\n\nwidths : float or array-like, default: None\n    The widths of the boxes.  The default is\n    ``clip(0.15*(distance between extreme positions), 0.15, 0.5)``.\n\ncapwidths : float or array-like, default: None\n    Either a scalar or a vector and sets the width of each cap.\n    The default is ``0.5*(width of the box)``, see *widths*.\n\nvert : bool, optional\n    .. deprecated:: 3.11\n        Use *orientation* instead.\n\n        This is a pending deprecation for 3.10, with full deprecation\n        in 3.11 and removal in 3.13.\n        If this is given during the deprecation period, it overrides\n        the *orientation* parameter.\n\n    If True, plots the boxes vertically.\n    If False, plots the boxes horizontally.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', plots the boxes horizontally.\n    Otherwise, plots the boxes vertically.\n\n    .. versionadded:: 3.10\n\npatch_artist : bool, default: False\n    If `False` produces boxes with the `.Line2D` artist.\n    If `True` produces boxes with the `~matplotlib.patches.Patch` artist.\n\nshownotches, showmeans, showcaps, showbox, showfliers : bool\n    Whether to draw the CI notches, the mean value (both default to\n    False), the caps, the box, and the fliers (all three default to\n    True).\n\nboxprops, whiskerprops, capprops, flierprops, medianprops, meanprops : dict, optional\n    Artist properties for the boxes, whiskers, caps, fliers, medians, and\n    means.\n\nmeanline : bool, default: False\n    If `True` (and *showmeans* is `True`), will try to render the mean\n    as a line spanning the full width of the box according to\n    *meanprops*. Not recommended if *shownotches* is also True.\n    Otherwise, means will be shown as points.\n\nmanage_ticks : bool, default: True\n    If True, the tick locations and labels will be adjusted to match the\n    boxplot positions.\n\nlabel : str or list of str, optional\n    Legend labels. Use a single string when all boxes have the same style and\n    you only want a single legend entry for them. Use a list of strings to\n    label all boxes individually. To be distinguishable, the boxes should be\n    styled individually, which is currently only possible by modifying the\n    returned artists, see e.g. :doc:`/gallery/statistics/boxplot_demo`.\n\n    In the case of a single string, the legend entry will technically be\n    associated with the first box only. By default, the legend will show the\n    median line (``result[\"medians\"]``); if *patch_artist* is True, the legend\n    will show the box `.Patch` artists (``result[\"boxes\"]``) instead.\n\n    .. versionadded:: 3.9\n\nzorder : float, default: ``Line2D.zorder = 2``\n    The zorder of the resulting boxplot.\n\nReturns\n-------\ndict\n    A dictionary mapping each component of the boxplot to a list\n    of the `.Line2D` instances created. That dictionary has the\n    following keys (assuming vertical boxplots):\n\n    - ``boxes``: main bodies of the boxplot showing the quartiles, and\n      the median's confidence intervals if enabled.\n    - ``medians``: horizontal lines at the median of each box.\n    - ``whiskers``: vertical lines up to the last non-outlier data.\n    - ``caps``: horizontal lines at the ends of the whiskers.\n    - ``fliers``: points representing data beyond the whiskers (fliers).\n    - ``means``: points or lines representing the means.\n\nSee Also\n--------\nboxplot : Draw a boxplot from data instead of pre-computed statistics."
    },
    {
      "name": "scatter",
      "docstring": "A scatter plot of *y* vs. *x* with varying marker size and/or color.\n\nParameters\n----------\nx, y : float or array-like, shape (n, )\n    The data positions.\n\ns : float or array-like, shape (n, ), optional\n    The marker size in points**2 (typographic points are 1/72 in.).\n    Default is ``rcParams['lines.markersize'] ** 2``.\n\n    The linewidth and edgecolor can visually interact with the marker\n    size, and can lead to artifacts if the marker size is smaller than\n    the linewidth.\n\n    If the linewidth is greater than 0 and the edgecolor is anything\n    but *'none'*, then the effective size of the marker will be\n    increased by half the linewidth because the stroke will be centered\n    on the edge of the shape.\n\n    To eliminate the marker edge either set *linewidth=0* or\n    *edgecolor='none'*.\n\nc : array-like or list of :mpltype:`color` or :mpltype:`color`, optional\n    The marker colors. Possible values:\n\n    - A scalar or sequence of n numbers to be mapped to colors using\n      *cmap* and *norm*.\n    - A 2D array in which the rows are RGB or RGBA.\n    - A sequence of colors of length n.\n    - A single color format string.\n\n    Note that *c* should not be a single numeric RGB or RGBA sequence\n    because that is indistinguishable from an array of values to be\n    colormapped. If you want to specify the same RGB or RGBA value for\n    all points, use a 2D array with a single row.  Otherwise,\n    value-matching will have precedence in case of a size matching with\n    *x* and *y*.\n\n    If you wish to specify a single color for all points\n    prefer the *color* keyword argument.\n\n    Defaults to `None`. In that case the marker color is determined\n    by the value of *color*, *facecolor* or *facecolors*. In case\n    those are not specified or `None`, the marker color is determined\n    by the next color of the ``Axes``' current \"shape and fill\" color\n    cycle. This cycle defaults to :rc:`axes.prop_cycle`.\n\nmarker : `~.markers.MarkerStyle`, default: :rc:`scatter.marker`\n    The marker style. *marker* can be either an instance of the class\n    or the text shorthand for a particular marker.\n    See :mod:`matplotlib.markers` for more information about marker\n    styles.\n\n%(cmap_doc)s\n\n    This parameter is ignored if *c* is RGB(A).\n\n%(norm_doc)s\n\n    This parameter is ignored if *c* is RGB(A).\n\n%(vmin_vmax_doc)s\n\n    This parameter is ignored if *c* is RGB(A).\n\nalpha : float, default: None\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nlinewidths : float or array-like, default: :rc:`lines.linewidth`\n    The linewidth of the marker edges. Note: The default *edgecolors*\n    is 'face'. You may want to change this as well.\n\nedgecolors : {'face', 'none', *None*} or :mpltype:`color` or list of :mpltype:`color`, default: :rc:`scatter.edgecolors`\n    The edge color of the marker. Possible values:\n\n    - 'face': The edge color will always be the same as the face color.\n    - 'none': No patch boundary will be drawn.\n    - A color or sequence of colors.\n\n    For non-filled markers, *edgecolors* is ignored. Instead, the color\n    is determined like with 'face', i.e. from *c*, *colors*, or\n    *facecolors*.\n\n%(colorizer_doc)s\n\n    This parameter is ignored if *c* is RGB(A).\n\nplotnonfinite : bool, default: False\n    Whether to plot points with nonfinite *c* (i.e. ``inf``, ``-inf``\n    or ``nan``). If ``True`` the points are drawn with the *bad*\n    colormap color (see `.Colormap.set_bad`).\n\nReturns\n-------\n`~matplotlib.collections.PathCollection`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n**kwargs : `~matplotlib.collections.PathCollection` properties\n    %(PathCollection:kwdoc)s\n\nSee Also\n--------\nplot : To plot scatter plots when markers are identical in size and\n    color.\n\nNotes\n-----\n* The `.plot` function will be faster for scatterplots where markers\n  don't vary in size or color.\n\n* Any or all of *x*, *y*, *s*, and *c* may be masked arrays, in which\n  case all masks will be combined and only unmasked points will be\n  plotted.\n\n* Fundamentally, scatter works with 1D arrays; *x*, *y*, *s*, and *c*\n  may be input as N-D arrays, but within scatter they will be\n  flattened. The exception is *c*, which will be flattened only if its\n  size matches the size of *x* and *y*."
    },
    {
      "name": "hexbin",
      "docstring": "Make a 2D hexagonal binning plot of points *x*, *y*.\n\nIf *C* is *None*, the value of the hexagon is determined by the number\nof points in the hexagon. Otherwise, *C* specifies values at the\ncoordinate (x[i], y[i]). For each hexagon, these values are reduced\nusing *reduce_C_function*.\n\nParameters\n----------\nx, y : array-like\n    The data positions. *x* and *y* must be of the same length.\n\nC : array-like, optional\n    If given, these values are accumulated in the bins. Otherwise,\n    every point has a value of 1. Must be of the same length as *x*\n    and *y*.\n\ngridsize : int or (int, int), default: 100\n    If a single int, the number of hexagons in the *x*-direction.\n    The number of hexagons in the *y*-direction is chosen such that\n    the hexagons are approximately regular.\n\n    Alternatively, if a tuple (*nx*, *ny*), the number of hexagons\n    in the *x*-direction and the *y*-direction. In the\n    *y*-direction, counting is done along vertically aligned\n    hexagons, not along the zig-zag chains of hexagons; see the\n    following illustration.\n\n    .. plot::\n\n       import numpy\n       import matplotlib.pyplot as plt\n\n       np.random.seed(19680801)\n       n= 300\n       x = np.random.standard_normal(n)\n       y = np.random.standard_normal(n)\n\n       fig, ax = plt.subplots(figsize=(4, 4))\n       h = ax.hexbin(x, y, gridsize=(5, 3))\n       hx, hy = h.get_offsets().T\n       ax.plot(hx[24::3], hy[24::3], 'ro-')\n       ax.plot(hx[-3:], hy[-3:], 'ro-')\n       ax.set_title('gridsize=(5, 3)')\n       ax.axis('off')\n\n    To get approximately regular hexagons, choose\n    :math:`n_x = \\sqrt{3}\\,n_y`.\n\nbins : 'log' or int or sequence, default: None\n    Discretization of the hexagon values.\n\n    - If *None*, no binning is applied; the color of each hexagon\n      directly corresponds to its count value.\n    - If 'log', use a logarithmic scale for the colormap.\n      Internally, :math:`log_{10}(i+1)` is used to determine the\n      hexagon color. This is equivalent to ``norm=LogNorm()``.\n    - If an integer, divide the counts in the specified number\n      of bins, and color the hexagons accordingly.\n    - If a sequence of values, the values of the lower bound of\n      the bins to be used.\n\nxscale : {'linear', 'log'}, default: 'linear'\n    Use a linear or log10 scale on the horizontal axis.\n\nyscale : {'linear', 'log'}, default: 'linear'\n    Use a linear or log10 scale on the vertical axis.\n\nmincnt : int >= 0, default: *None*\n    If not *None*, only display cells with at least *mincnt*\n    number of points in the cell.\n\nmarginals : bool, default: *False*\n    If marginals is *True*, plot the marginal density as\n    colormapped rectangles along the bottom of the x-axis and\n    left of the y-axis.\n\nextent : 4-tuple of float, default: *None*\n    The limits of the bins (xmin, xmax, ymin, ymax).\n    The default assigns the limits based on\n    *gridsize*, *x*, *y*, *xscale* and *yscale*.\n\n    If *xscale* or *yscale* is set to 'log', the limits are\n    expected to be the exponent for a power of 10. E.g. for\n    x-limits of 1 and 50 in 'linear' scale and y-limits\n    of 10 and 1000 in 'log' scale, enter (1, 50, 1, 3).\n\nReturns\n-------\n`~matplotlib.collections.PolyCollection`\n    A `.PolyCollection` defining the hexagonal bins.\n\n    - `.PolyCollection.get_offsets` contains a Mx2 array containing\n      the x, y positions of the M hexagon centers in data coordinates.\n    - `.PolyCollection.get_array` contains the values of the M\n      hexagons.\n\n    If *marginals* is *True*, horizontal\n    bar and vertical bar (both PolyCollections) will be attached\n    to the return collection as attributes *hbar* and *vbar*.\n\nOther Parameters\n----------------\n%(cmap_doc)s\n\n%(norm_doc)s\n\n%(vmin_vmax_doc)s\n\nalpha : float between 0 and 1, optional\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nlinewidths : float, default: *None*\n    If *None*, defaults to :rc:`patch.linewidth`.\n\nedgecolors : {'face', 'none', *None*} or color, default: 'face'\n    The color of the hexagon edges. Possible values are:\n\n    - 'face': Draw the edges in the same color as the fill color.\n    - 'none': No edges are drawn. This can sometimes lead to unsightly\n      unpainted pixels between the hexagons.\n    - *None*: Draw outlines in the default color.\n    - An explicit color.\n\nreduce_C_function : callable, default: `numpy.mean`\n    The function to aggregate *C* within the bins. It is ignored if\n    *C* is not given. This must have the signature::\n\n        def reduce_C_function(C: array) -> float\n\n    Commonly used functions are:\n\n    - `numpy.mean`: average of the points\n    - `numpy.sum`: integral of the point values\n    - `numpy.amax`: value taken from the largest point\n\n    By default will only reduce cells with at least 1 point because some\n    reduction functions (such as `numpy.amax`) will error/warn with empty\n    input. Changing *mincnt* will adjust the cutoff, and if set to 0 will\n    pass empty input to the reduction function.\n\n%(colorizer_doc)s\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs : `~matplotlib.collections.PolyCollection` properties\n    All other keyword arguments are passed on to `.PolyCollection`:\n\n    %(PolyCollection:kwdoc)s\n\nSee Also\n--------\nhist2d : 2D histogram rectangular bins"
    },
    {
      "name": "arrow",
      "docstring": "[*Discouraged*] Add an arrow to the Axes.\n\nThis draws an arrow from ``(x, y)`` to ``(x+dx, y+dy)``.\n\n.. admonition:: Discouraged\n\n    The use of this method is discouraged because it is not guaranteed\n    that the arrow renders reasonably. For example, the resulting arrow\n    is affected by the Axes aspect ratio and limits, which may distort\n    the arrow.\n\n    Consider using `~.Axes.annotate` without a text instead, e.g. ::\n\n        ax.annotate(\"\", xytext=(0, 0), xy=(0.5, 0.5),\n                    arrowprops=dict(arrowstyle=\"->\"))\n\nParameters\n----------\n%(FancyArrow)s\n\nReturns\n-------\n`.FancyArrow`\n    The created `.FancyArrow` object."
    },
    {
      "name": "quiverkey",
      "docstring": null
    },
    {
      "name": "quiver",
      "docstring": "%(quiver_doc)s"
    },
    {
      "name": "barbs",
      "docstring": "%(barbs_doc)s"
    },
    {
      "name": "fill",
      "docstring": "Plot filled polygons.\n\nParameters\n----------\n*args : sequence of x, y, [color]\n    Each polygon is defined by the lists of *x* and *y* positions of\n    its nodes, optionally followed by a *color* specifier. See\n    :mod:`matplotlib.colors` for supported color specifiers. The\n    standard color cycle is used for polygons without a color\n    specifier.\n\n    You can plot multiple polygons by providing multiple *x*, *y*,\n    *[color]* groups.\n\n    For example, each of the following is legal::\n\n        ax.fill(x, y)                    # a polygon with default color\n        ax.fill(x, y, \"b\")               # a blue polygon\n        ax.fill(x, y, x2, y2)            # two polygons\n        ax.fill(x, y, \"b\", x2, y2, \"r\")  # a blue and a red polygon\n\ndata : indexable object, optional\n    An object with labelled data. If given, provide the label names to\n    plot in *x* and *y*, e.g.::\n\n        ax.fill(\"time\", \"signal\",\n                data={\"time\": [0, 1, 2], \"signal\": [0, 1, 0]})\n\nReturns\n-------\nlist of `~matplotlib.patches.Polygon`\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.patches.Polygon` properties\n\nNotes\n-----\nUse :meth:`fill_between` if you would like to fill the region between\ntwo curves."
    },
    {
      "name": "fill_between",
      "docstring": null
    },
    {
      "name": "fill_betweenx",
      "docstring": null
    },
    {
      "name": "imshow",
      "docstring": "Display data as an image, i.e., on a 2D regular raster.\n\nThe input may either be actual RGB(A) data, or 2D scalar data, which\nwill be rendered as a pseudocolor image. For displaying a grayscale\nimage, set up the colormapping using the parameters\n``cmap='gray', vmin=0, vmax=255``.\n\nThe number of pixels used to render an image is set by the Axes size\nand the figure *dpi*. This can lead to aliasing artifacts when\nthe image is resampled, because the displayed image size will usually\nnot match the size of *X* (see\n:doc:`/gallery/images_contours_and_fields/image_antialiasing`).\nThe resampling can be controlled via the *interpolation* parameter\nand/or :rc:`image.interpolation`.\n\nParameters\n----------\nX : array-like or PIL image\n    The image data. Supported array shapes are:\n\n    - (M, N): an image with scalar data. The values are mapped to\n      colors using normalization and a colormap. See parameters *norm*,\n      *cmap*, *vmin*, *vmax*.\n    - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n    - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n      i.e. including transparency.\n\n    The first two dimensions (M, N) define the rows and columns of\n    the image.\n\n    Out-of-range RGB(A) values are clipped.\n\n%(cmap_doc)s\n\n    This parameter is ignored if *X* is RGB(A).\n\n%(norm_doc)s\n\n    This parameter is ignored if *X* is RGB(A).\n\n%(vmin_vmax_doc)s\n\n    This parameter is ignored if *X* is RGB(A).\n\n%(colorizer_doc)s\n\n    This parameter is ignored if *X* is RGB(A).\n\naspect : {'equal', 'auto'} or float or None, default: None\n    The aspect ratio of the Axes.  This parameter is particularly\n    relevant for images since it determines whether data pixels are\n    square.\n\n    This parameter is a shortcut for explicitly calling\n    `.Axes.set_aspect`. See there for further details.\n\n    - 'equal': Ensures an aspect ratio of 1. Pixels will be square\n      (unless pixel sizes are explicitly made non-square in data\n      coordinates using *extent*).\n    - 'auto': The Axes is kept fixed and the aspect is adjusted so\n      that the data fit in the Axes. In general, this will result in\n      non-square pixels.\n\n    Normally, None (the default) means to use :rc:`image.aspect`.  However, if\n    the image uses a transform that does not contain the axes data transform,\n    then None means to not modify the axes aspect at all (in that case, directly\n    call `.Axes.set_aspect` if desired).\n\ninterpolation : str, default: :rc:`image.interpolation`\n    The interpolation method used.\n\n    Supported values are 'none', 'auto', 'nearest', 'bilinear',\n    'bicubic', 'spline16', 'spline36', 'hanning', 'hamming', 'hermite',\n    'kaiser', 'quadric', 'catrom', 'gaussian', 'bessel', 'mitchell',\n    'sinc', 'lanczos', 'blackman'.\n\n    The data *X* is resampled to the pixel size of the image on the\n    figure canvas, using the interpolation method to either up- or\n    downsample the data.\n\n    If *interpolation* is 'none', then for the ps, pdf, and svg\n    backends no down- or upsampling occurs, and the image data is\n    passed to the backend as a native image.  Note that different ps,\n    pdf, and svg viewers may display these raw pixels differently. On\n    other backends, 'none' is the same as 'nearest'.\n\n    If *interpolation* is the default 'auto', then 'nearest'\n    interpolation is used if the image is upsampled by more than a\n    factor of three (i.e. the number of display pixels is at least\n    three times the size of the data array).  If the upsampling rate is\n    smaller than 3, or the image is downsampled, then 'hanning'\n    interpolation is used to act as an anti-aliasing filter, unless the\n    image happens to be upsampled by exactly a factor of two or one.\n\n    See\n    :doc:`/gallery/images_contours_and_fields/interpolation_methods`\n    for an overview of the supported interpolation methods, and\n    :doc:`/gallery/images_contours_and_fields/image_antialiasing` for\n    a discussion of image antialiasing.\n\n    Some interpolation methods require an additional radius parameter,\n    which can be set by *filterrad*. Additionally, the antigrain image\n    resize filter is controlled by the parameter *filternorm*.\n\ninterpolation_stage : {'auto', 'data', 'rgba'}, default: 'auto'\n    Supported values:\n\n    - 'data': Interpolation is carried out on the data provided by the user\n      This is useful if interpolating between pixels during upsampling.\n    - 'rgba': The interpolation is carried out in RGBA-space after the\n      color-mapping has been applied. This is useful if downsampling and\n      combining pixels visually.\n    - 'auto': Select a suitable interpolation stage automatically. This uses\n      'rgba' when downsampling, or upsampling at a rate less than 3, and\n      'data' when upsampling at a higher rate.\n\n    See :doc:`/gallery/images_contours_and_fields/image_antialiasing` for\n    a discussion of image antialiasing.\n\nalpha : float or array-like, optional\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n    If *alpha* is an array, the alpha blending values are applied pixel\n    by pixel, and *alpha* must have the same shape as *X*.\n\norigin : {'upper', 'lower'}, default: :rc:`image.origin`\n    Place the [0, 0] index of the array in the upper left or lower\n    left corner of the Axes. The convention (the default) 'upper' is\n    typically used for matrices and images.\n\n    Note that the vertical axis points upward for 'lower'\n    but downward for 'upper'.\n\n    See the :ref:`imshow_extent` tutorial for\n    examples and a more detailed description.\n\nextent : floats (left, right, bottom, top), optional\n    The bounding box in data coordinates that the image will fill.\n    These values may be unitful and match the units of the Axes.\n    The image is stretched individually along x and y to fill the box.\n\n    The default extent is determined by the following conditions.\n    Pixels have unit size in data coordinates. Their centers are on\n    integer coordinates, and their center coordinates range from 0 to\n    columns-1 horizontally and from 0 to rows-1 vertically.\n\n    Note that the direction of the vertical axis and thus the default\n    values for top and bottom depend on *origin*:\n\n    - For ``origin == 'upper'`` the default is\n      ``(-0.5, numcols-0.5, numrows-0.5, -0.5)``.\n    - For ``origin == 'lower'`` the default is\n      ``(-0.5, numcols-0.5, -0.5, numrows-0.5)``.\n\n    See the :ref:`imshow_extent` tutorial for\n    examples and a more detailed description.\n\nfilternorm : bool, default: True\n    A parameter for the antigrain image resize filter (see the\n    antigrain documentation).  If *filternorm* is set, the filter\n    normalizes integer values and corrects the rounding errors. It\n    doesn't do anything with the source floating point values, it\n    corrects only integers according to the rule of 1.0 which means\n    that any sum of pixel weights must be equal to 1.0.  So, the\n    filter function must produce a graph of the proper shape.\n\nfilterrad : float > 0, default: 4.0\n    The filter radius for filters that have a radius parameter, i.e.\n    when interpolation is one of: 'sinc', 'lanczos' or 'blackman'.\n\nresample : bool, default: :rc:`image.resample`\n    When *True*, use a full resampling method.  When *False*, only\n    resample when the output image is larger than the input image.\n\nurl : str, optional\n    Set the url of the created `.AxesImage`. See `.Artist.set_url`.\n\nReturns\n-------\n`~matplotlib.image.AxesImage`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs : `~matplotlib.artist.Artist` properties\n    These parameters are passed on to the constructor of the\n    `.AxesImage` artist.\n\nSee Also\n--------\nmatshow : Plot a matrix or an array as an image.\n\nNotes\n-----\nUnless *extent* is used, pixel centers will be located at integer\ncoordinates. In other words: the origin will coincide with the center\nof pixel (0, 0).\n\nThere are two common representations for RGB images with an alpha\nchannel:\n\n-   Straight (unassociated) alpha: R, G, and B channels represent the\n    color of the pixel, disregarding its opacity.\n-   Premultiplied (associated) alpha: R, G, and B channels represent\n    the color of the pixel, adjusted for its opacity by multiplication.\n\n`~matplotlib.pyplot.imshow` expects RGB images adopting the straight\n(unassociated) alpha representation."
    },
    {
      "name": "pcolor",
      "docstring": "Create a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature::\n\n    pcolor([X, Y,] C, /, **kwargs)\n\n*X* and *Y* can be used to specify the corners of the quadrilaterals.\n\nThe arguments *X*, *Y*, *C* are positional-only.\n\n.. hint::\n\n    ``pcolor()`` can be very slow for large arrays. In most\n    cases you should use the similar but much faster\n    `~.Axes.pcolormesh` instead. See\n    :ref:`Differences between pcolor() and pcolormesh()\n    <differences-pcolor-pcolormesh>` for a discussion of the\n    differences.\n\nParameters\n----------\nC : 2D array-like\n    The color-mapped values.  Color-mapping is controlled by *cmap*,\n    *norm*, *vmin*, and *vmax*.\n\nX, Y : array-like, optional\n    The coordinates of the corners of quadrilaterals of a pcolormesh::\n\n        (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                              \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n                              \u2502     \u2502\n                              \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n            (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n\n    Note that the column index corresponds to the x-coordinate, and\n    the row index corresponds to y. For details, see the\n    :ref:`Notes <axes-pcolormesh-grid-orientation>` section below.\n\n    If ``shading='flat'`` the dimensions of *X* and *Y* should be one\n    greater than those of *C*, and the quadrilateral is colored due\n    to the value at ``C[i, j]``.  If *X*, *Y* and *C* have equal\n    dimensions, a warning will be raised and the last row and column\n    of *C* will be ignored.\n\n    If ``shading='nearest'``, the dimensions of *X* and *Y* should be\n    the same as those of *C* (if not, a ValueError will be raised). The\n    color ``C[i, j]`` will be centered on ``(X[i, j], Y[i, j])``.\n\n    If *X* and/or *Y* are 1-D arrays or column vectors they will be\n    expanded as needed into the appropriate 2D arrays, making a\n    rectangular grid.\n\nshading : {'flat', 'nearest', 'auto'}, default: :rc:`pcolor.shading`\n    The fill style for the quadrilateral. Possible values:\n\n    - 'flat': A solid color is used for each quad. The color of the\n      quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\n      ``C[i, j]``. The dimensions of *X* and *Y* should be\n      one greater than those of *C*; if they are the same as *C*,\n      then a deprecation warning is raised, and the last row\n      and column of *C* are dropped.\n    - 'nearest': Each grid point will have a color centered on it,\n      extending halfway between the adjacent grid centers.  The\n      dimensions of *X* and *Y* must be the same as *C*.\n    - 'auto': Choose 'flat' if dimensions of *X* and *Y* are one\n      larger than *C*.  Choose 'nearest' if dimensions are the same.\n\n    See :doc:`/gallery/images_contours_and_fields/pcolormesh_grids`\n    for more description.\n\n%(cmap_doc)s\n\n%(norm_doc)s\n\n%(vmin_vmax_doc)s\n\n%(colorizer_doc)s\n\nedgecolors : {'none', None, 'face', color, color sequence}, optional\n    The color of the edges. Defaults to 'none'. Possible values:\n\n    - 'none' or '': No edge.\n    - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n      :rc:`patch.force_edgecolor` has to be True for this to work.\n    - 'face': Use the adjacent face color.\n    - A color or sequence of colors will set the edge color.\n\n    The singular form *edgecolor* works as an alias.\n\nalpha : float, default: None\n    The alpha blending value of the face color, between 0 (transparent)\n    and 1 (opaque). Note: The edgecolor is currently not affected by\n    this.\n\nsnap : bool, default: False\n    Whether to snap the mesh to pixel boundaries.\n\nReturns\n-------\n`matplotlib.collections.PolyQuadMesh`\n\nOther Parameters\n----------------\nantialiaseds : bool, default: False\n    The default *antialiaseds* is False if the default\n    *edgecolors*\\ =\"none\" is used.  This eliminates artificial lines\n    at patch boundaries, and works regardless of the value of alpha.\n    If *edgecolors* is not \"none\", then the default *antialiaseds*\n    is taken from :rc:`patch.antialiased`.\n    Stroking the edges may be preferred if *alpha* is 1, but will\n    cause artifacts otherwise.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additionally, the following arguments are allowed. They are passed\n    along to the `~matplotlib.collections.PolyQuadMesh` constructor:\n\n%(PolyCollection:kwdoc)s\n\nSee Also\n--------\npcolormesh : for an explanation of the differences between\n    pcolor and pcolormesh.\nimshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n    faster alternative.\n\nNotes\n-----\n**Masked arrays**\n\n*X*, *Y* and *C* may be masked arrays. If either ``C[i, j]``, or one\nof the vertices surrounding ``C[i, j]`` (*X* or *Y* at\n``[i, j], [i+1, j], [i, j+1], [i+1, j+1]``) is masked, nothing is\nplotted.\n\n.. _axes-pcolor-grid-orientation:\n\n**Grid orientation**\n\nThe grid orientation follows the standard matrix convention: An array\n*C* with shape (nrows, ncolumns) is plotted with the column number as\n*X* and the row number as *Y*."
    },
    {
      "name": "pcolormesh",
      "docstring": "Create a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature::\n\n    pcolormesh([X, Y,] C, /, **kwargs)\n\n*X* and *Y* can be used to specify the corners of the quadrilaterals.\n\nThe arguments *X*, *Y*, *C* are positional-only.\n\n.. hint::\n\n   `~.Axes.pcolormesh` is similar to `~.Axes.pcolor`. It is much faster\n   and preferred in most cases. For a detailed discussion on the\n   differences see :ref:`Differences between pcolor() and pcolormesh()\n   <differences-pcolor-pcolormesh>`.\n\nParameters\n----------\nC : array-like\n    The mesh data. Supported array shapes are:\n\n    - (M, N) or M*N: a mesh with scalar data. The values are mapped to\n      colors using normalization and a colormap. See parameters *norm*,\n      *cmap*, *vmin*, *vmax*.\n    - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n    - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n      i.e. including transparency.\n\n    The first two dimensions (M, N) define the rows and columns of\n    the mesh data.\n\nX, Y : array-like, optional\n    The coordinates of the corners of quadrilaterals of a pcolormesh::\n\n        (X[i+1, j], Y[i+1, j])       (X[i+1, j+1], Y[i+1, j+1])\n                              \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n                              \u2502     \u2502\n                              \u25cf\u2576\u2500\u2500\u2500\u2574\u25cf\n            (X[i, j], Y[i, j])       (X[i, j+1], Y[i, j+1])\n\n    Note that the column index corresponds to the x-coordinate, and\n    the row index corresponds to y. For details, see the\n    :ref:`Notes <axes-pcolormesh-grid-orientation>` section below.\n\n    If ``shading='flat'`` the dimensions of *X* and *Y* should be one\n    greater than those of *C*, and the quadrilateral is colored due\n    to the value at ``C[i, j]``.  If *X*, *Y* and *C* have equal\n    dimensions, a warning will be raised and the last row and column\n    of *C* will be ignored.\n\n    If ``shading='nearest'`` or ``'gouraud'``, the dimensions of *X*\n    and *Y* should be the same as those of *C* (if not, a ValueError\n    will be raised).  For ``'nearest'`` the color ``C[i, j]`` is\n    centered on ``(X[i, j], Y[i, j])``.  For ``'gouraud'``, a smooth\n    interpolation is carried out between the quadrilateral corners.\n\n    If *X* and/or *Y* are 1-D arrays or column vectors they will be\n    expanded as needed into the appropriate 2D arrays, making a\n    rectangular grid.\n\n%(cmap_doc)s\n\n%(norm_doc)s\n\n%(vmin_vmax_doc)s\n\n%(colorizer_doc)s\n\nedgecolors : {'none', None, 'face', color, color sequence}, optional\n    The color of the edges. Defaults to 'none'. Possible values:\n\n    - 'none' or '': No edge.\n    - *None*: :rc:`patch.edgecolor` will be used. Note that currently\n      :rc:`patch.force_edgecolor` has to be True for this to work.\n    - 'face': Use the adjacent face color.\n    - A color or sequence of colors will set the edge color.\n\n    The singular form *edgecolor* works as an alias.\n\nalpha : float, default: None\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nshading : {'flat', 'nearest', 'gouraud', 'auto'}, optional\n    The fill style for the quadrilateral; defaults to\n    :rc:`pcolor.shading`. Possible values:\n\n    - 'flat': A solid color is used for each quad. The color of the\n      quad (i, j), (i+1, j), (i, j+1), (i+1, j+1) is given by\n      ``C[i, j]``. The dimensions of *X* and *Y* should be\n      one greater than those of *C*; if they are the same as *C*,\n      then a deprecation warning is raised, and the last row\n      and column of *C* are dropped.\n    - 'nearest': Each grid point will have a color centered on it,\n      extending halfway between the adjacent grid centers.  The\n      dimensions of *X* and *Y* must be the same as *C*.\n    - 'gouraud': Each quad will be Gouraud shaded: The color of the\n      corners (i', j') are given by ``C[i', j']``. The color values of\n      the area in between is interpolated from the corner values.\n      The dimensions of *X* and *Y* must be the same as *C*. When\n      Gouraud shading is used, *edgecolors* is ignored.\n    - 'auto': Choose 'flat' if dimensions of *X* and *Y* are one\n      larger than *C*.  Choose 'nearest' if dimensions are the same.\n\n    See :doc:`/gallery/images_contours_and_fields/pcolormesh_grids`\n    for more description.\n\nsnap : bool, default: False\n    Whether to snap the mesh to pixel boundaries.\n\nrasterized : bool, optional\n    Rasterize the pcolormesh when drawing vector graphics.  This can\n    speed up rendering and produce smaller files for large data sets.\n    See also :doc:`/gallery/misc/rasterization_demo`.\n\nReturns\n-------\n`matplotlib.collections.QuadMesh`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additionally, the following arguments are allowed. They are passed\n    along to the `~matplotlib.collections.QuadMesh` constructor:\n\n%(QuadMesh:kwdoc)s\n\nSee Also\n--------\npcolor : An alternative implementation with slightly different\n    features. For a detailed discussion on the differences see\n    :ref:`Differences between pcolor() and pcolormesh()\n    <differences-pcolor-pcolormesh>`.\nimshow : If *X* and *Y* are each equidistant, `~.Axes.imshow` can be a\n    faster alternative.\n\nNotes\n-----\n**Masked arrays**\n\n*C* may be a masked array. If ``C[i, j]`` is masked, the corresponding\nquadrilateral will be transparent. Masking of *X* and *Y* is not\nsupported. Use `~.Axes.pcolor` if you need this functionality.\n\n.. _axes-pcolormesh-grid-orientation:\n\n**Grid orientation**\n\nThe grid orientation follows the standard matrix convention: An array\n*C* with shape (nrows, ncolumns) is plotted with the column number as\n*X* and the row number as *Y*.\n\n.. _differences-pcolor-pcolormesh:\n\n**Differences between pcolor() and pcolormesh()**\n\nBoth methods are used to create a pseudocolor plot of a 2D array\nusing quadrilaterals.\n\nThe main difference lies in the created object and internal data\nhandling:\nWhile `~.Axes.pcolor` returns a `.PolyQuadMesh`, `~.Axes.pcolormesh`\nreturns a `.QuadMesh`. The latter is more specialized for the given\npurpose and thus is faster. It should almost always be preferred.\n\nThere is also a slight difference in the handling of masked arrays.\nBoth `~.Axes.pcolor` and `~.Axes.pcolormesh` support masked arrays\nfor *C*. However, only `~.Axes.pcolor` supports masked arrays for *X*\nand *Y*. The reason lies in the internal handling of the masked values.\n`~.Axes.pcolor` leaves out the respective polygons from the\nPolyQuadMesh. `~.Axes.pcolormesh` sets the facecolor of the masked\nelements to transparent. You can see the difference when using\nedgecolors. While all edges are drawn irrespective of masking in a\nQuadMesh, the edge between two adjacent masked quadrilaterals in\n`~.Axes.pcolor` is not drawn as the corresponding polygons do not\nexist in the PolyQuadMesh. Because PolyQuadMesh draws each individual\npolygon, it also supports applying hatches and linestyles to the collection.\n\nAnother difference is the support of Gouraud shading in\n`~.Axes.pcolormesh`, which is not available with `~.Axes.pcolor`."
    },
    {
      "name": "pcolorfast",
      "docstring": "Create a pseudocolor plot with a non-regular rectangular grid.\n\nCall signature::\n\n    ax.pcolorfast([X, Y], C, /, **kwargs)\n\nThe arguments *X*, *Y*, *C* are positional-only.\n\nThis method is similar to `~.Axes.pcolor` and `~.Axes.pcolormesh`.\nIt's designed to provide the fastest pcolor-type plotting with the\nAgg backend. To achieve this, it uses different algorithms internally\ndepending on the complexity of the input grid (regular rectangular,\nnon-regular rectangular or arbitrary quadrilateral).\n\n.. warning::\n\n    This method is experimental. Compared to `~.Axes.pcolor` or\n    `~.Axes.pcolormesh` it has some limitations:\n\n    - It supports only flat shading (no outlines)\n    - It lacks support for log scaling of the axes.\n    - It does not have a pyplot wrapper.\n\nParameters\n----------\nC : array-like\n    The image data. Supported array shapes are:\n\n    - (M, N): an image with scalar data.  Color-mapping is controlled\n      by *cmap*, *norm*, *vmin*, and *vmax*.\n    - (M, N, 3): an image with RGB values (0-1 float or 0-255 int).\n    - (M, N, 4): an image with RGBA values (0-1 float or 0-255 int),\n      i.e. including transparency.\n\n    The first two dimensions (M, N) define the rows and columns of\n    the image.\n\n    This parameter can only be passed positionally.\n\nX, Y : tuple or array-like, default: ``(0, N)``, ``(0, M)``\n    *X* and *Y* are used to specify the coordinates of the\n    quadrilaterals. There are different ways to do this:\n\n    - Use tuples ``X=(xmin, xmax)`` and ``Y=(ymin, ymax)`` to define\n      a *uniform rectangular grid*.\n\n      The tuples define the outer edges of the grid. All individual\n      quadrilaterals will be of the same size. This is the fastest\n      version.\n\n    - Use 1D arrays *X*, *Y* to specify a *non-uniform rectangular\n      grid*.\n\n      In this case *X* and *Y* have to be monotonic 1D arrays of length\n      *N+1* and *M+1*, specifying the x and y boundaries of the cells.\n\n      The speed is intermediate. Note: The grid is checked, and if\n      found to be uniform the fast version is used.\n\n    - Use 2D arrays *X*, *Y* if you need an *arbitrary quadrilateral\n      grid* (i.e. if the quadrilaterals are not rectangular).\n\n      In this case *X* and *Y* are 2D arrays with shape (M + 1, N + 1),\n      specifying the x and y coordinates of the corners of the colored\n      quadrilaterals.\n\n      This is the most general, but the slowest to render.  It may\n      produce faster and more compact output using ps, pdf, and\n      svg backends, however.\n\n    These arguments can only be passed positionally.\n\n%(cmap_doc)s\n\n    This parameter is ignored if *C* is RGB(A).\n\n%(norm_doc)s\n\n    This parameter is ignored if *C* is RGB(A).\n\n%(vmin_vmax_doc)s\n\n    This parameter is ignored if *C* is RGB(A).\n\n%(colorizer_doc)s\n\n    This parameter is ignored if *C* is RGB(A).\n\nalpha : float, default: None\n    The alpha blending value, between 0 (transparent) and 1 (opaque).\n\nsnap : bool, default: False\n    Whether to snap the mesh to pixel boundaries.\n\nReturns\n-------\n`.AxesImage` or `.PcolorImage` or `.QuadMesh`\n    The return type depends on the type of grid:\n\n    - `.AxesImage` for a regular rectangular grid.\n    - `.PcolorImage` for a non-regular rectangular grid.\n    - `.QuadMesh` for a non-rectangular grid.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Supported additional parameters depend on the type of grid.\n    See return types of *image* for further description."
    },
    {
      "name": "contour",
      "docstring": "Plot contour lines.\n\nCall signature::\n\n    contour([X, Y,] Z, /, [levels], **kwargs)\n\nThe arguments *X*, *Y*, *Z* are positional-only.\n%(contour_doc)s"
    },
    {
      "name": "contourf",
      "docstring": "Plot filled contours.\n\nCall signature::\n\n    contourf([X, Y,] Z, /, [levels], **kwargs)\n\nThe arguments *X*, *Y*, *Z* are positional-only.\n%(contour_doc)s"
    },
    {
      "name": "clabel",
      "docstring": "Label a contour plot.\n\nAdds labels to line contours in given `.ContourSet`.\n\nParameters\n----------\nCS : `.ContourSet` instance\n    Line contours to label.\n\nlevels : array-like, optional\n    A list of level values, that should be labeled. The list must be\n    a subset of ``CS.levels``. If not given, all levels are labeled.\n\n**kwargs\n    All other parameters are documented in `~.ContourLabeler.clabel`."
    },
    {
      "name": "hist",
      "docstring": "Compute and plot a histogram.\n\nThis method uses `numpy.histogram` to bin the data in *x* and count the\nnumber of values in each bin, then draws the distribution either as a\n`.BarContainer` or `.Polygon`. The *bins*, *range*, *density*, and\n*weights* parameters are forwarded to `numpy.histogram`.\n\nIf the data has already been binned and counted, use `~.bar` or\n`~.stairs` to plot the distribution::\n\n    counts, bins = np.histogram(x)\n    plt.stairs(counts, bins)\n\nAlternatively, plot pre-computed bins and counts using ``hist()`` by\ntreating each bin as a single point with a weight equal to its count::\n\n    plt.hist(bins[:-1], bins, weights=counts)\n\nThe data input *x* can be a singular array, a list of datasets of\npotentially different lengths ([*x0*, *x1*, ...]), or a 2D ndarray in\nwhich each column is a dataset. Note that the ndarray form is\ntransposed relative to the list form. If the input is an array, then\nthe return value is a tuple (*n*, *bins*, *patches*); if the input is a\nsequence of arrays, then the return value is a tuple\n([*n0*, *n1*, ...], *bins*, [*patches0*, *patches1*, ...]).\n\nMasked arrays are not supported.\n\nParameters\n----------\nx : (n,) array or sequence of (n,) arrays\n    Input values, this takes either a single array or a sequence of\n    arrays which are not required to be of the same length.\n\nbins : int or sequence or str, default: :rc:`hist.bins`\n    If *bins* is an integer, it defines the number of equal-width bins\n    in the range.\n\n    If *bins* is a sequence, it defines the bin edges, including the\n    left edge of the first bin and the right edge of the last bin;\n    in this case, bins may be unequally spaced.  All but the last\n    (righthand-most) bin is half-open.  In other words, if *bins* is::\n\n        [1, 2, 3, 4]\n\n    then the first bin is ``[1, 2)`` (including 1, but excluding 2) and\n    the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which\n    *includes* 4.\n\n    If *bins* is a string, it is one of the binning strategies\n    supported by `numpy.histogram_bin_edges`: 'auto', 'fd', 'doane',\n    'scott', 'stone', 'rice', 'sturges', or 'sqrt'.\n\nrange : tuple or None, default: None\n    The lower and upper range of the bins. Lower and upper outliers\n    are ignored. If not provided, *range* is ``(x.min(), x.max())``.\n    Range has no effect if *bins* is a sequence.\n\n    If *bins* is a sequence or *range* is specified, autoscaling\n    is based on the specified bin range instead of the\n    range of x.\n\ndensity : bool, default: False\n    If ``True``, draw and return a probability density: each bin\n    will display the bin's raw count divided by the total number of\n    counts *and the bin width*\n    (``density = counts / (sum(counts) * np.diff(bins))``),\n    so that the area under the histogram integrates to 1\n    (``np.sum(density * np.diff(bins)) == 1``).\n\n    If *stacked* is also ``True``, the sum of the histograms is\n    normalized to 1.\n\nweights : (n,) array-like or None, default: None\n    An array of weights, of the same shape as *x*.  Each value in\n    *x* only contributes its associated weight towards the bin count\n    (instead of 1).  If *density* is ``True``, the weights are\n    normalized, so that the integral of the density over the range\n    remains 1.\n\ncumulative : bool or -1, default: False\n    If ``True``, then a histogram is computed where each bin gives the\n    counts in that bin plus all bins for smaller values. The last bin\n    gives the total number of datapoints.\n\n    If *density* is also ``True`` then the histogram is normalized such\n    that the last bin equals 1.\n\n    If *cumulative* is a number less than 0 (e.g., -1), the direction\n    of accumulation is reversed.  In this case, if *density* is also\n    ``True``, then the histogram is normalized such that the first bin\n    equals 1.\n\nbottom : array-like or float, default: 0\n    Location of the bottom of each bin, i.e. bins are drawn from\n    ``bottom`` to ``bottom + hist(x, bins)`` If a scalar, the bottom\n    of each bin is shifted by the same amount. If an array, each bin\n    is shifted independently and the length of bottom must match the\n    number of bins. If None, defaults to 0.\n\nhisttype : {'bar', 'barstacked', 'step', 'stepfilled'}, default: 'bar'\n    The type of histogram to draw.\n\n    - 'bar' is a traditional bar-type histogram.  If multiple data\n      are given the bars are arranged side by side.\n    - 'barstacked' is a bar-type histogram where multiple\n      data are stacked on top of each other.\n    - 'step' generates a lineplot that is by default unfilled.\n    - 'stepfilled' generates a lineplot that is by default filled.\n\nalign : {'left', 'mid', 'right'}, default: 'mid'\n    The horizontal alignment of the histogram bars.\n\n    - 'left': bars are centered on the left bin edges.\n    - 'mid': bars are centered between the bin edges.\n    - 'right': bars are centered on the right bin edges.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', `~.Axes.barh` will be used for bar-type histograms\n    and the *bottom* kwarg will be the left edges.\n\nrwidth : float or None, default: None\n    The relative width of the bars as a fraction of the bin width.  If\n    ``None``, automatically compute the width.\n\n    Ignored if *histtype* is 'step' or 'stepfilled'.\n\nlog : bool, default: False\n    If ``True``, the histogram axis will be set to a log scale.\n\ncolor : :mpltype:`color` or list of :mpltype:`color` or None, default: None\n    Color or sequence of colors, one per dataset.  Default (``None``)\n    uses the standard line color sequence.\n\nlabel : str or list of str, optional\n    String, or sequence of strings to match multiple datasets.  Bar\n    charts yield multiple patches per dataset, but only the first gets\n    the label, so that `~.Axes.legend` will work as expected.\n\nstacked : bool, default: False\n    If ``True``, multiple data are stacked on top of each other If\n    ``False`` multiple data are arranged side by side if histtype is\n    'bar' or on top of each other if histtype is 'step'\n\nReturns\n-------\nn : array or list of arrays\n    The values of the histogram bins. See *density* and *weights* for a\n    description of the possible semantics.  If input *x* is an array,\n    then this is an array of length *nbins*. If input is a sequence of\n    arrays ``[data1, data2, ...]``, then this is a list of arrays with\n    the values of the histograms for each of the arrays in the same\n    order.  The dtype of the array *n* (or of its element arrays) will\n    always be float even if no weighting or normalization is used.\n\nbins : array\n    The edges of the bins. Length nbins + 1 (nbins left edges and right\n    edge of last bin).  Always a single array even when multiple data\n    sets are passed in.\n\npatches : `.BarContainer` or list of a single `.Polygon` or list of such objects\n    Container of individual artists used to create the histogram\n    or list of such containers if there are multiple input datasets.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    `~matplotlib.patches.Patch` properties. The following properties\n    additionally accept a sequence of values corresponding to the\n    datasets in *x*:\n    *edgecolor*, *facecolor*, *linewidth*, *linestyle*, *hatch*.\n\n    .. versionadded:: 3.10\n       Allowing sequences of values in above listed Patch properties.\n\nSee Also\n--------\nhist2d : 2D histogram with rectangular bins\nhexbin : 2D histogram with hexagonal bins\nstairs : Plot a pre-computed histogram\nbar : Plot a pre-computed histogram\n\nNotes\n-----\nFor large numbers of bins (>1000), plotting can be significantly\naccelerated by using `~.Axes.stairs` to plot a pre-computed histogram\n(``plt.stairs(*np.histogram(data))``), or by setting *histtype* to\n'step' or 'stepfilled' rather than 'bar' or 'barstacked'."
    },
    {
      "name": "stairs",
      "docstring": "Draw a stepwise constant function as a line or a filled plot.\n\n*edges* define the x-axis positions of the steps. *values* the function values\nbetween these steps. Depending on *fill*, the function is drawn either as a\ncontinuous line with vertical segments at the edges, or as a filled area.\n\nParameters\n----------\nvalues : array-like\n    The step heights.\n\nedges : array-like\n    The step positions, with ``len(edges) == len(vals) + 1``,\n    between which the curve takes on vals values.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    The direction of the steps. Vertical means that *values* are along\n    the y-axis, and edges are along the x-axis.\n\nbaseline : float, array-like or None, default: 0\n    The bottom value of the bounding edges or when\n    ``fill=True``, position of lower edge. If *fill* is\n    True or an array is passed to *baseline*, a closed\n    path is drawn.\n\n    If None, then drawn as an unclosed Path.\n\nfill : bool, default: False\n    Whether the area under the step curve should be filled.\n\n    Passing both ``fill=True` and ``baseline=None`` will likely result in\n    undesired filling: the first and last points will be connected\n    with a straight line and the fill will be between this line and the stairs.\n\n\nReturns\n-------\nStepPatch : `~matplotlib.patches.StepPatch`\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    `~matplotlib.patches.StepPatch` properties"
    },
    {
      "name": "hist2d",
      "docstring": "Make a 2D histogram plot.\n\nParameters\n----------\nx, y : array-like, shape (n, )\n    Input values\n\nbins : None or int or [int, int] or array-like or [array, array]\n\n    The bin specification:\n\n    - If int, the number of bins for the two dimensions\n      (``nx = ny = bins``).\n    - If ``[int, int]``, the number of bins in each dimension\n      (``nx, ny = bins``).\n    - If array-like, the bin edges for the two dimensions\n      (``x_edges = y_edges = bins``).\n    - If ``[array, array]``, the bin edges in each dimension\n      (``x_edges, y_edges = bins``).\n\n    The default value is 10.\n\nrange : array-like shape(2, 2), optional\n    The leftmost and rightmost edges of the bins along each dimension\n    (if not specified explicitly in the bins parameters): ``[[xmin,\n    xmax], [ymin, ymax]]``. All values outside of this range will be\n    considered outliers and not tallied in the histogram.\n\ndensity : bool, default: False\n    Normalize histogram.  See the documentation for the *density*\n    parameter of `~.Axes.hist` for more details.\n\nweights : array-like, shape (n, ), optional\n    An array of values w_i weighing each sample (x_i, y_i).\n\ncmin, cmax : float, default: None\n    All bins that has count less than *cmin* or more than *cmax* will not be\n    displayed (set to NaN before passing to `~.Axes.pcolormesh`) and these count\n    values in the return value count histogram will also be set to nan upon\n    return.\n\nReturns\n-------\nh : 2D array\n    The bi-dimensional histogram of samples x and y. Values in x are\n    histogrammed along the first dimension and values in y are\n    histogrammed along the second dimension.\nxedges : 1D array\n    The bin edges along the x-axis.\nyedges : 1D array\n    The bin edges along the y-axis.\nimage : `~.matplotlib.collections.QuadMesh`\n\nOther Parameters\n----------------\n%(cmap_doc)s\n\n%(norm_doc)s\n\n%(vmin_vmax_doc)s\n\n%(colorizer_doc)s\n\nalpha : ``0 <= scalar <= 1`` or ``None``, optional\n    The alpha blending value.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Additional parameters are passed along to the\n    `~.Axes.pcolormesh` method and `~matplotlib.collections.QuadMesh`\n    constructor.\n\nSee Also\n--------\nhist : 1D histogram plotting\nhexbin : 2D histogram with hexagonal bins\n\nNotes\n-----\n- Currently ``hist2d`` calculates its own axis limits, and any limits\n  previously set are ignored.\n- Rendering the histogram with a logarithmic color scale is\n  accomplished by passing a `.colors.LogNorm` instance to the *norm*\n  keyword argument. Likewise, power-law normalization (similar\n  in effect to gamma correction) can be accomplished with\n  `.colors.PowerNorm`."
    },
    {
      "name": "ecdf",
      "docstring": "Compute and plot the empirical cumulative distribution function of *x*.\n\n.. versionadded:: 3.8\n\nParameters\n----------\nx : 1d array-like\n    The input data.  Infinite entries are kept (and move the relevant\n    end of the ecdf from 0/1), but NaNs and masked values are errors.\n\nweights : 1d array-like or None, default: None\n    The weights of the entries; must have the same shape as *x*.\n    Weights corresponding to NaN data points are dropped, and then the\n    remaining weights are normalized to sum to 1.  If unset, all\n    entries have the same weight.\n\ncomplementary : bool, default: False\n    Whether to plot a cumulative distribution function, which increases\n    from 0 to 1 (the default), or a complementary cumulative\n    distribution function, which decreases from 1 to 0.\n\norientation : {\"vertical\", \"horizontal\"}, default: \"vertical\"\n    Whether the entries are plotted along the x-axis (\"vertical\", the\n    default) or the y-axis (\"horizontal\").  This parameter takes the\n    same values as in `~.Axes.hist`.\n\ncompress : bool, default: False\n    Whether multiple entries with the same values are grouped together\n    (with a summed weight) before plotting.  This is mainly useful if\n    *x* contains many identical data points, to decrease the rendering\n    complexity of the plot. If *x* contains no duplicate points, this\n    has no effect and just uses some time and memory.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nReturns\n-------\n`.Line2D`\n\nNotes\n-----\nThe ecdf plot can be thought of as a cumulative histogram with one bin\nper data entry; i.e. it reports on the entire dataset without any\narbitrary binning.\n\nIf *x* contains NaNs or masked entries, either remove them first from\nthe array (if they should not taken into account), or replace them by\n-inf or +inf (if they should be sorted at the beginning or the end of\nthe array)."
    },
    {
      "name": "psd",
      "docstring": "Plot the power spectral density.\n\nThe power spectral density :math:`P_{xx}` by Welch's average\nperiodogram method.  The vector *x* is divided into *NFFT* length\nsegments.  Each segment is detrended by function *detrend* and\nwindowed by function *window*.  *noverlap* gives the length of\nthe overlap between segments.  The :math:`|\\mathrm{fft}(i)|^2`\nof each segment :math:`i` are averaged to compute :math:`P_{xx}`,\nwith a scaling to correct for power loss due to windowing.\n\nIf len(*x*) < *NFFT*, it will be zero padded to *NFFT*.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data\n\n%(Spectral)s\n\n%(PSD)s\n\nnoverlap : int, default: 0 (no overlap)\n    The number of points of overlap between segments.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nreturn_line : bool, default: False\n    Whether to include the line object plotted in the returned values.\n\nReturns\n-------\nPxx : 1-D array\n    The values for the power spectrum :math:`P_{xx}` before scaling\n    (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *Pxx*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n    Only returned if *return_line* is True.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nspecgram\n    Differs in the default overlap; in not returning the mean of the\n    segment periodograms; in returning the times of the segments; and\n    in plotting a colormap instead of a line.\nmagnitude_spectrum\n    Plots the magnitude spectrum.\ncsd\n    Plots the spectral density between two signals.\n\nNotes\n-----\nFor plotting, the power is plotted as\n:math:`10\\log_{10}(P_{xx})` for decibels, though *Pxx* itself\nis returned.\n\nReferences\n----------\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)"
    },
    {
      "name": "csd",
      "docstring": "Plot the cross-spectral density.\n\nThe cross spectral density :math:`P_{xy}` by Welch's average\nperiodogram method.  The vectors *x* and *y* are divided into\n*NFFT* length segments.  Each segment is detrended by function\n*detrend* and windowed by function *window*.  *noverlap* gives\nthe length of the overlap between segments.  The product of\nthe direct FFTs of *x* and *y* are averaged over each segment\nto compute :math:`P_{xy}`, with a scaling to correct for power\nloss due to windowing.\n\nIf len(*x*) < *NFFT* or len(*y*) < *NFFT*, they will be zero\npadded to *NFFT*.\n\nParameters\n----------\nx, y : 1-D arrays or sequences\n    Arrays or sequences containing the data.\n\n%(Spectral)s\n\n%(PSD)s\n\nnoverlap : int, default: 0 (no overlap)\n    The number of points of overlap between segments.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nreturn_line : bool, default: False\n    Whether to include the line object plotted in the returned values.\n\nReturns\n-------\nPxy : 1-D array\n    The values for the cross spectrum :math:`P_{xy}` before scaling\n    (complex valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *Pxy*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n    Only returned if *return_line* is True.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\npsd : is equivalent to setting ``y = x``.\n\nNotes\n-----\nFor plotting, the power is plotted as\n:math:`10 \\log_{10}(P_{xy})` for decibels, though :math:`P_{xy}` itself\nis returned.\n\nReferences\n----------\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)"
    },
    {
      "name": "magnitude_spectrum",
      "docstring": "Plot the magnitude spectrum.\n\nCompute the magnitude spectrum of *x*.  Data is padded to a\nlength of *pad_to* and the windowing function *window* is applied to\nthe signal.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data.\n\n%(Spectral)s\n\n%(Single_Spectrum)s\n\nscale : {'default', 'linear', 'dB'}\n    The scaling of the values in the *spec*.  'linear' is no scaling.\n    'dB' returns the values in dB scale, i.e., the dB amplitude\n    (20 * log10). 'default' is 'linear'.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nspectrum : 1-D array\n    The values for the magnitude spectrum before scaling (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *spectrum*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\npsd\n    Plots the power spectral density.\nangle_spectrum\n    Plots the angles of the corresponding frequencies.\nphase_spectrum\n    Plots the phase (unwrapped angle) of the corresponding frequencies.\nspecgram\n    Can plot the magnitude spectrum of segments within the signal in a\n    colormap."
    },
    {
      "name": "angle_spectrum",
      "docstring": "Plot the angle spectrum.\n\nCompute the angle spectrum (wrapped phase spectrum) of *x*.\nData is padded to a length of *pad_to* and the windowing function\n*window* is applied to the signal.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data.\n\n%(Spectral)s\n\n%(Single_Spectrum)s\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nspectrum : 1-D array\n    The values for the angle spectrum in radians (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *spectrum*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nmagnitude_spectrum\n    Plots the magnitudes of the corresponding frequencies.\nphase_spectrum\n    Plots the unwrapped version of this function.\nspecgram\n    Can plot the angle spectrum of segments within the signal in a\n    colormap."
    },
    {
      "name": "phase_spectrum",
      "docstring": "Plot the phase spectrum.\n\nCompute the phase spectrum (unwrapped angle spectrum) of *x*.\nData is padded to a length of *pad_to* and the windowing function\n*window* is applied to the signal.\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data\n\n%(Spectral)s\n\n%(Single_Spectrum)s\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nspectrum : 1-D array\n    The values for the phase spectrum in radians (real valued).\n\nfreqs : 1-D array\n    The frequencies corresponding to the elements in *spectrum*.\n\nline : `~matplotlib.lines.Line2D`\n    The line created by this function.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nSee Also\n--------\nmagnitude_spectrum\n    Plots the magnitudes of the corresponding frequencies.\nangle_spectrum\n    Plots the wrapped version of this function.\nspecgram\n    Can plot the phase spectrum of segments within the signal in a\n    colormap."
    },
    {
      "name": "cohere",
      "docstring": "Plot the coherence between *x* and *y*.\n\nCoherence is the normalized cross spectral density:\n\n.. math::\n\n  C_{xy} = \\frac{|P_{xy}|^2}{P_{xx}P_{yy}}\n\nParameters\n----------\n%(Spectral)s\n\n%(PSD)s\n\nnoverlap : int, default: 0 (no overlap)\n    The number of points of overlap between blocks.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\nReturns\n-------\nCxy : 1-D array\n    The coherence vector.\n\nfreqs : 1-D array\n    The frequencies for the elements in *Cxy*.\n\nOther Parameters\n----------------\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\n**kwargs\n    Keyword arguments control the `.Line2D` properties:\n\n    %(Line2D:kwdoc)s\n\nReferences\n----------\nBendat & Piersol -- Random Data: Analysis and Measurement Procedures,\nJohn Wiley & Sons (1986)"
    },
    {
      "name": "specgram",
      "docstring": "Plot a spectrogram.\n\nCompute and plot a spectrogram of data in *x*.  Data are split into\n*NFFT* length segments and the spectrum of each section is\ncomputed.  The windowing function *window* is applied to each\nsegment, and the amount of overlap of each segment is\nspecified with *noverlap*. The spectrogram is plotted as a colormap\n(using imshow).\n\nParameters\n----------\nx : 1-D array or sequence\n    Array or sequence containing the data.\n\n%(Spectral)s\n\n%(PSD)s\n\nmode : {'default', 'psd', 'magnitude', 'angle', 'phase'}\n    What sort of spectrum to use.  Default is 'psd', which takes the\n    power spectral density.  'magnitude' returns the magnitude\n    spectrum.  'angle' returns the phase spectrum without unwrapping.\n    'phase' returns the phase spectrum with unwrapping.\n\nnoverlap : int, default: 128\n    The number of points of overlap between blocks.\n\nscale : {'default', 'linear', 'dB'}\n    The scaling of the values in the *spec*.  'linear' is no scaling.\n    'dB' returns the values in dB scale.  When *mode* is 'psd',\n    this is dB power (10 * log10).  Otherwise, this is dB amplitude\n    (20 * log10). 'default' is 'dB' if *mode* is 'psd' or\n    'magnitude' and 'linear' otherwise.  This must be 'linear'\n    if *mode* is 'angle' or 'phase'.\n\nFc : int, default: 0\n    The center frequency of *x*, which offsets the x extents of the\n    plot to reflect the frequency range used when a signal is acquired\n    and then filtered and downsampled to baseband.\n\ncmap : `.Colormap`, default: :rc:`image.cmap`\n\nxextent : *None* or (xmin, xmax)\n    The image extent along the x-axis. The default sets *xmin* to the\n    left border of the first bin (*spectrum* column) and *xmax* to the\n    right border of the last bin. Note that for *noverlap>0* the width\n    of the bins is smaller than those of the segments.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nvmin, vmax : float, optional\n    vmin and vmax define the data range that the colormap covers.\n    By default, the colormap covers the complete value range of the\n    data.\n\n**kwargs\n    Additional keyword arguments are passed on to `~.axes.Axes.imshow`\n    which makes the specgram image. The origin keyword argument\n    is not supported.\n\nReturns\n-------\nspectrum : 2D array\n    Columns are the periodograms of successive segments.\n\nfreqs : 1-D array\n    The frequencies corresponding to the rows in *spectrum*.\n\nt : 1-D array\n    The times corresponding to midpoints of segments (i.e., the columns\n    in *spectrum*).\n\nim : `.AxesImage`\n    The image created by imshow containing the spectrogram.\n\nSee Also\n--------\npsd\n    Differs in the default overlap; in returning the mean of the\n    segment periodograms; in not returning times; and in generating a\n    line plot instead of colormap.\nmagnitude_spectrum\n    A single spectrum, similar to having a single segment when *mode*\n    is 'magnitude'. Plots a line instead of a colormap.\nangle_spectrum\n    A single spectrum, similar to having a single segment when *mode*\n    is 'angle'. Plots a line instead of a colormap.\nphase_spectrum\n    A single spectrum, similar to having a single segment when *mode*\n    is 'phase'. Plots a line instead of a colormap.\n\nNotes\n-----\nThe parameters *detrend* and *scale_by_freq* do only apply when *mode*\nis set to 'psd'."
    },
    {
      "name": "spy",
      "docstring": "Plot the sparsity pattern of a 2D array.\n\nThis visualizes the non-zero values of the array.\n\nTwo plotting styles are available: image and marker. Both\nare available for full arrays, but only the marker style\nworks for `scipy.sparse.spmatrix` instances.\n\n**Image style**\n\nIf *marker* and *markersize* are *None*, `~.Axes.imshow` is used. Any\nextra remaining keyword arguments are passed to this method.\n\n**Marker style**\n\nIf *Z* is a `scipy.sparse.spmatrix` or *marker* or *markersize* are\n*None*, a `.Line2D` object will be returned with the value of marker\ndetermining the marker type, and any remaining keyword arguments\npassed to `~.Axes.plot`.\n\nParameters\n----------\nZ : (M, N) array-like\n    The array to be plotted.\n\nprecision : float or 'present', default: 0\n    If *precision* is 0, any non-zero value will be plotted. Otherwise,\n    values of :math:`|Z| > precision` will be plotted.\n\n    For `scipy.sparse.spmatrix` instances, you can also\n    pass 'present'. In this case any value present in the array\n    will be plotted, even if it is identically zero.\n\naspect : {'equal', 'auto', None} or float, default: 'equal'\n    The aspect ratio of the Axes.  This parameter is particularly\n    relevant for images since it determines whether data pixels are\n    square.\n\n    This parameter is a shortcut for explicitly calling\n    `.Axes.set_aspect`. See there for further details.\n\n    - 'equal': Ensures an aspect ratio of 1. Pixels will be square.\n    - 'auto': The Axes is kept fixed and the aspect is adjusted so\n      that the data fit in the Axes. In general, this will result in\n      non-square pixels.\n    - *None*: Use :rc:`image.aspect`.\n\norigin : {'upper', 'lower'}, default: :rc:`image.origin`\n    Place the [0, 0] index of the array in the upper left or lower left\n    corner of the Axes. The convention 'upper' is typically used for\n    matrices and images.\n\nReturns\n-------\n`~matplotlib.image.AxesImage` or `.Line2D`\n    The return type depends on the plotting style (see above).\n\nOther Parameters\n----------------\n**kwargs\n    The supported additional parameters depend on the plotting style.\n\n    For the image style, you can pass the following additional\n    parameters of `~.Axes.imshow`:\n\n    - *cmap*\n    - *alpha*\n    - *url*\n    - any `.Artist` properties (passed on to the `.AxesImage`)\n\n    For the marker style, you can pass any `.Line2D` property except\n    for *linestyle*:\n\n    %(Line2D:kwdoc)s"
    },
    {
      "name": "matshow",
      "docstring": "Plot the values of a 2D matrix or array as color-coded image.\n\nThe matrix will be shown the way it would be printed, with the first\nrow at the top.  Row and column numbering is zero-based.\n\nParameters\n----------\nZ : (M, N) array-like\n    The matrix to be displayed.\n\nReturns\n-------\n`~matplotlib.image.AxesImage`\n\nOther Parameters\n----------------\n**kwargs : `~matplotlib.axes.Axes.imshow` arguments\n\nSee Also\n--------\nimshow : More general function to plot data on a 2D regular raster.\n\nNotes\n-----\nThis is just a convenience function wrapping `.imshow` to set useful\ndefaults for displaying a matrix. In particular:\n\n- Set ``origin='upper'``.\n- Set ``interpolation='nearest'``.\n- Set ``aspect='equal'``.\n- Ticks are placed to the left and above.\n- Ticks are formatted to show integer indices."
    },
    {
      "name": "violinplot",
      "docstring": "Make a violin plot.\n\nMake a violin plot for each column of *dataset* or each vector in\nsequence *dataset*.  Each filled area extends to represent the\nentire data range, with optional lines at the mean, the median,\nthe minimum, the maximum, and user-specified quantiles.\n\nParameters\n----------\ndataset : Array or a sequence of vectors.\n    The input data.\n\npositions : array-like, default: [1, 2, ..., n]\n    The positions of the violins; i.e. coordinates on the x-axis for\n    vertical violins (or y-axis for horizontal violins).\n\nvert : bool, optional\n    .. deprecated:: 3.10\n        Use *orientation* instead.\n\n        If this is given during the deprecation period, it overrides\n        the *orientation* parameter.\n\n    If True, plots the violins vertically.\n    If False, plots the violins horizontally.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', plots the violins horizontally.\n    Otherwise, plots the violins vertically.\n\n    .. versionadded:: 3.10\n\nwidths : float or array-like, default: 0.5\n    The maximum width of each violin in units of the *positions* axis.\n    The default is 0.5, which is half the available space when using default\n    *positions*.\n\nshowmeans : bool, default: False\n    Whether to show the mean with a line.\n\nshowextrema : bool, default: True\n    Whether to show extrema with a line.\n\nshowmedians : bool, default: False\n    Whether to show the median with a line.\n\nquantiles : array-like, default: None\n    If not None, set a list of floats in interval [0, 1] for each violin,\n    which stands for the quantiles that will be rendered for that\n    violin.\n\npoints : int, default: 100\n    The number of points to evaluate each of the gaussian kernel density\n    estimations at.\n\nbw_method : {'scott', 'silverman'} or float or callable, default: 'scott'\n    The method used to calculate the estimator bandwidth.  If a\n    float, this will be used directly as `kde.factor`.  If a\n    callable, it should take a `matplotlib.mlab.GaussianKDE` instance as\n    its only parameter and return a float.\n\nside : {'both', 'low', 'high'}, default: 'both'\n    'both' plots standard violins. 'low'/'high' only\n    plots the side below/above the positions value.\n\ndata : indexable object, optional\n    DATA_PARAMETER_PLACEHOLDER\n\nReturns\n-------\ndict\n    A dictionary mapping each component of the violinplot to a\n    list of the corresponding collection instances created. The\n    dictionary has the following keys:\n\n    - ``bodies``: A list of the `~.collections.PolyCollection`\n      instances containing the filled area of each violin.\n\n    - ``cmeans``: A `~.collections.LineCollection` instance that marks\n      the mean values of each of the violin's distribution.\n\n    - ``cmins``: A `~.collections.LineCollection` instance that marks\n      the bottom of each violin's distribution.\n\n    - ``cmaxes``: A `~.collections.LineCollection` instance that marks\n      the top of each violin's distribution.\n\n    - ``cbars``: A `~.collections.LineCollection` instance that marks\n      the centers of each violin's distribution.\n\n    - ``cmedians``: A `~.collections.LineCollection` instance that\n      marks the median values of each of the violin's distribution.\n\n    - ``cquantiles``: A `~.collections.LineCollection` instance created\n      to identify the quantile values of each of the violin's\n      distribution.\n\nSee Also\n--------\n.Axes.violin : Draw a violin from pre-computed statistics.\nboxplot : Draw a box and whisker plot."
    },
    {
      "name": "violin",
      "docstring": "Draw a violin plot from pre-computed statistics.\n\nDraw a violin plot for each column of *vpstats*. Each filled area\nextends to represent the entire data range, with optional lines at the\nmean, the median, the minimum, the maximum, and the quantiles values.\n\nParameters\n----------\nvpstats : list of dicts\n    A list of dictionaries containing stats for each violin plot.\n    Required keys are:\n\n    - ``coords``: A list of scalars containing the coordinates that\n      the violin's kernel density estimate were evaluated at.\n\n    - ``vals``: A list of scalars containing the values of the\n      kernel density estimate at each of the coordinates given\n      in *coords*.\n\n    - ``mean``: The mean value for this violin's dataset.\n\n    - ``median``: The median value for this violin's dataset.\n\n    - ``min``: The minimum value for this violin's dataset.\n\n    - ``max``: The maximum value for this violin's dataset.\n\n    Optional keys are:\n\n    - ``quantiles``: A list of scalars containing the quantile values\n      for this violin's dataset.\n\npositions : array-like, default: [1, 2, ..., n]\n    The positions of the violins; i.e. coordinates on the x-axis for\n    vertical violins (or y-axis for horizontal violins).\n\nvert : bool, optional\n    .. deprecated:: 3.10\n        Use *orientation* instead.\n\n        If this is given during the deprecation period, it overrides\n        the *orientation* parameter.\n\n    If True, plots the violins vertically.\n    If False, plots the violins horizontally.\n\norientation : {'vertical', 'horizontal'}, default: 'vertical'\n    If 'horizontal', plots the violins horizontally.\n    Otherwise, plots the violins vertically.\n\n    .. versionadded:: 3.10\n\nwidths : float or array-like, default: 0.5\n    The maximum width of each violin in units of the *positions* axis.\n    The default is 0.5, which is half available space when using default\n    *positions*.\n\nshowmeans : bool, default: False\n    Whether to show the mean with a line.\n\nshowextrema : bool, default: True\n    Whether to show extrema with a line.\n\nshowmedians : bool, default: False\n    Whether to show the median with a line.\n\nside : {'both', 'low', 'high'}, default: 'both'\n    'both' plots standard violins. 'low'/'high' only\n    plots the side below/above the positions value.\n\nReturns\n-------\ndict\n    A dictionary mapping each component of the violinplot to a\n    list of the corresponding collection instances created. The\n    dictionary has the following keys:\n\n    - ``bodies``: A list of the `~.collections.PolyCollection`\n      instances containing the filled area of each violin.\n\n    - ``cmeans``: A `~.collections.LineCollection` instance that marks\n      the mean values of each of the violin's distribution.\n\n    - ``cmins``: A `~.collections.LineCollection` instance that marks\n      the bottom of each violin's distribution.\n\n    - ``cmaxes``: A `~.collections.LineCollection` instance that marks\n      the top of each violin's distribution.\n\n    - ``cbars``: A `~.collections.LineCollection` instance that marks\n      the centers of each violin's distribution.\n\n    - ``cmedians``: A `~.collections.LineCollection` instance that\n      marks the median values of each of the violin's distribution.\n\n    - ``cquantiles``: A `~.collections.LineCollection` instance created\n      to identify the quantiles values of each of the violin's\n      distribution.\n\nSee Also\n--------\nviolinplot :\n    Draw a violin plot from data instead of pre-computed statistics."
    },
    {
      "name": "sign",
      "docstring": null
    },
    {
      "name": "apply_mask",
      "docstring": null
    },
    {
      "name": "merge_kw_rc",
      "docstring": null
    },
    {
      "name": "do_plot",
      "docstring": null
    },
    {
      "name": "do_patch",
      "docstring": null
    },
    {
      "name": "invalid_shape_exception",
      "docstring": null
    },
    {
      "name": "on_changed",
      "docstring": null
    },
    {
      "name": "get_next_color",
      "docstring": null
    }
  ],
  "innovations": []
}