{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\mpl_toolkits\\axisartist\\axis_artist.py",
  "classes": [
    {
      "name": "AttributeCopier",
      "docstring": null,
      "methods": [
        {
          "name": "get_ref_artist",
          "docstring": "Return the underlying artist that actually defines some properties\n(e.g., color) of this artist."
        },
        {
          "name": "get_attribute_from_ref_artist",
          "docstring": null
        }
      ]
    },
    {
      "name": "Ticks",
      "docstring": "Ticks are derived from `.Line2D`, and note that ticks themselves\nare markers. Thus, you should use set_mec, set_mew, etc.\n\nTo change the tick size (length), you need to use\n`set_ticksize`. To change the direction of the ticks (ticks are\nin opposite direction of ticklabels by default), use\n``set_tick_out(False)``",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_ref_artist",
          "docstring": null
        },
        {
          "name": "set_color",
          "docstring": null
        },
        {
          "name": "get_color",
          "docstring": null
        },
        {
          "name": "get_markeredgecolor",
          "docstring": null
        },
        {
          "name": "get_markeredgewidth",
          "docstring": null
        },
        {
          "name": "set_tick_out",
          "docstring": "Set whether ticks are drawn inside or outside the axes."
        },
        {
          "name": "get_tick_out",
          "docstring": "Return whether ticks are drawn inside or outside the axes."
        },
        {
          "name": "set_ticksize",
          "docstring": "Set length of the ticks in points."
        },
        {
          "name": "get_ticksize",
          "docstring": "Return length of the ticks in points."
        },
        {
          "name": "set_locs_angles",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        }
      ]
    },
    {
      "name": "LabelBase",
      "docstring": "A base class for `.AxisLabel` and `.TickLabels`. The position and\nangle of the text are calculated by the offset_ref_angle,\ntext_ref_angle, and offset_radius attributes.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        },
        {
          "name": "get_window_extent",
          "docstring": null
        }
      ]
    },
    {
      "name": "AxisLabel",
      "docstring": "Axis label. Derived from `.Text`. The position of the text is updated\nin the fly, so changing text position has no effect. Otherwise, the\nproperties can be changed as a normal `.Text`.\n\nTo change the pad between tick labels and axis label, use `set_pad`.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "set_pad",
          "docstring": "Set the internal pad in points.\n\nThe actual pad will be the sum of the internal pad and the\nexternal pad (the latter is set automatically by the `.AxisArtist`).\n\nParameters\n----------\npad : float\n    The internal pad in points."
        },
        {
          "name": "get_pad",
          "docstring": "Return the internal pad in points.\n\nSee `.set_pad` for more details."
        },
        {
          "name": "get_ref_artist",
          "docstring": null
        },
        {
          "name": "get_text",
          "docstring": null
        },
        {
          "name": "set_default_alignment",
          "docstring": "Set the default alignment. See `set_axis_direction` for details.\n\nParameters\n----------\nd : {\"left\", \"bottom\", \"right\", \"top\"}"
        },
        {
          "name": "set_default_angle",
          "docstring": "Set the default angle. See `set_axis_direction` for details.\n\nParameters\n----------\nd : {\"left\", \"bottom\", \"right\", \"top\"}"
        },
        {
          "name": "set_axis_direction",
          "docstring": "Adjust the text angle and text alignment of axis label\naccording to the matplotlib convention.\n\n=====================    ========== ========= ========== ==========\nProperty                 left       bottom    right      top\n=====================    ========== ========= ========== ==========\naxislabel angle          180        0         0          180\naxislabel va             center     top       center     bottom\naxislabel ha             right      center    right      center\n=====================    ========== ========= ========== ==========\n\nNote that the text angles are actually relative to (90 + angle\nof the direction to the ticklabel), which gives 0 for bottom\naxis.\n\nParameters\n----------\nd : {\"left\", \"bottom\", \"right\", \"top\"}"
        },
        {
          "name": "get_color",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        },
        {
          "name": "get_window_extent",
          "docstring": null
        }
      ]
    },
    {
      "name": "TickLabels",
      "docstring": "Tick labels. While derived from `.Text`, this single artist draws all\nticklabels. As in `.AxisLabel`, the position of the text is updated\nin the fly, so changing text position has no effect. Otherwise,\nthe properties can be changed as a normal `.Text`. Unlike the\nticklabels of the mainline Matplotlib, properties of a single\nticklabel alone cannot be modified.\n\nTo change the pad between ticks and ticklabels, use `~.AxisLabel.set_pad`.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_ref_artist",
          "docstring": null
        },
        {
          "name": "set_axis_direction",
          "docstring": "Adjust the text angle and text alignment of ticklabels\naccording to the Matplotlib convention.\n\nThe *label_direction* must be one of [left, right, bottom, top].\n\n=====================    ========== ========= ========== ==========\nProperty                 left       bottom    right      top\n=====================    ========== ========= ========== ==========\nticklabel angle          90         0         -90        180\nticklabel va             center     baseline  center     baseline\nticklabel ha             right      center    right      center\n=====================    ========== ========= ========== ==========\n\nNote that the text angles are actually relative to (90 + angle\nof the direction to the ticklabel), which gives 0 for bottom\naxis.\n\nParameters\n----------\nlabel_direction : {\"left\", \"bottom\", \"right\", \"top\"}"
        },
        {
          "name": "invert_axis_direction",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        },
        {
          "name": "set_locs_angles_labels",
          "docstring": null
        },
        {
          "name": "get_window_extents",
          "docstring": null
        },
        {
          "name": "get_texts_widths_heights_descents",
          "docstring": "Return a list of ``(width, height, descent)`` tuples for ticklabels.\n\nEmpty labels are left out."
        }
      ]
    },
    {
      "name": "GridlinesCollection",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": "Collection of grid lines.\n\nParameters\n----------\nwhich : {\"major\", \"minor\"}\n    Which grid to consider.\naxis : {\"both\", \"x\", \"y\"}\n    Which axis to consider.\n*args, **kwargs\n    Passed to `.LineCollection`."
        },
        {
          "name": "set_which",
          "docstring": "Select major or minor grid lines.\n\nParameters\n----------\nwhich : {\"major\", \"minor\"}"
        },
        {
          "name": "set_axis",
          "docstring": "Select axis.\n\nParameters\n----------\naxis : {\"both\", \"x\", \"y\"}"
        },
        {
          "name": "set_grid_helper",
          "docstring": "Set grid helper.\n\nParameters\n----------\ngrid_helper : `.GridHelperBase` subclass"
        },
        {
          "name": "draw",
          "docstring": null
        }
      ]
    },
    {
      "name": "AxisArtist",
      "docstring": "An artist which draws axis (a line along which the n-th axes coord\nis constant) line, ticks, tick labels, and axis label.",
      "methods": [
        {
          "name": "LABELPAD",
          "docstring": null
        },
        {
          "name": "LABELPAD",
          "docstring": null
        },
        {
          "name": "__init__",
          "docstring": "Parameters\n----------\naxes : `mpl_toolkits.axisartist.axislines.Axes`\nhelper : `~mpl_toolkits.axisartist.axislines.AxisArtistHelper`"
        },
        {
          "name": "set_axis_direction",
          "docstring": "Adjust the direction, text angle, and text alignment of tick labels\nand axis labels following the Matplotlib convention for the rectangle\naxes.\n\nThe *axis_direction* must be one of [left, right, bottom, top].\n\n=====================    ========== ========= ========== ==========\nProperty                 left       bottom    right      top\n=====================    ========== ========= ========== ==========\nticklabel direction      \"-\"        \"+\"       \"+\"        \"-\"\naxislabel direction      \"-\"        \"+\"       \"+\"        \"-\"\nticklabel angle          90         0         -90        180\nticklabel va             center     baseline  center     baseline\nticklabel ha             right      center    right      center\naxislabel angle          180        0         0          180\naxislabel va             center     top       center     bottom\naxislabel ha             right      center    right      center\n=====================    ========== ========= ========== ==========\n\nNote that the direction \"+\" and \"-\" are relative to the direction of\nthe increasing coordinate. Also, the text angles are actually\nrelative to (90 + angle of the direction to the ticklabel),\nwhich gives 0 for bottom axis.\n\nParameters\n----------\naxis_direction : {\"left\", \"bottom\", \"right\", \"top\"}"
        },
        {
          "name": "set_ticklabel_direction",
          "docstring": "Adjust the direction of the tick labels.\n\nNote that the *tick_direction*\\s '+' and '-' are relative to the\ndirection of the increasing coordinate.\n\nParameters\n----------\ntick_direction : {\"+\", \"-\"}"
        },
        {
          "name": "invert_ticklabel_direction",
          "docstring": null
        },
        {
          "name": "set_axislabel_direction",
          "docstring": "Adjust the direction of the axis label.\n\nNote that the *label_direction*\\s '+' and '-' are relative to the\ndirection of the increasing coordinate.\n\nParameters\n----------\nlabel_direction : {\"+\", \"-\"}"
        },
        {
          "name": "get_transform",
          "docstring": null
        },
        {
          "name": "get_helper",
          "docstring": "Return axis artist helper instance."
        },
        {
          "name": "set_axisline_style",
          "docstring": "Set the axisline style.\n\nThe new style is completely defined by the passed attributes. Existing\nstyle attributes are forgotten.\n\nParameters\n----------\naxisline_style : str or None\n    The line style, e.g. '->', optionally followed by a comma-separated\n    list of attributes. Alternatively, the attributes can be provided\n    as keywords.\n\n    If *None* this returns a string containing the available styles.\n\nExamples\n--------\nThe following two commands are equal:\n\n>>> set_axisline_style(\"->,size=1.5\")\n>>> set_axisline_style(\"->\", size=1.5)"
        },
        {
          "name": "get_axisline_style",
          "docstring": "Return the current axisline style."
        },
        {
          "name": "set_label",
          "docstring": null
        },
        {
          "name": "get_tightbbox",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        },
        {
          "name": "toggle",
          "docstring": "Toggle visibility of ticks, ticklabels, and (axis) label.\nTo turn all off, ::\n\n  axis.toggle(all=False)\n\nTo turn all off but ticks on ::\n\n  axis.toggle(all=False, ticks=True)\n\nTo turn all on but (axis) label off ::\n\n  axis.toggle(all=True, label=False)"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_ref_artist",
      "docstring": "Return the underlying artist that actually defines some properties\n(e.g., color) of this artist."
    },
    {
      "name": "get_attribute_from_ref_artist",
      "docstring": null
    },
    {
      "name": "get_ref_artist",
      "docstring": null
    },
    {
      "name": "set_color",
      "docstring": null
    },
    {
      "name": "get_color",
      "docstring": null
    },
    {
      "name": "get_markeredgecolor",
      "docstring": null
    },
    {
      "name": "get_markeredgewidth",
      "docstring": null
    },
    {
      "name": "set_tick_out",
      "docstring": "Set whether ticks are drawn inside or outside the axes."
    },
    {
      "name": "get_tick_out",
      "docstring": "Return whether ticks are drawn inside or outside the axes."
    },
    {
      "name": "set_ticksize",
      "docstring": "Set length of the ticks in points."
    },
    {
      "name": "get_ticksize",
      "docstring": "Return length of the ticks in points."
    },
    {
      "name": "set_locs_angles",
      "docstring": null
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "get_window_extent",
      "docstring": null
    },
    {
      "name": "set_pad",
      "docstring": "Set the internal pad in points.\n\nThe actual pad will be the sum of the internal pad and the\nexternal pad (the latter is set automatically by the `.AxisArtist`).\n\nParameters\n----------\npad : float\n    The internal pad in points."
    },
    {
      "name": "get_pad",
      "docstring": "Return the internal pad in points.\n\nSee `.set_pad` for more details."
    },
    {
      "name": "get_ref_artist",
      "docstring": null
    },
    {
      "name": "get_text",
      "docstring": null
    },
    {
      "name": "set_default_alignment",
      "docstring": "Set the default alignment. See `set_axis_direction` for details.\n\nParameters\n----------\nd : {\"left\", \"bottom\", \"right\", \"top\"}"
    },
    {
      "name": "set_default_angle",
      "docstring": "Set the default angle. See `set_axis_direction` for details.\n\nParameters\n----------\nd : {\"left\", \"bottom\", \"right\", \"top\"}"
    },
    {
      "name": "set_axis_direction",
      "docstring": "Adjust the text angle and text alignment of axis label\naccording to the matplotlib convention.\n\n=====================    ========== ========= ========== ==========\nProperty                 left       bottom    right      top\n=====================    ========== ========= ========== ==========\naxislabel angle          180        0         0          180\naxislabel va             center     top       center     bottom\naxislabel ha             right      center    right      center\n=====================    ========== ========= ========== ==========\n\nNote that the text angles are actually relative to (90 + angle\nof the direction to the ticklabel), which gives 0 for bottom\naxis.\n\nParameters\n----------\nd : {\"left\", \"bottom\", \"right\", \"top\"}"
    },
    {
      "name": "get_color",
      "docstring": null
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "get_window_extent",
      "docstring": null
    },
    {
      "name": "get_ref_artist",
      "docstring": null
    },
    {
      "name": "set_axis_direction",
      "docstring": "Adjust the text angle and text alignment of ticklabels\naccording to the Matplotlib convention.\n\nThe *label_direction* must be one of [left, right, bottom, top].\n\n=====================    ========== ========= ========== ==========\nProperty                 left       bottom    right      top\n=====================    ========== ========= ========== ==========\nticklabel angle          90         0         -90        180\nticklabel va             center     baseline  center     baseline\nticklabel ha             right      center    right      center\n=====================    ========== ========= ========== ==========\n\nNote that the text angles are actually relative to (90 + angle\nof the direction to the ticklabel), which gives 0 for bottom\naxis.\n\nParameters\n----------\nlabel_direction : {\"left\", \"bottom\", \"right\", \"top\"}"
    },
    {
      "name": "invert_axis_direction",
      "docstring": null
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "set_locs_angles_labels",
      "docstring": null
    },
    {
      "name": "get_window_extents",
      "docstring": null
    },
    {
      "name": "get_texts_widths_heights_descents",
      "docstring": "Return a list of ``(width, height, descent)`` tuples for ticklabels.\n\nEmpty labels are left out."
    },
    {
      "name": "set_which",
      "docstring": "Select major or minor grid lines.\n\nParameters\n----------\nwhich : {\"major\", \"minor\"}"
    },
    {
      "name": "set_axis",
      "docstring": "Select axis.\n\nParameters\n----------\naxis : {\"both\", \"x\", \"y\"}"
    },
    {
      "name": "set_grid_helper",
      "docstring": "Set grid helper.\n\nParameters\n----------\ngrid_helper : `.GridHelperBase` subclass"
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "LABELPAD",
      "docstring": null
    },
    {
      "name": "LABELPAD",
      "docstring": null
    },
    {
      "name": "set_axis_direction",
      "docstring": "Adjust the direction, text angle, and text alignment of tick labels\nand axis labels following the Matplotlib convention for the rectangle\naxes.\n\nThe *axis_direction* must be one of [left, right, bottom, top].\n\n=====================    ========== ========= ========== ==========\nProperty                 left       bottom    right      top\n=====================    ========== ========= ========== ==========\nticklabel direction      \"-\"        \"+\"       \"+\"        \"-\"\naxislabel direction      \"-\"        \"+\"       \"+\"        \"-\"\nticklabel angle          90         0         -90        180\nticklabel va             center     baseline  center     baseline\nticklabel ha             right      center    right      center\naxislabel angle          180        0         0          180\naxislabel va             center     top       center     bottom\naxislabel ha             right      center    right      center\n=====================    ========== ========= ========== ==========\n\nNote that the direction \"+\" and \"-\" are relative to the direction of\nthe increasing coordinate. Also, the text angles are actually\nrelative to (90 + angle of the direction to the ticklabel),\nwhich gives 0 for bottom axis.\n\nParameters\n----------\naxis_direction : {\"left\", \"bottom\", \"right\", \"top\"}"
    },
    {
      "name": "set_ticklabel_direction",
      "docstring": "Adjust the direction of the tick labels.\n\nNote that the *tick_direction*\\s '+' and '-' are relative to the\ndirection of the increasing coordinate.\n\nParameters\n----------\ntick_direction : {\"+\", \"-\"}"
    },
    {
      "name": "invert_ticklabel_direction",
      "docstring": null
    },
    {
      "name": "set_axislabel_direction",
      "docstring": "Adjust the direction of the axis label.\n\nNote that the *label_direction*\\s '+' and '-' are relative to the\ndirection of the increasing coordinate.\n\nParameters\n----------\nlabel_direction : {\"+\", \"-\"}"
    },
    {
      "name": "get_transform",
      "docstring": null
    },
    {
      "name": "get_helper",
      "docstring": "Return axis artist helper instance."
    },
    {
      "name": "set_axisline_style",
      "docstring": "Set the axisline style.\n\nThe new style is completely defined by the passed attributes. Existing\nstyle attributes are forgotten.\n\nParameters\n----------\naxisline_style : str or None\n    The line style, e.g. '->', optionally followed by a comma-separated\n    list of attributes. Alternatively, the attributes can be provided\n    as keywords.\n\n    If *None* this returns a string containing the available styles.\n\nExamples\n--------\nThe following two commands are equal:\n\n>>> set_axisline_style(\"->,size=1.5\")\n>>> set_axisline_style(\"->\", size=1.5)"
    },
    {
      "name": "get_axisline_style",
      "docstring": "Return the current axisline style."
    },
    {
      "name": "set_label",
      "docstring": null
    },
    {
      "name": "get_tightbbox",
      "docstring": null
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "toggle",
      "docstring": "Toggle visibility of ticks, ticklabels, and (axis) label.\nTo turn all off, ::\n\n  axis.toggle(all=False)\n\nTo turn all off but ticks on ::\n\n  axis.toggle(all=False, ticks=True)\n\nTo turn all on but (axis) label off ::\n\n  axis.toggle(all=True, label=False)"
    }
  ],
  "innovations": []
}