{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\artist.py",
  "classes": [
    {
      "name": "_Unset",
      "docstring": null,
      "methods": []
    },
    {
      "name": "Artist",
      "docstring": "Abstract base class for objects that render into a FigureCanvas.\n\nTypically, all visible elements in a figure are subclasses of Artist.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "remove",
          "docstring": "Remove the artist from the figure if possible.\n\nThe effect will not be visible until the figure is redrawn, e.g.,\nwith `.FigureCanvasBase.draw_idle`.  Call `~.axes.Axes.relim` to\nupdate the Axes limits if desired.\n\nNote: `~.axes.Axes.relim` will not see collections even if the\ncollection was added to the Axes with *autolim* = True.\n\nNote: there is no support for removing the artist's legend entry."
        },
        {
          "name": "have_units",
          "docstring": "Return whether units are set on any axis."
        },
        {
          "name": "convert_xunits",
          "docstring": "Convert *x* using the unit type of the xaxis.\n\nIf the artist is not contained in an Axes or if the xaxis does not\nhave units, *x* itself is returned."
        },
        {
          "name": "convert_yunits",
          "docstring": "Convert *y* using the unit type of the yaxis.\n\nIf the artist is not contained in an Axes or if the yaxis does not\nhave units, *y* itself is returned."
        },
        {
          "name": "axes",
          "docstring": "The `~.axes.Axes` instance the artist resides in, or *None*."
        },
        {
          "name": "axes",
          "docstring": null
        },
        {
          "name": "stale",
          "docstring": "Whether the artist is 'stale' and needs to be re-drawn for the output\nto match the internal state of the artist."
        },
        {
          "name": "stale",
          "docstring": null
        },
        {
          "name": "get_window_extent",
          "docstring": "Get the artist's bounding box in display space.\n\nThe bounding box' width and height are nonnegative.\n\nSubclasses should override for inclusion in the bounding box\n\"tight\" calculation. Default is to return an empty bounding\nbox at 0, 0.\n\nBe careful when using this function, the results will not update\nif the artist window extent of the artist changes.  The extent\ncan change due to any changes in the transform stack, such as\nchanging the Axes limits, the figure size, or the canvas used\n(as is done when saving a figure).  This can lead to unexpected\nbehavior where interactive figures will look fine on the screen,\nbut will save incorrectly."
        },
        {
          "name": "get_tightbbox",
          "docstring": "Like `.Artist.get_window_extent`, but includes any clipping.\n\nParameters\n----------\nrenderer : `~matplotlib.backend_bases.RendererBase` subclass, optional\n    renderer that will be used to draw the figures (i.e.\n    ``fig.canvas.get_renderer()``)\n\nReturns\n-------\n`.Bbox` or None\n    The enclosing bounding box (in figure pixel coordinates).\n    Returns None if clipping results in no intersection."
        },
        {
          "name": "add_callback",
          "docstring": "Add a callback function that will be called whenever one of the\n`.Artist`'s properties changes.\n\nParameters\n----------\nfunc : callable\n    The callback function. It must have the signature::\n\n        def func(artist: Artist) -> Any\n\n    where *artist* is the calling `.Artist`. Return values may exist\n    but are ignored.\n\nReturns\n-------\nint\n    The observer id associated with the callback. This id can be\n    used for removing the callback with `.remove_callback` later.\n\nSee Also\n--------\nremove_callback"
        },
        {
          "name": "remove_callback",
          "docstring": "Remove a callback based on its observer id.\n\nSee Also\n--------\nadd_callback"
        },
        {
          "name": "pchanged",
          "docstring": "Call all of the registered callbacks.\n\nThis function is triggered internally when a property is changed.\n\nSee Also\n--------\nadd_callback\nremove_callback"
        },
        {
          "name": "is_transform_set",
          "docstring": "Return whether the Artist has an explicitly set transform.\n\nThis is *True* after `.set_transform` has been called."
        },
        {
          "name": "set_transform",
          "docstring": "Set the artist transform.\n\nParameters\n----------\nt : `~matplotlib.transforms.Transform`"
        },
        {
          "name": "get_transform",
          "docstring": "Return the `.Transform` instance used by this artist."
        },
        {
          "name": "get_children",
          "docstring": "Return a list of the child `.Artist`\\s of this `.Artist`."
        },
        {
          "name": "contains",
          "docstring": "Test whether the artist contains the mouse event.\n\nParameters\n----------\nmouseevent : `~matplotlib.backend_bases.MouseEvent`\n\nReturns\n-------\ncontains : bool\n    Whether any values are within the radius.\ndetails : dict\n    An artist-specific dictionary of details of the event context,\n    such as which points are contained in the pick radius. See the\n    individual Artist subclasses for details."
        },
        {
          "name": "pickable",
          "docstring": "Return whether the artist is pickable.\n\nSee Also\n--------\n.Artist.set_picker, .Artist.get_picker, .Artist.pick"
        },
        {
          "name": "pick",
          "docstring": "Process a pick event.\n\nEach child artist will fire a pick event if *mouseevent* is over\nthe artist and the artist has picker set.\n\nSee Also\n--------\n.Artist.set_picker, .Artist.get_picker, .Artist.pickable"
        },
        {
          "name": "set_picker",
          "docstring": "Define the picking behavior of the artist.\n\nParameters\n----------\npicker : None or bool or float or callable\n    This can be one of the following:\n\n    - *None*: Picking is disabled for this artist (default).\n\n    - A boolean: If *True* then picking will be enabled and the\n      artist will fire a pick event if the mouse event is over\n      the artist.\n\n    - A float: If picker is a number it is interpreted as an\n      epsilon tolerance in points and the artist will fire\n      off an event if its data is within epsilon of the mouse\n      event.  For some artists like lines and patch collections,\n      the artist may provide additional data to the pick event\n      that is generated, e.g., the indices of the data within\n      epsilon of the pick event\n\n    - A function: If picker is callable, it is a user supplied\n      function which determines whether the artist is hit by the\n      mouse event::\n\n        hit, props = picker(artist, mouseevent)\n\n      to determine the hit test.  if the mouse event is over the\n      artist, return *hit=True* and props is a dictionary of\n      properties you want added to the PickEvent attributes."
        },
        {
          "name": "get_picker",
          "docstring": "Return the picking behavior of the artist.\n\nThe possible values are described in `.Artist.set_picker`.\n\nSee Also\n--------\n.Artist.set_picker, .Artist.pickable, .Artist.pick"
        },
        {
          "name": "get_url",
          "docstring": "Return the url."
        },
        {
          "name": "set_url",
          "docstring": "Set the url for the artist.\n\nParameters\n----------\nurl : str"
        },
        {
          "name": "get_gid",
          "docstring": "Return the group id."
        },
        {
          "name": "set_gid",
          "docstring": "Set the (group) id for the artist.\n\nParameters\n----------\ngid : str"
        },
        {
          "name": "get_snap",
          "docstring": "Return the snap setting.\n\nSee `.set_snap` for details."
        },
        {
          "name": "set_snap",
          "docstring": "Set the snapping behavior.\n\nSnapping aligns positions with the pixel grid, which results in\nclearer images. For example, if a black line of 1px width was\ndefined at a position in between two pixels, the resulting image\nwould contain the interpolated value of that line in the pixel grid,\nwhich would be a grey value on both adjacent pixel positions. In\ncontrast, snapping will move the line to the nearest integer pixel\nvalue, so that the resulting image will really contain a 1px wide\nblack line.\n\nSnapping is currently only supported by the Agg and MacOSX backends.\n\nParameters\n----------\nsnap : bool or None\n    Possible values:\n\n    - *True*: Snap vertices to the nearest pixel center.\n    - *False*: Do not modify vertex positions.\n    - *None*: (auto) If the path contains only rectilinear line\n      segments, round to the nearest pixel center."
        },
        {
          "name": "get_sketch_params",
          "docstring": "Return the sketch parameters for the artist.\n\nReturns\n-------\ntuple or None\n\n    A 3-tuple with the following elements:\n\n    - *scale*: The amplitude of the wiggle perpendicular to the\n      source line.\n    - *length*: The length of the wiggle along the line.\n    - *randomness*: The scale factor by which the length is\n      shrunken or expanded.\n\n    Returns *None* if no sketch parameters were set."
        },
        {
          "name": "set_sketch_params",
          "docstring": "Set the sketch parameters.\n\nParameters\n----------\nscale : float, optional\n    The amplitude of the wiggle perpendicular to the source\n    line, in pixels.  If scale is `None`, or not provided, no\n    sketch filter will be provided.\nlength : float, optional\n     The length of the wiggle along the line, in pixels\n     (default 128.0)\nrandomness : float, optional\n    The scale factor by which the length is shrunken or\n    expanded (default 16.0)\n\n    The PGF backend uses this argument as an RNG seed and not as\n    described above. Using the same seed yields the same random shape.\n\n    .. ACCEPTS: (scale: float, length: float, randomness: float)"
        },
        {
          "name": "set_path_effects",
          "docstring": "Set the path effects.\n\nParameters\n----------\npath_effects : list of `.AbstractPathEffect`"
        },
        {
          "name": "get_path_effects",
          "docstring": null
        },
        {
          "name": "get_figure",
          "docstring": "Return the `.Figure` or `.SubFigure` instance the artist belongs to.\n\nParameters\n----------\nroot : bool, default=False\n    If False, return the (Sub)Figure this artist is on.  If True,\n    return the root Figure for a nested tree of SubFigures."
        },
        {
          "name": "set_figure",
          "docstring": "Set the `.Figure` or `.SubFigure` instance the artist belongs to.\n\nParameters\n----------\nfig : `~matplotlib.figure.Figure` or `~matplotlib.figure.SubFigure`"
        },
        {
          "name": "set_clip_box",
          "docstring": "Set the artist's clip `.Bbox`.\n\nParameters\n----------\nclipbox : `~matplotlib.transforms.BboxBase` or None\n    Will typically be created from a `.TransformedBbox`. For instance,\n    ``TransformedBbox(Bbox([[0, 0], [1, 1]]), ax.transAxes)`` is the default\n    clipping for an artist added to an Axes."
        },
        {
          "name": "set_clip_path",
          "docstring": "Set the artist's clip path.\n\nParameters\n----------\npath : `~matplotlib.patches.Patch` or `.Path` or `.TransformedPath` or None\n    The clip path. If given a `.Path`, *transform* must be provided as\n    well. If *None*, a previously set clip path is removed.\ntransform : `~matplotlib.transforms.Transform`, optional\n    Only used if *path* is a `.Path`, in which case the given `.Path`\n    is converted to a `.TransformedPath` using *transform*.\n\nNotes\n-----\nFor efficiency, if *path* is a `.Rectangle` this method will set the\nclipping box to the corresponding rectangle and set the clipping path\nto ``None``.\n\nFor technical reasons (support of `~.Artist.set`), a tuple\n(*path*, *transform*) is also accepted as a single positional\nparameter.\n\n.. ACCEPTS: Patch or (Path, Transform) or None"
        },
        {
          "name": "get_alpha",
          "docstring": "Return the alpha value used for blending - not supported on all\nbackends."
        },
        {
          "name": "get_visible",
          "docstring": "Return the visibility."
        },
        {
          "name": "get_animated",
          "docstring": "Return whether the artist is animated."
        },
        {
          "name": "get_in_layout",
          "docstring": "Return boolean flag, ``True`` if artist is included in layout\ncalculations.\n\nE.g. :ref:`constrainedlayout_guide`,\n`.Figure.tight_layout()`, and\n``fig.savefig(fname, bbox_inches='tight')``."
        },
        {
          "name": "get_clip_on",
          "docstring": "Return whether the artist uses clipping."
        },
        {
          "name": "get_clip_box",
          "docstring": "Return the clipbox."
        },
        {
          "name": "get_clip_path",
          "docstring": "Return the clip path."
        },
        {
          "name": "get_transformed_clip_path_and_affine",
          "docstring": "Return the clip path with the non-affine part of its\ntransformation applied, and the remaining affine part of its\ntransformation."
        },
        {
          "name": "set_clip_on",
          "docstring": "Set whether the artist uses clipping.\n\nWhen False, artists will be visible outside the Axes which\ncan lead to unexpected results.\n\nParameters\n----------\nb : bool"
        },
        {
          "name": "get_rasterized",
          "docstring": "Return whether the artist is to be rasterized."
        },
        {
          "name": "set_rasterized",
          "docstring": "Force rasterized (bitmap) drawing for vector graphics output.\n\nRasterized drawing is not supported by all artists. If you try to\nenable this on an artist that does not support it, the command has no\neffect and a warning will be issued.\n\nThis setting is ignored for pixel-based output.\n\nSee also :doc:`/gallery/misc/rasterization_demo`.\n\nParameters\n----------\nrasterized : bool"
        },
        {
          "name": "get_agg_filter",
          "docstring": "Return filter function to be used for agg filter."
        },
        {
          "name": "set_agg_filter",
          "docstring": "Set the agg filter.\n\nParameters\n----------\nfilter_func : callable\n    A filter function, which takes a (m, n, depth) float array\n    and a dpi value, and returns a (m, n, depth) array and two\n    offsets from the bottom left corner of the image\n\n    .. ACCEPTS: a filter function, which takes a (m, n, 3) float array\n        and a dpi value, and returns a (m, n, 3) array and two offsets\n        from the bottom left corner of the image"
        },
        {
          "name": "draw",
          "docstring": "Draw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`.Artist.get_visible`\nreturns False).\n\nParameters\n----------\nrenderer : `~matplotlib.backend_bases.RendererBase` subclass.\n\nNotes\n-----\nThis method is overridden in the Artist subclasses."
        },
        {
          "name": "set_alpha",
          "docstring": "Set the alpha value used for blending - not supported on all backends.\n\nParameters\n----------\nalpha : float or None\n    *alpha* must be within the 0-1 range, inclusive."
        },
        {
          "name": "set_visible",
          "docstring": "Set the artist's visibility.\n\nParameters\n----------\nb : bool"
        },
        {
          "name": "set_animated",
          "docstring": "Set whether the artist is intended to be used in an animation.\n\nIf True, the artist is excluded from regular drawing of the figure.\nYou have to call `.Figure.draw_artist` / `.Axes.draw_artist`\nexplicitly on the artist. This approach is used to speed up animations\nusing blitting.\n\nSee also `matplotlib.animation` and\n:ref:`blitting`.\n\nParameters\n----------\nb : bool"
        },
        {
          "name": "set_in_layout",
          "docstring": "Set if artist is to be included in layout calculations,\nE.g. :ref:`constrainedlayout_guide`,\n`.Figure.tight_layout()`, and\n``fig.savefig(fname, bbox_inches='tight')``.\n\nParameters\n----------\nin_layout : bool"
        },
        {
          "name": "get_label",
          "docstring": "Return the label used for this artist in the legend."
        },
        {
          "name": "set_label",
          "docstring": "Set a label that will be displayed in the legend.\n\nParameters\n----------\ns : object\n    *s* will be converted to a string by calling `str`."
        },
        {
          "name": "get_zorder",
          "docstring": "Return the artist's zorder."
        },
        {
          "name": "set_zorder",
          "docstring": "Set the zorder for the artist.  Artists with lower zorder\nvalues are drawn first.\n\nParameters\n----------\nlevel : float"
        },
        {
          "name": "sticky_edges",
          "docstring": "``x`` and ``y`` sticky edge lists for autoscaling.\n\nWhen performing autoscaling, if a data limit coincides with a value in\nthe corresponding sticky_edges list, then no margin will be added--the\nview limit \"sticks\" to the edge. A typical use case is histograms,\nwhere one usually expects no margin on the bottom edge (0) of the\nhistogram.\n\nMoreover, margin expansion \"bumps\" against sticky edges and cannot\ncross them.  For example, if the upper data limit is 1.0, the upper\nview limit computed by simple margin application is 1.2, but there is a\nsticky edge at 1.1, then the actual upper view limit will be 1.1.\n\nThis attribute cannot be assigned to; however, the ``x`` and ``y``\nlists can be modified in place as needed.\n\nExamples\n--------\n>>> artist.sticky_edges.x[:] = (xmin, xmax)\n>>> artist.sticky_edges.y[:] = (ymin, ymax)"
        },
        {
          "name": "update_from",
          "docstring": "Copy properties from *other* to *self*."
        },
        {
          "name": "properties",
          "docstring": "Return a dictionary of all the properties of the artist."
        },
        {
          "name": "update",
          "docstring": "Update this artist's properties from the dict *props*.\n\nParameters\n----------\nprops : dict"
        },
        {
          "name": "set",
          "docstring": null
        },
        {
          "name": "findobj",
          "docstring": "Find artist objects.\n\nRecursively find all `.Artist` instances contained in the artist.\n\nParameters\n----------\nmatch\n    A filter criterion for the matches. This can be\n\n    - *None*: Return all objects contained in artist.\n    - A function with signature ``def match(artist: Artist) -> bool``.\n      The result will only contain artists for which the function\n      returns *True*.\n    - A class instance: e.g., `.Line2D`. The result will only contain\n      artists of this class or its subclasses (``isinstance`` check).\n\ninclude_self : bool\n    Include *self* in the list to be checked for a match.\n\nReturns\n-------\nlist of `.Artist`"
        },
        {
          "name": "get_cursor_data",
          "docstring": "Return the cursor data for a given event.\n\n.. note::\n    This method is intended to be overridden by artist subclasses.\n    As an end-user of Matplotlib you will most likely not call this\n    method yourself.\n\nCursor data can be used by Artists to provide additional context\ninformation for a given event. The default implementation just returns\n*None*.\n\nSubclasses can override the method and return arbitrary data. However,\nwhen doing so, they must ensure that `.format_cursor_data` can convert\nthe data to a string representation.\n\nThe only current use case is displaying the z-value of an `.AxesImage`\nin the status bar of a plot window, while moving the mouse.\n\nParameters\n----------\nevent : `~matplotlib.backend_bases.MouseEvent`\n\nSee Also\n--------\nformat_cursor_data"
        },
        {
          "name": "format_cursor_data",
          "docstring": "Return a string representation of *data*.\n\n.. note::\n    This method is intended to be overridden by artist subclasses.\n    As an end-user of Matplotlib you will most likely not call this\n    method yourself.\n\nThe default implementation converts ints and floats and arrays of ints\nand floats into a comma-separated string enclosed in square brackets,\nunless the artist has an associated colorbar, in which case scalar\nvalues are formatted using the colorbar's formatter.\n\nSee Also\n--------\nget_cursor_data"
        },
        {
          "name": "get_mouseover",
          "docstring": "Return whether this artist is queried for custom context information\nwhen the mouse cursor moves over it."
        },
        {
          "name": "set_mouseover",
          "docstring": "Set whether this artist is queried for custom context information when\nthe mouse cursor moves over it.\n\nParameters\n----------\nmouseover : bool\n\nSee Also\n--------\nget_cursor_data\n.ToolCursorPosition\n.NavigationToolbar2"
        }
      ]
    },
    {
      "name": "ArtistInspector",
      "docstring": "A helper class to inspect an `~matplotlib.artist.Artist` and return\ninformation about its settable properties and their current values.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Initialize the artist inspector with an `Artist` or an iterable of\n`Artist`\\s.  If an iterable is used, we assume it is a homogeneous\nsequence (all `Artist`\\s are of the same type) and it is your\nresponsibility to make sure this is so."
        },
        {
          "name": "get_aliases",
          "docstring": "Get a dict mapping property fullnames to sets of aliases for each alias\nin the :class:`~matplotlib.artist.ArtistInspector`.\n\ne.g., for lines::\n\n  {'markerfacecolor': {'mfc'},\n   'linewidth'      : {'lw'},\n  }"
        },
        {
          "name": "get_valid_values",
          "docstring": "Get the legal arguments for the setter associated with *attr*.\n\nThis is done by querying the docstring of the setter for a line that\nbegins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a\nnumpydoc-style documentation for the setter's first argument."
        },
        {
          "name": "get_setters",
          "docstring": "Get the attribute strings with setters for object.\n\nFor example, for a line, return ``['markerfacecolor', 'linewidth',\n....]``."
        },
        {
          "name": "number_of_parameters",
          "docstring": "Return number of parameters of the callable *func*."
        },
        {
          "name": "is_alias",
          "docstring": "Return whether the object *method* is an alias for another method."
        },
        {
          "name": "aliased_name",
          "docstring": "Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME'.\n\nFor example, for the line markerfacecolor property, which has an\nalias, return 'markerfacecolor or mfc' and for the transform\nproperty, which does not, return 'transform'."
        },
        {
          "name": "aliased_name_rest",
          "docstring": "Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME',\nformatted for reST.\n\nFor example, for the line markerfacecolor property, which has an\nalias, return 'markerfacecolor or mfc' and for the transform\nproperty, which does not, return 'transform'."
        },
        {
          "name": "pprint_setters",
          "docstring": "If *prop* is *None*, return a list of strings of all settable\nproperties and their valid values.\n\nIf *prop* is not *None*, it is a valid property name and that\nproperty will be returned as a string of property : valid\nvalues."
        },
        {
          "name": "pprint_setters_rest",
          "docstring": "If *prop* is *None*, return a list of reST-formatted strings of all\nsettable properties and their valid values.\n\nIf *prop* is not *None*, it is a valid property name and that\nproperty will be returned as a string of \"property : valid\"\nvalues."
        },
        {
          "name": "properties",
          "docstring": "Return a dictionary mapping property name -> value."
        },
        {
          "name": "pprint_getters",
          "docstring": "Return the getters and actual values as list of strings."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "allow_rasterization",
      "docstring": "Decorator for Artist.draw method. Provides routines\nthat run before and after the draw call. The before and after functions\nare useful for changing artist-dependent renderer attributes or making\nother setup function calls, such as starting and flushing a mixed-mode\nrenderer."
    },
    {
      "name": "getp",
      "docstring": "Return the value of an `.Artist`'s *property*, or print all of them.\n\nParameters\n----------\nobj : `~matplotlib.artist.Artist`\n    The queried artist; e.g., a `.Line2D`, a `.Text`, or an `~.axes.Axes`.\n\nproperty : str or None, default: None\n    If *property* is 'somename', this function returns\n    ``obj.get_somename()``.\n\n    If it's None (or unset), it *prints* all gettable properties from\n    *obj*.  Many properties have aliases for shorter typing, e.g. 'lw' is\n    an alias for 'linewidth'.  In the output, aliases and full property\n    names will be listed as:\n\n      property or alias = value\n\n    e.g.:\n\n      linewidth or lw = 2\n\nSee Also\n--------\nsetp"
    },
    {
      "name": "setp",
      "docstring": "Set one or more properties on an `.Artist`, or list allowed values.\n\nParameters\n----------\nobj : `~matplotlib.artist.Artist` or list of `.Artist`\n    The artist(s) whose properties are being set or queried.  When setting\n    properties, all artists are affected; when querying the allowed values,\n    only the first instance in the sequence is queried.\n\n    For example, two lines can be made thicker and red with a single call:\n\n    >>> x = arange(0, 1, 0.01)\n    >>> lines = plot(x, sin(2*pi*x), x, sin(4*pi*x))\n    >>> setp(lines, linewidth=2, color='r')\n\nfile : file-like, default: `sys.stdout`\n    Where `setp` writes its output when asked to list allowed values.\n\n    >>> with open('output.log') as file:\n    ...     setp(line, file=file)\n\n    The default, ``None``, means `sys.stdout`.\n\n*args, **kwargs\n    The properties to set.  The following combinations are supported:\n\n    - Set the linestyle of a line to be dashed:\n\n      >>> line, = plot([1, 2, 3])\n      >>> setp(line, linestyle='--')\n\n    - Set multiple properties at once:\n\n      >>> setp(line, linewidth=2, color='r')\n\n    - List allowed values for a line's linestyle:\n\n      >>> setp(line, 'linestyle')\n      linestyle: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n\n    - List all properties that can be set, and their allowed values:\n\n      >>> setp(line)\n      agg_filter: a filter function, ...\n      [long output listing omitted]\n\n    `setp` also supports MATLAB style string/value pairs.  For example, the\n    following are equivalent:\n\n    >>> setp(lines, 'linewidth', 2, 'color', 'r')  # MATLAB style\n    >>> setp(lines, linewidth=2, color='r')        # Python style\n\nSee Also\n--------\ngetp"
    },
    {
      "name": "kwdoc",
      "docstring": "Inspect an `~matplotlib.artist.Artist` class (using `.ArtistInspector`) and\nreturn information about its settable properties and their current values.\n\nParameters\n----------\nartist : `~matplotlib.artist.Artist` or an iterable of `Artist`\\s\n\nReturns\n-------\nstr\n    The settable properties of *artist*, as plain text if\n    :rc:`docstring.hardcopy` is False and as a rst table (intended for\n    use in Sphinx) if it is True."
    },
    {
      "name": "draw_wrapper",
      "docstring": null
    },
    {
      "name": "draw_wrapper",
      "docstring": null
    },
    {
      "name": "draw_wrapper",
      "docstring": null
    },
    {
      "name": "remove",
      "docstring": "Remove the artist from the figure if possible.\n\nThe effect will not be visible until the figure is redrawn, e.g.,\nwith `.FigureCanvasBase.draw_idle`.  Call `~.axes.Axes.relim` to\nupdate the Axes limits if desired.\n\nNote: `~.axes.Axes.relim` will not see collections even if the\ncollection was added to the Axes with *autolim* = True.\n\nNote: there is no support for removing the artist's legend entry."
    },
    {
      "name": "have_units",
      "docstring": "Return whether units are set on any axis."
    },
    {
      "name": "convert_xunits",
      "docstring": "Convert *x* using the unit type of the xaxis.\n\nIf the artist is not contained in an Axes or if the xaxis does not\nhave units, *x* itself is returned."
    },
    {
      "name": "convert_yunits",
      "docstring": "Convert *y* using the unit type of the yaxis.\n\nIf the artist is not contained in an Axes or if the yaxis does not\nhave units, *y* itself is returned."
    },
    {
      "name": "axes",
      "docstring": "The `~.axes.Axes` instance the artist resides in, or *None*."
    },
    {
      "name": "axes",
      "docstring": null
    },
    {
      "name": "stale",
      "docstring": "Whether the artist is 'stale' and needs to be re-drawn for the output\nto match the internal state of the artist."
    },
    {
      "name": "stale",
      "docstring": null
    },
    {
      "name": "get_window_extent",
      "docstring": "Get the artist's bounding box in display space.\n\nThe bounding box' width and height are nonnegative.\n\nSubclasses should override for inclusion in the bounding box\n\"tight\" calculation. Default is to return an empty bounding\nbox at 0, 0.\n\nBe careful when using this function, the results will not update\nif the artist window extent of the artist changes.  The extent\ncan change due to any changes in the transform stack, such as\nchanging the Axes limits, the figure size, or the canvas used\n(as is done when saving a figure).  This can lead to unexpected\nbehavior where interactive figures will look fine on the screen,\nbut will save incorrectly."
    },
    {
      "name": "get_tightbbox",
      "docstring": "Like `.Artist.get_window_extent`, but includes any clipping.\n\nParameters\n----------\nrenderer : `~matplotlib.backend_bases.RendererBase` subclass, optional\n    renderer that will be used to draw the figures (i.e.\n    ``fig.canvas.get_renderer()``)\n\nReturns\n-------\n`.Bbox` or None\n    The enclosing bounding box (in figure pixel coordinates).\n    Returns None if clipping results in no intersection."
    },
    {
      "name": "add_callback",
      "docstring": "Add a callback function that will be called whenever one of the\n`.Artist`'s properties changes.\n\nParameters\n----------\nfunc : callable\n    The callback function. It must have the signature::\n\n        def func(artist: Artist) -> Any\n\n    where *artist* is the calling `.Artist`. Return values may exist\n    but are ignored.\n\nReturns\n-------\nint\n    The observer id associated with the callback. This id can be\n    used for removing the callback with `.remove_callback` later.\n\nSee Also\n--------\nremove_callback"
    },
    {
      "name": "remove_callback",
      "docstring": "Remove a callback based on its observer id.\n\nSee Also\n--------\nadd_callback"
    },
    {
      "name": "pchanged",
      "docstring": "Call all of the registered callbacks.\n\nThis function is triggered internally when a property is changed.\n\nSee Also\n--------\nadd_callback\nremove_callback"
    },
    {
      "name": "is_transform_set",
      "docstring": "Return whether the Artist has an explicitly set transform.\n\nThis is *True* after `.set_transform` has been called."
    },
    {
      "name": "set_transform",
      "docstring": "Set the artist transform.\n\nParameters\n----------\nt : `~matplotlib.transforms.Transform`"
    },
    {
      "name": "get_transform",
      "docstring": "Return the `.Transform` instance used by this artist."
    },
    {
      "name": "get_children",
      "docstring": "Return a list of the child `.Artist`\\s of this `.Artist`."
    },
    {
      "name": "contains",
      "docstring": "Test whether the artist contains the mouse event.\n\nParameters\n----------\nmouseevent : `~matplotlib.backend_bases.MouseEvent`\n\nReturns\n-------\ncontains : bool\n    Whether any values are within the radius.\ndetails : dict\n    An artist-specific dictionary of details of the event context,\n    such as which points are contained in the pick radius. See the\n    individual Artist subclasses for details."
    },
    {
      "name": "pickable",
      "docstring": "Return whether the artist is pickable.\n\nSee Also\n--------\n.Artist.set_picker, .Artist.get_picker, .Artist.pick"
    },
    {
      "name": "pick",
      "docstring": "Process a pick event.\n\nEach child artist will fire a pick event if *mouseevent* is over\nthe artist and the artist has picker set.\n\nSee Also\n--------\n.Artist.set_picker, .Artist.get_picker, .Artist.pickable"
    },
    {
      "name": "set_picker",
      "docstring": "Define the picking behavior of the artist.\n\nParameters\n----------\npicker : None or bool or float or callable\n    This can be one of the following:\n\n    - *None*: Picking is disabled for this artist (default).\n\n    - A boolean: If *True* then picking will be enabled and the\n      artist will fire a pick event if the mouse event is over\n      the artist.\n\n    - A float: If picker is a number it is interpreted as an\n      epsilon tolerance in points and the artist will fire\n      off an event if its data is within epsilon of the mouse\n      event.  For some artists like lines and patch collections,\n      the artist may provide additional data to the pick event\n      that is generated, e.g., the indices of the data within\n      epsilon of the pick event\n\n    - A function: If picker is callable, it is a user supplied\n      function which determines whether the artist is hit by the\n      mouse event::\n\n        hit, props = picker(artist, mouseevent)\n\n      to determine the hit test.  if the mouse event is over the\n      artist, return *hit=True* and props is a dictionary of\n      properties you want added to the PickEvent attributes."
    },
    {
      "name": "get_picker",
      "docstring": "Return the picking behavior of the artist.\n\nThe possible values are described in `.Artist.set_picker`.\n\nSee Also\n--------\n.Artist.set_picker, .Artist.pickable, .Artist.pick"
    },
    {
      "name": "get_url",
      "docstring": "Return the url."
    },
    {
      "name": "set_url",
      "docstring": "Set the url for the artist.\n\nParameters\n----------\nurl : str"
    },
    {
      "name": "get_gid",
      "docstring": "Return the group id."
    },
    {
      "name": "set_gid",
      "docstring": "Set the (group) id for the artist.\n\nParameters\n----------\ngid : str"
    },
    {
      "name": "get_snap",
      "docstring": "Return the snap setting.\n\nSee `.set_snap` for details."
    },
    {
      "name": "set_snap",
      "docstring": "Set the snapping behavior.\n\nSnapping aligns positions with the pixel grid, which results in\nclearer images. For example, if a black line of 1px width was\ndefined at a position in between two pixels, the resulting image\nwould contain the interpolated value of that line in the pixel grid,\nwhich would be a grey value on both adjacent pixel positions. In\ncontrast, snapping will move the line to the nearest integer pixel\nvalue, so that the resulting image will really contain a 1px wide\nblack line.\n\nSnapping is currently only supported by the Agg and MacOSX backends.\n\nParameters\n----------\nsnap : bool or None\n    Possible values:\n\n    - *True*: Snap vertices to the nearest pixel center.\n    - *False*: Do not modify vertex positions.\n    - *None*: (auto) If the path contains only rectilinear line\n      segments, round to the nearest pixel center."
    },
    {
      "name": "get_sketch_params",
      "docstring": "Return the sketch parameters for the artist.\n\nReturns\n-------\ntuple or None\n\n    A 3-tuple with the following elements:\n\n    - *scale*: The amplitude of the wiggle perpendicular to the\n      source line.\n    - *length*: The length of the wiggle along the line.\n    - *randomness*: The scale factor by which the length is\n      shrunken or expanded.\n\n    Returns *None* if no sketch parameters were set."
    },
    {
      "name": "set_sketch_params",
      "docstring": "Set the sketch parameters.\n\nParameters\n----------\nscale : float, optional\n    The amplitude of the wiggle perpendicular to the source\n    line, in pixels.  If scale is `None`, or not provided, no\n    sketch filter will be provided.\nlength : float, optional\n     The length of the wiggle along the line, in pixels\n     (default 128.0)\nrandomness : float, optional\n    The scale factor by which the length is shrunken or\n    expanded (default 16.0)\n\n    The PGF backend uses this argument as an RNG seed and not as\n    described above. Using the same seed yields the same random shape.\n\n    .. ACCEPTS: (scale: float, length: float, randomness: float)"
    },
    {
      "name": "set_path_effects",
      "docstring": "Set the path effects.\n\nParameters\n----------\npath_effects : list of `.AbstractPathEffect`"
    },
    {
      "name": "get_path_effects",
      "docstring": null
    },
    {
      "name": "get_figure",
      "docstring": "Return the `.Figure` or `.SubFigure` instance the artist belongs to.\n\nParameters\n----------\nroot : bool, default=False\n    If False, return the (Sub)Figure this artist is on.  If True,\n    return the root Figure for a nested tree of SubFigures."
    },
    {
      "name": "set_figure",
      "docstring": "Set the `.Figure` or `.SubFigure` instance the artist belongs to.\n\nParameters\n----------\nfig : `~matplotlib.figure.Figure` or `~matplotlib.figure.SubFigure`"
    },
    {
      "name": "set_clip_box",
      "docstring": "Set the artist's clip `.Bbox`.\n\nParameters\n----------\nclipbox : `~matplotlib.transforms.BboxBase` or None\n    Will typically be created from a `.TransformedBbox`. For instance,\n    ``TransformedBbox(Bbox([[0, 0], [1, 1]]), ax.transAxes)`` is the default\n    clipping for an artist added to an Axes."
    },
    {
      "name": "set_clip_path",
      "docstring": "Set the artist's clip path.\n\nParameters\n----------\npath : `~matplotlib.patches.Patch` or `.Path` or `.TransformedPath` or None\n    The clip path. If given a `.Path`, *transform* must be provided as\n    well. If *None*, a previously set clip path is removed.\ntransform : `~matplotlib.transforms.Transform`, optional\n    Only used if *path* is a `.Path`, in which case the given `.Path`\n    is converted to a `.TransformedPath` using *transform*.\n\nNotes\n-----\nFor efficiency, if *path* is a `.Rectangle` this method will set the\nclipping box to the corresponding rectangle and set the clipping path\nto ``None``.\n\nFor technical reasons (support of `~.Artist.set`), a tuple\n(*path*, *transform*) is also accepted as a single positional\nparameter.\n\n.. ACCEPTS: Patch or (Path, Transform) or None"
    },
    {
      "name": "get_alpha",
      "docstring": "Return the alpha value used for blending - not supported on all\nbackends."
    },
    {
      "name": "get_visible",
      "docstring": "Return the visibility."
    },
    {
      "name": "get_animated",
      "docstring": "Return whether the artist is animated."
    },
    {
      "name": "get_in_layout",
      "docstring": "Return boolean flag, ``True`` if artist is included in layout\ncalculations.\n\nE.g. :ref:`constrainedlayout_guide`,\n`.Figure.tight_layout()`, and\n``fig.savefig(fname, bbox_inches='tight')``."
    },
    {
      "name": "get_clip_on",
      "docstring": "Return whether the artist uses clipping."
    },
    {
      "name": "get_clip_box",
      "docstring": "Return the clipbox."
    },
    {
      "name": "get_clip_path",
      "docstring": "Return the clip path."
    },
    {
      "name": "get_transformed_clip_path_and_affine",
      "docstring": "Return the clip path with the non-affine part of its\ntransformation applied, and the remaining affine part of its\ntransformation."
    },
    {
      "name": "set_clip_on",
      "docstring": "Set whether the artist uses clipping.\n\nWhen False, artists will be visible outside the Axes which\ncan lead to unexpected results.\n\nParameters\n----------\nb : bool"
    },
    {
      "name": "get_rasterized",
      "docstring": "Return whether the artist is to be rasterized."
    },
    {
      "name": "set_rasterized",
      "docstring": "Force rasterized (bitmap) drawing for vector graphics output.\n\nRasterized drawing is not supported by all artists. If you try to\nenable this on an artist that does not support it, the command has no\neffect and a warning will be issued.\n\nThis setting is ignored for pixel-based output.\n\nSee also :doc:`/gallery/misc/rasterization_demo`.\n\nParameters\n----------\nrasterized : bool"
    },
    {
      "name": "get_agg_filter",
      "docstring": "Return filter function to be used for agg filter."
    },
    {
      "name": "set_agg_filter",
      "docstring": "Set the agg filter.\n\nParameters\n----------\nfilter_func : callable\n    A filter function, which takes a (m, n, depth) float array\n    and a dpi value, and returns a (m, n, depth) array and two\n    offsets from the bottom left corner of the image\n\n    .. ACCEPTS: a filter function, which takes a (m, n, 3) float array\n        and a dpi value, and returns a (m, n, 3) array and two offsets\n        from the bottom left corner of the image"
    },
    {
      "name": "draw",
      "docstring": "Draw the Artist (and its children) using the given renderer.\n\nThis has no effect if the artist is not visible (`.Artist.get_visible`\nreturns False).\n\nParameters\n----------\nrenderer : `~matplotlib.backend_bases.RendererBase` subclass.\n\nNotes\n-----\nThis method is overridden in the Artist subclasses."
    },
    {
      "name": "set_alpha",
      "docstring": "Set the alpha value used for blending - not supported on all backends.\n\nParameters\n----------\nalpha : float or None\n    *alpha* must be within the 0-1 range, inclusive."
    },
    {
      "name": "set_visible",
      "docstring": "Set the artist's visibility.\n\nParameters\n----------\nb : bool"
    },
    {
      "name": "set_animated",
      "docstring": "Set whether the artist is intended to be used in an animation.\n\nIf True, the artist is excluded from regular drawing of the figure.\nYou have to call `.Figure.draw_artist` / `.Axes.draw_artist`\nexplicitly on the artist. This approach is used to speed up animations\nusing blitting.\n\nSee also `matplotlib.animation` and\n:ref:`blitting`.\n\nParameters\n----------\nb : bool"
    },
    {
      "name": "set_in_layout",
      "docstring": "Set if artist is to be included in layout calculations,\nE.g. :ref:`constrainedlayout_guide`,\n`.Figure.tight_layout()`, and\n``fig.savefig(fname, bbox_inches='tight')``.\n\nParameters\n----------\nin_layout : bool"
    },
    {
      "name": "get_label",
      "docstring": "Return the label used for this artist in the legend."
    },
    {
      "name": "set_label",
      "docstring": "Set a label that will be displayed in the legend.\n\nParameters\n----------\ns : object\n    *s* will be converted to a string by calling `str`."
    },
    {
      "name": "get_zorder",
      "docstring": "Return the artist's zorder."
    },
    {
      "name": "set_zorder",
      "docstring": "Set the zorder for the artist.  Artists with lower zorder\nvalues are drawn first.\n\nParameters\n----------\nlevel : float"
    },
    {
      "name": "sticky_edges",
      "docstring": "``x`` and ``y`` sticky edge lists for autoscaling.\n\nWhen performing autoscaling, if a data limit coincides with a value in\nthe corresponding sticky_edges list, then no margin will be added--the\nview limit \"sticks\" to the edge. A typical use case is histograms,\nwhere one usually expects no margin on the bottom edge (0) of the\nhistogram.\n\nMoreover, margin expansion \"bumps\" against sticky edges and cannot\ncross them.  For example, if the upper data limit is 1.0, the upper\nview limit computed by simple margin application is 1.2, but there is a\nsticky edge at 1.1, then the actual upper view limit will be 1.1.\n\nThis attribute cannot be assigned to; however, the ``x`` and ``y``\nlists can be modified in place as needed.\n\nExamples\n--------\n>>> artist.sticky_edges.x[:] = (xmin, xmax)\n>>> artist.sticky_edges.y[:] = (ymin, ymax)"
    },
    {
      "name": "update_from",
      "docstring": "Copy properties from *other* to *self*."
    },
    {
      "name": "properties",
      "docstring": "Return a dictionary of all the properties of the artist."
    },
    {
      "name": "update",
      "docstring": "Update this artist's properties from the dict *props*.\n\nParameters\n----------\nprops : dict"
    },
    {
      "name": "set",
      "docstring": null
    },
    {
      "name": "findobj",
      "docstring": "Find artist objects.\n\nRecursively find all `.Artist` instances contained in the artist.\n\nParameters\n----------\nmatch\n    A filter criterion for the matches. This can be\n\n    - *None*: Return all objects contained in artist.\n    - A function with signature ``def match(artist: Artist) -> bool``.\n      The result will only contain artists for which the function\n      returns *True*.\n    - A class instance: e.g., `.Line2D`. The result will only contain\n      artists of this class or its subclasses (``isinstance`` check).\n\ninclude_self : bool\n    Include *self* in the list to be checked for a match.\n\nReturns\n-------\nlist of `.Artist`"
    },
    {
      "name": "get_cursor_data",
      "docstring": "Return the cursor data for a given event.\n\n.. note::\n    This method is intended to be overridden by artist subclasses.\n    As an end-user of Matplotlib you will most likely not call this\n    method yourself.\n\nCursor data can be used by Artists to provide additional context\ninformation for a given event. The default implementation just returns\n*None*.\n\nSubclasses can override the method and return arbitrary data. However,\nwhen doing so, they must ensure that `.format_cursor_data` can convert\nthe data to a string representation.\n\nThe only current use case is displaying the z-value of an `.AxesImage`\nin the status bar of a plot window, while moving the mouse.\n\nParameters\n----------\nevent : `~matplotlib.backend_bases.MouseEvent`\n\nSee Also\n--------\nformat_cursor_data"
    },
    {
      "name": "format_cursor_data",
      "docstring": "Return a string representation of *data*.\n\n.. note::\n    This method is intended to be overridden by artist subclasses.\n    As an end-user of Matplotlib you will most likely not call this\n    method yourself.\n\nThe default implementation converts ints and floats and arrays of ints\nand floats into a comma-separated string enclosed in square brackets,\nunless the artist has an associated colorbar, in which case scalar\nvalues are formatted using the colorbar's formatter.\n\nSee Also\n--------\nget_cursor_data"
    },
    {
      "name": "get_mouseover",
      "docstring": "Return whether this artist is queried for custom context information\nwhen the mouse cursor moves over it."
    },
    {
      "name": "set_mouseover",
      "docstring": "Set whether this artist is queried for custom context information when\nthe mouse cursor moves over it.\n\nParameters\n----------\nmouseover : bool\n\nSee Also\n--------\nget_cursor_data\n.ToolCursorPosition\n.NavigationToolbar2"
    },
    {
      "name": "get_aliases",
      "docstring": "Get a dict mapping property fullnames to sets of aliases for each alias\nin the :class:`~matplotlib.artist.ArtistInspector`.\n\ne.g., for lines::\n\n  {'markerfacecolor': {'mfc'},\n   'linewidth'      : {'lw'},\n  }"
    },
    {
      "name": "get_valid_values",
      "docstring": "Get the legal arguments for the setter associated with *attr*.\n\nThis is done by querying the docstring of the setter for a line that\nbegins with \"ACCEPTS:\" or \".. ACCEPTS:\", and then by looking for a\nnumpydoc-style documentation for the setter's first argument."
    },
    {
      "name": "get_setters",
      "docstring": "Get the attribute strings with setters for object.\n\nFor example, for a line, return ``['markerfacecolor', 'linewidth',\n....]``."
    },
    {
      "name": "number_of_parameters",
      "docstring": "Return number of parameters of the callable *func*."
    },
    {
      "name": "is_alias",
      "docstring": "Return whether the object *method* is an alias for another method."
    },
    {
      "name": "aliased_name",
      "docstring": "Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME'.\n\nFor example, for the line markerfacecolor property, which has an\nalias, return 'markerfacecolor or mfc' and for the transform\nproperty, which does not, return 'transform'."
    },
    {
      "name": "aliased_name_rest",
      "docstring": "Return 'PROPNAME or alias' if *s* has an alias, else return 'PROPNAME',\nformatted for reST.\n\nFor example, for the line markerfacecolor property, which has an\nalias, return 'markerfacecolor or mfc' and for the transform\nproperty, which does not, return 'transform'."
    },
    {
      "name": "pprint_setters",
      "docstring": "If *prop* is *None*, return a list of strings of all settable\nproperties and their valid values.\n\nIf *prop* is not *None*, it is a valid property name and that\nproperty will be returned as a string of property : valid\nvalues."
    },
    {
      "name": "pprint_setters_rest",
      "docstring": "If *prop* is *None*, return a list of reST-formatted strings of all\nsettable properties and their valid values.\n\nIf *prop* is not *None*, it is a valid property name and that\nproperty will be returned as a string of \"property : valid\"\nvalues."
    },
    {
      "name": "properties",
      "docstring": "Return a dictionary mapping property name -> value."
    },
    {
      "name": "pprint_getters",
      "docstring": "Return the getters and actual values as list of strings."
    },
    {
      "name": "matchfunc",
      "docstring": null
    },
    {
      "name": "matchfunc",
      "docstring": null
    }
  ],
  "innovations": []
}