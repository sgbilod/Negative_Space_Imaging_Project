{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\sankey.py",
  "classes": [
    {
      "name": "Sankey",
      "docstring": "Sankey diagram.\n\n  Sankey diagrams are a specific type of flow diagram, in which\n  the width of the arrows is shown proportionally to the flow\n  quantity.  They are typically used to visualize energy or\n  material or cost transfers between processes.\n  `Wikipedia (6/1/2011) <https://en.wikipedia.org/wiki/Sankey_diagram>`_",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Create a new Sankey instance.\n\nThe optional arguments listed below are applied to all subdiagrams so\nthat there is consistent alignment and formatting.\n\nIn order to draw a complex Sankey diagram, create an instance of\n`Sankey` by calling it without any kwargs::\n\n    sankey = Sankey()\n\nThen add simple Sankey sub-diagrams::\n\n    sankey.add() # 1\n    sankey.add() # 2\n    #...\n    sankey.add() # n\n\nFinally, create the full diagram::\n\n    sankey.finish()\n\nOr, instead, simply daisy-chain those calls::\n\n    Sankey().add().add...  .add().finish()\n\nOther Parameters\n----------------\nax : `~matplotlib.axes.Axes`\n    Axes onto which the data should be plotted.  If *ax* isn't\n    provided, new Axes will be created.\nscale : float\n    Scaling factor for the flows.  *scale* sizes the width of the paths\n    in order to maintain proper layout.  The same scale is applied to\n    all subdiagrams.  The value should be chosen such that the product\n    of the scale and the sum of the inputs is approximately 1.0 (and\n    the product of the scale and the sum of the outputs is\n    approximately -1.0).\nunit : str\n    The physical unit associated with the flow quantities.  If *unit*\n    is None, then none of the quantities are labeled.\nformat : str or callable\n    A Python number formatting string or callable used to label the\n    flows with their quantities (i.e., a number times a unit, where the\n    unit is given). If a format string is given, the label will be\n    ``format % quantity``. If a callable is given, it will be called\n    with ``quantity`` as an argument.\ngap : float\n    Space between paths that break in/break away to/from the top or\n    bottom.\nradius : float\n    Inner radius of the vertical paths.\nshoulder : float\n    Size of the shoulders of output arrows.\noffset : float\n    Text offset (from the dip or tip of the arrow).\nhead_angle : float\n    Angle, in degrees, of the arrow heads (and negative of the angle of\n    the tails).\nmargin : float\n    Minimum space between Sankey outlines and the edge of the plot\n    area.\ntolerance : float\n    Acceptable maximum of the magnitude of the sum of flows.  The\n    magnitude of the sum of connected flows cannot be greater than\n    *tolerance*.\n**kwargs\n    Any additional keyword arguments will be passed to `add`, which\n    will create the first subdiagram.\n\nSee Also\n--------\nSankey.add\nSankey.finish\n\nExamples\n--------\n.. plot:: gallery/specialty_plots/sankey_basics.py"
        },
        {
          "name": "add",
          "docstring": "Add a simple Sankey diagram with flows at the same hierarchical level.\n\nParameters\n----------\npatchlabel : str\n    Label to be placed at the center of the diagram.\n    Note that *label* (not *patchlabel*) can be passed as keyword\n    argument to create an entry in the legend.\n\nflows : list of float\n    Array of flow values.  By convention, inputs are positive and\n    outputs are negative.\n\n    Flows are placed along the top of the diagram from the inside out\n    in order of their index within *flows*.  They are placed along the\n    sides of the diagram from the top down and along the bottom from\n    the outside in.\n\n    If the sum of the inputs and outputs is\n    nonzero, the discrepancy will appear as a cubic B\u00e9zier curve along\n    the top and bottom edges of the trunk.\n\norientations : list of {-1, 0, 1}\n    List of orientations of the flows (or a single orientation to be\n    used for all flows).  Valid values are 0 (inputs from\n    the left, outputs to the right), 1 (from and to the top) or -1\n    (from and to the bottom).\n\nlabels : list of (str or None)\n    List of labels for the flows (or a single label to be used for all\n    flows).  Each label may be *None* (no label), or a labeling string.\n    If an entry is a (possibly empty) string, then the quantity for the\n    corresponding flow will be shown below the string.  However, if\n    the *unit* of the main diagram is None, then quantities are never\n    shown, regardless of the value of this argument.\n\ntrunklength : float\n    Length between the bases of the input and output groups (in\n    data-space units).\n\npathlengths : list of float\n    List of lengths of the vertical arrows before break-in or after\n    break-away.  If a single value is given, then it will be applied to\n    the first (inside) paths on the top and bottom, and the length of\n    all other arrows will be justified accordingly.  The *pathlengths*\n    are not applied to the horizontal inputs and outputs.\n\nprior : int\n    Index of the prior diagram to which this diagram should be\n    connected.\n\nconnect : (int, int)\n    A (prior, this) tuple indexing the flow of the prior diagram and\n    the flow of this diagram which should be connected.  If this is the\n    first diagram or *prior* is *None*, *connect* will be ignored.\n\nrotation : float\n    Angle of rotation of the diagram in degrees.  The interpretation of\n    the *orientations* argument will be rotated accordingly (e.g., if\n    *rotation* == 90, an *orientations* entry of 1 means to/from the\n    left).  *rotation* is ignored if this diagram is connected to an\n    existing one (using *prior* and *connect*).\n\nReturns\n-------\nSankey\n    The current `.Sankey` instance.\n\nOther Parameters\n----------------\n**kwargs\n   Additional keyword arguments set `matplotlib.patches.PathPatch`\n   properties, listed below.  For example, one may want to use\n   ``fill=False`` or ``label=\"A legend entry\"``.\n\n%(Patch:kwdoc)s\n\nSee Also\n--------\nSankey.finish"
        },
        {
          "name": "finish",
          "docstring": "Adjust the Axes and return a list of information about the Sankey\nsubdiagram(s).\n\nReturns a list of subdiagrams with the following fields:\n\n========  =============================================================\nField     Description\n========  =============================================================\n*patch*   Sankey outline (a `~matplotlib.patches.PathPatch`).\n*flows*   Flow values (positive for input, negative for output).\n*angles*  List of angles of the arrows [deg/90].\n          For example, if the diagram has not been rotated,\n          an input to the top side has an angle of 3 (DOWN),\n          and an output from the top side has an angle of 1 (UP).\n          If a flow has been skipped (because its magnitude is less\n          than *tolerance*), then its angle will be *None*.\n*tips*    (N, 2)-array of the (x, y) positions of the tips (or \"dips\")\n          of the flow paths.\n          If the magnitude of a flow is less the *tolerance* of this\n          `Sankey` instance, the flow is skipped and its tip will be at\n          the center of the diagram.\n*text*    `.Text` instance for the diagram label.\n*texts*   List of `.Text` instances for the flow labels.\n========  =============================================================\n\nSee Also\n--------\nSankey.add"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "add",
      "docstring": "Add a simple Sankey diagram with flows at the same hierarchical level.\n\nParameters\n----------\npatchlabel : str\n    Label to be placed at the center of the diagram.\n    Note that *label* (not *patchlabel*) can be passed as keyword\n    argument to create an entry in the legend.\n\nflows : list of float\n    Array of flow values.  By convention, inputs are positive and\n    outputs are negative.\n\n    Flows are placed along the top of the diagram from the inside out\n    in order of their index within *flows*.  They are placed along the\n    sides of the diagram from the top down and along the bottom from\n    the outside in.\n\n    If the sum of the inputs and outputs is\n    nonzero, the discrepancy will appear as a cubic B\u00e9zier curve along\n    the top and bottom edges of the trunk.\n\norientations : list of {-1, 0, 1}\n    List of orientations of the flows (or a single orientation to be\n    used for all flows).  Valid values are 0 (inputs from\n    the left, outputs to the right), 1 (from and to the top) or -1\n    (from and to the bottom).\n\nlabels : list of (str or None)\n    List of labels for the flows (or a single label to be used for all\n    flows).  Each label may be *None* (no label), or a labeling string.\n    If an entry is a (possibly empty) string, then the quantity for the\n    corresponding flow will be shown below the string.  However, if\n    the *unit* of the main diagram is None, then quantities are never\n    shown, regardless of the value of this argument.\n\ntrunklength : float\n    Length between the bases of the input and output groups (in\n    data-space units).\n\npathlengths : list of float\n    List of lengths of the vertical arrows before break-in or after\n    break-away.  If a single value is given, then it will be applied to\n    the first (inside) paths on the top and bottom, and the length of\n    all other arrows will be justified accordingly.  The *pathlengths*\n    are not applied to the horizontal inputs and outputs.\n\nprior : int\n    Index of the prior diagram to which this diagram should be\n    connected.\n\nconnect : (int, int)\n    A (prior, this) tuple indexing the flow of the prior diagram and\n    the flow of this diagram which should be connected.  If this is the\n    first diagram or *prior* is *None*, *connect* will be ignored.\n\nrotation : float\n    Angle of rotation of the diagram in degrees.  The interpretation of\n    the *orientations* argument will be rotated accordingly (e.g., if\n    *rotation* == 90, an *orientations* entry of 1 means to/from the\n    left).  *rotation* is ignored if this diagram is connected to an\n    existing one (using *prior* and *connect*).\n\nReturns\n-------\nSankey\n    The current `.Sankey` instance.\n\nOther Parameters\n----------------\n**kwargs\n   Additional keyword arguments set `matplotlib.patches.PathPatch`\n   properties, listed below.  For example, one may want to use\n   ``fill=False`` or ``label=\"A legend entry\"``.\n\n%(Patch:kwdoc)s\n\nSee Also\n--------\nSankey.finish"
    },
    {
      "name": "finish",
      "docstring": "Adjust the Axes and return a list of information about the Sankey\nsubdiagram(s).\n\nReturns a list of subdiagrams with the following fields:\n\n========  =============================================================\nField     Description\n========  =============================================================\n*patch*   Sankey outline (a `~matplotlib.patches.PathPatch`).\n*flows*   Flow values (positive for input, negative for output).\n*angles*  List of angles of the arrows [deg/90].\n          For example, if the diagram has not been rotated,\n          an input to the top side has an angle of 3 (DOWN),\n          and an output from the top side has an angle of 1 (UP).\n          If a flow has been skipped (because its magnitude is less\n          than *tolerance*), then its angle will be *None*.\n*tips*    (N, 2)-array of the (x, y) positions of the tips (or \"dips\")\n          of the flow paths.\n          If the magnitude of a flow is less the *tolerance* of this\n          `Sankey` instance, the flow is skipped and its tip will be at\n          the center of the diagram.\n*text*    `.Text` instance for the diagram label.\n*texts*   List of `.Text` instances for the flow labels.\n========  =============================================================\n\nSee Also\n--------\nSankey.add"
    }
  ],
  "innovations": []
}