{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\lib\\_npyio_impl.py",
  "classes": [
    {
      "name": "BagObj",
      "docstring": "BagObj(obj)\n\nConvert attribute look-ups to getitems on the object passed in.\n\nParameters\n----------\nobj : class instance\n    Object on which attribute look-up is performed.\n\nExamples\n--------\n>>> import numpy as np\n>>> from numpy.lib._npyio_impl import BagObj as BO\n>>> class BagDemo:\n...     def __getitem__(self, key): # An instance of BagObj(BagDemo)\n...                                 # will call this method when any\n...                                 # attribute look-up is required\n...         result = \"Doesn't matter what you want, \"\n...         return result + \"you're gonna get this\"\n...\n>>> demo_obj = BagDemo()\n>>> bagobj = BO(demo_obj)\n>>> bagobj.hello_there\n\"Doesn't matter what you want, you're gonna get this\"\n>>> bagobj.I_can_be_anything\n\"Doesn't matter what you want, you're gonna get this\"",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "NpzFile",
      "docstring": "NpzFile(fid)\n\nA dictionary-like object with lazy-loading of files in the zipped\narchive provided on construction.\n\n`NpzFile` is used to load files in the NumPy ``.npz`` data archive\nformat. It assumes that files in the archive have a ``.npy`` extension,\nother files are ignored.\n\nThe arrays and file strings are lazily loaded on either\ngetitem access using ``obj['key']`` or attribute lookup using\n``obj.f.key``. A list of all files (without ``.npy`` extensions) can\nbe obtained with ``obj.files`` and the ZipFile object itself using\n``obj.zip``.\n\nAttributes\n----------\nfiles : list of str\n    List of all files in the archive with a ``.npy`` extension.\nzip : ZipFile instance\n    The ZipFile object initialized with the zipped archive.\nf : BagObj instance\n    An object on which attribute can be performed as an alternative\n    to getitem access on the `NpzFile` instance itself.\nallow_pickle : bool, optional\n    Allow loading pickled data. Default: False\npickle_kwargs : dict, optional\n    Additional keyword arguments to pass on to pickle.load.\n    These are only useful when loading object arrays saved on\n    Python 2 when using Python 3.\nmax_header_size : int, optional\n    Maximum allowed size of the header.  Large headers may not be safe\n    to load securely and thus require explicitly passing a larger value.\n    See :py:func:`ast.literal_eval()` for details.\n    This option is ignored when `allow_pickle` is passed.  In that case\n    the file is by definition trusted and the limit is unnecessary.\n\nParameters\n----------\nfid : file, str, or pathlib.Path\n    The zipped archive to open. This is either a file-like object\n    or a string containing the path to the archive.\nown_fid : bool, optional\n    Whether NpzFile should close the file handle.\n    Requires that `fid` is a file-like object.\n\nExamples\n--------\n>>> import numpy as np\n>>> from tempfile import TemporaryFile\n>>> outfile = TemporaryFile()\n>>> x = np.arange(10)\n>>> y = np.sin(x)\n>>> np.savez(outfile, x=x, y=y)\n>>> _ = outfile.seek(0)\n\n>>> npz = np.load(outfile)\n>>> isinstance(npz, np.lib.npyio.NpzFile)\nTrue\n>>> npz\nNpzFile 'object' with keys: x, y\n>>> sorted(npz.files)\n['x', 'y']\n>>> npz['x']  # getitem access\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n>>> npz.f.x  # attribute lookup\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "close",
          "docstring": "Close the file."
        },
        {
          "name": "get",
          "docstring": "D.get(k,[,d]) returns D[k] if k in D, else d.  d defaults to None."
        },
        {
          "name": "items",
          "docstring": "D.items() returns a set-like object providing a view on the items"
        },
        {
          "name": "keys",
          "docstring": "D.keys() returns a set-like object providing a view on the keys"
        },
        {
          "name": "values",
          "docstring": "D.values() returns a set-like object providing a view on the values"
        }
      ]
    },
    {
      "name": "WriteWrap",
      "docstring": "Convert to bytes on bytestream inputs.\n\n        ",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "close",
          "docstring": null
        },
        {
          "name": "write",
          "docstring": null
        },
        {
          "name": "write_bytes",
          "docstring": null
        },
        {
          "name": "write_normal",
          "docstring": null
        },
        {
          "name": "first_write",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "zipfile_factory",
      "docstring": "Create a ZipFile.\n\nAllows for Zip64, and the `file` argument can accept file, str, or\npathlib.Path objects. `args` and `kwargs` are passed to the zipfile.ZipFile\nconstructor."
    },
    {
      "name": "load",
      "docstring": "Load arrays or pickled objects from ``.npy``, ``.npz`` or pickled files.\n\n.. warning:: Loading files that contain object arrays uses the ``pickle``\n             module, which is not secure against erroneous or maliciously\n             constructed data. Consider passing ``allow_pickle=False`` to\n             load data that is known not to contain object arrays for the\n             safer handling of untrusted sources.\n\nParameters\n----------\nfile : file-like object, string, or pathlib.Path\n    The file to read. File-like objects must support the\n    ``seek()`` and ``read()`` methods and must always\n    be opened in binary mode.  Pickled files require that the\n    file-like object support the ``readline()`` method as well.\nmmap_mode : {None, 'r+', 'r', 'w+', 'c'}, optional\n    If not None, then memory-map the file, using the given mode (see\n    `numpy.memmap` for a detailed description of the modes).  A\n    memory-mapped array is kept on disk. However, it can be accessed\n    and sliced like any ndarray.  Memory mapping is especially useful\n    for accessing small fragments of large files without reading the\n    entire file into memory.\nallow_pickle : bool, optional\n    Allow loading pickled object arrays stored in npy files. Reasons for\n    disallowing pickles include security, as loading pickled data can\n    execute arbitrary code. If pickles are disallowed, loading object\n    arrays will fail. Default: False\nfix_imports : bool, optional\n    Only useful when loading Python 2 generated pickled files on Python 3,\n    which includes npy/npz files containing object arrays. If `fix_imports`\n    is True, pickle will try to map the old Python 2 names to the new names\n    used in Python 3.\nencoding : str, optional\n    What encoding to use when reading Python 2 strings. Only useful when\n    loading Python 2 generated pickled files in Python 3, which includes\n    npy/npz files containing object arrays. Values other than 'latin1',\n    'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\n    data. Default: 'ASCII'\nmax_header_size : int, optional\n    Maximum allowed size of the header.  Large headers may not be safe\n    to load securely and thus require explicitly passing a larger value.\n    See :py:func:`ast.literal_eval()` for details.\n    This option is ignored when `allow_pickle` is passed.  In that case\n    the file is by definition trusted and the limit is unnecessary.\n\nReturns\n-------\nresult : array, tuple, dict, etc.\n    Data stored in the file. For ``.npz`` files, the returned instance\n    of NpzFile class must be closed to avoid leaking file descriptors.\n\nRaises\n------\nOSError\n    If the input file does not exist or cannot be read.\nUnpicklingError\n    If ``allow_pickle=True``, but the file cannot be loaded as a pickle.\nValueError\n    The file contains an object array, but ``allow_pickle=False`` given.\nEOFError\n    When calling ``np.load`` multiple times on the same file handle,\n    if all data has already been read\n\nSee Also\n--------\nsave, savez, savez_compressed, loadtxt\nmemmap : Create a memory-map to an array stored in a file on disk.\nlib.format.open_memmap : Create or load a memory-mapped ``.npy`` file.\n\nNotes\n-----\n- If the file contains pickle data, then whatever object is stored\n  in the pickle is returned.\n- If the file is a ``.npy`` file, then a single array is returned.\n- If the file is a ``.npz`` file, then a dictionary-like object is\n  returned, containing ``{filename: array}`` key-value pairs, one for\n  each file in the archive.\n- If the file is a ``.npz`` file, the returned value supports the\n  context manager protocol in a similar fashion to the open function::\n\n    with load('foo.npz') as data:\n        a = data['a']\n\n  The underlying file descriptor is closed when exiting the 'with'\n  block.\n\nExamples\n--------\n>>> import numpy as np\n\nStore data to disk, and load it again:\n\n>>> np.save('/tmp/123', np.array([[1, 2, 3], [4, 5, 6]]))\n>>> np.load('/tmp/123.npy')\narray([[1, 2, 3],\n       [4, 5, 6]])\n\nStore compressed data to disk, and load it again:\n\n>>> a=np.array([[1, 2, 3], [4, 5, 6]])\n>>> b=np.array([1, 2])\n>>> np.savez('/tmp/123.npz', a=a, b=b)\n>>> data = np.load('/tmp/123.npz')\n>>> data['a']\narray([[1, 2, 3],\n       [4, 5, 6]])\n>>> data['b']\narray([1, 2])\n>>> data.close()\n\nMem-map the stored array, and then access the second row\ndirectly from disk:\n\n>>> X = np.load('/tmp/123.npy', mmap_mode='r')\n>>> X[1, :]\nmemmap([4, 5, 6])"
    },
    {
      "name": "save",
      "docstring": "Save an array to a binary file in NumPy ``.npy`` format.\n\nParameters\n----------\nfile : file, str, or pathlib.Path\n    File or filename to which the data is saved. If file is a file-object,\n    then the filename is unchanged.  If file is a string or Path,\n    a ``.npy`` extension will be appended to the filename if it does not\n    already have one.\narr : array_like\n    Array data to be saved.\nallow_pickle : bool, optional\n    Allow saving object arrays using Python pickles. Reasons for\n    disallowing pickles include security (loading pickled data can execute\n    arbitrary code) and portability (pickled objects may not be loadable\n    on different Python installations, for example if the stored objects\n    require libraries that are not available, and not all pickled data is\n    compatible between different versions of Python).\n    Default: True\nfix_imports : bool, optional\n    The `fix_imports` flag is deprecated and has no effect.\n\n    .. deprecated:: 2.1\n        This flag is ignored since NumPy 1.17 and was only needed to\n        support loading some files in Python 2 written in Python 3.\n\nSee Also\n--------\nsavez : Save several arrays into a ``.npz`` archive\nsavetxt, load\n\nNotes\n-----\nFor a description of the ``.npy`` format, see :py:mod:`numpy.lib.format`.\n\nAny data saved to the file is appended to the end of the file.\n\nExamples\n--------\n>>> import numpy as np\n\n>>> from tempfile import TemporaryFile\n>>> outfile = TemporaryFile()\n\n>>> x = np.arange(10)\n>>> np.save(outfile, x)\n\n>>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file\n>>> np.load(outfile)\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n>>> with open('test.npy', 'wb') as f:\n...     np.save(f, np.array([1, 2]))\n...     np.save(f, np.array([1, 3]))\n>>> with open('test.npy', 'rb') as f:\n...     a = np.load(f)\n...     b = np.load(f)\n>>> print(a, b)\n# [1 2] [1 3]"
    },
    {
      "name": "savez",
      "docstring": "Save several arrays into a single file in uncompressed ``.npz`` format.\n\nProvide arrays as keyword arguments to store them under the\ncorresponding name in the output file: ``savez(fn, x=x, y=y)``.\n\nIf arrays are specified as positional arguments, i.e., ``savez(fn,\nx, y)``, their names will be `arr_0`, `arr_1`, etc.\n\nParameters\n----------\nfile : file, str, or pathlib.Path\n    Either the filename (string) or an open file (file-like object)\n    where the data will be saved. If file is a string or a Path, the\n    ``.npz`` extension will be appended to the filename if it is not\n    already there.\nargs : Arguments, optional\n    Arrays to save to the file. Please use keyword arguments (see\n    `kwds` below) to assign names to arrays.  Arrays specified as\n    args will be named \"arr_0\", \"arr_1\", and so on.\nallow_pickle : bool, optional\n    Allow saving object arrays using Python pickles. Reasons for\n    disallowing pickles include security (loading pickled data can execute\n    arbitrary code) and portability (pickled objects may not be loadable\n    on different Python installations, for example if the stored objects\n    require libraries that are not available, and not all pickled data is\n    compatible between different versions of Python).\n    Default: True\nkwds : Keyword arguments, optional\n    Arrays to save to the file. Each array will be saved to the\n    output file with its corresponding keyword name.\n\nReturns\n-------\nNone\n\nSee Also\n--------\nsave : Save a single array to a binary file in NumPy format.\nsavetxt : Save an array to a file as plain text.\nsavez_compressed : Save several arrays into a compressed ``.npz`` archive\n\nNotes\n-----\nThe ``.npz`` file format is a zipped archive of files named after the\nvariables they contain.  The archive is not compressed and each file\nin the archive contains one variable in ``.npy`` format. For a\ndescription of the ``.npy`` format, see :py:mod:`numpy.lib.format`.\n\nWhen opening the saved ``.npz`` file with `load` a `~lib.npyio.NpzFile`\nobject is returned. This is a dictionary-like object which can be queried\nfor its list of arrays (with the ``.files`` attribute), and for the arrays\nthemselves.\n\nKeys passed in `kwds` are used as filenames inside the ZIP archive.\nTherefore, keys should be valid filenames; e.g., avoid keys that begin with\n``/`` or contain ``.``.\n\nWhen naming variables with keyword arguments, it is not possible to name a\nvariable ``file``, as this would cause the ``file`` argument to be defined\ntwice in the call to ``savez``.\n\nExamples\n--------\n>>> import numpy as np\n>>> from tempfile import TemporaryFile\n>>> outfile = TemporaryFile()\n>>> x = np.arange(10)\n>>> y = np.sin(x)\n\nUsing `savez` with \\*args, the arrays are saved with default names.\n\n>>> np.savez(outfile, x, y)\n>>> _ = outfile.seek(0) # Only needed to simulate closing & reopening file\n>>> npzfile = np.load(outfile)\n>>> npzfile.files\n['arr_0', 'arr_1']\n>>> npzfile['arr_0']\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nUsing `savez` with \\**kwds, the arrays are saved with the keyword names.\n\n>>> outfile = TemporaryFile()\n>>> np.savez(outfile, x=x, y=y)\n>>> _ = outfile.seek(0)\n>>> npzfile = np.load(outfile)\n>>> sorted(npzfile.files)\n['x', 'y']\n>>> npzfile['x']\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])"
    },
    {
      "name": "savez_compressed",
      "docstring": "Save several arrays into a single file in compressed ``.npz`` format.\n\nProvide arrays as keyword arguments to store them under the\ncorresponding name in the output file: ``savez_compressed(fn, x=x, y=y)``.\n\nIf arrays are specified as positional arguments, i.e.,\n``savez_compressed(fn, x, y)``, their names will be `arr_0`, `arr_1`, etc.\n\nParameters\n----------\nfile : file, str, or pathlib.Path\n    Either the filename (string) or an open file (file-like object)\n    where the data will be saved. If file is a string or a Path, the\n    ``.npz`` extension will be appended to the filename if it is not\n    already there.\nargs : Arguments, optional\n    Arrays to save to the file. Please use keyword arguments (see\n    `kwds` below) to assign names to arrays.  Arrays specified as\n    args will be named \"arr_0\", \"arr_1\", and so on.\nallow_pickle : bool, optional\n    Allow saving object arrays using Python pickles. Reasons for\n    disallowing pickles include security (loading pickled data can execute\n    arbitrary code) and portability (pickled objects may not be loadable\n    on different Python installations, for example if the stored objects\n    require libraries that are not available, and not all pickled data is\n    compatible between different versions of Python).\n    Default: True\nkwds : Keyword arguments, optional\n    Arrays to save to the file. Each array will be saved to the\n    output file with its corresponding keyword name.\n\nReturns\n-------\nNone\n\nSee Also\n--------\nnumpy.save : Save a single array to a binary file in NumPy format.\nnumpy.savetxt : Save an array to a file as plain text.\nnumpy.savez : Save several arrays into an uncompressed ``.npz`` file format\nnumpy.load : Load the files created by savez_compressed.\n\nNotes\n-----\nThe ``.npz`` file format is a zipped archive of files named after the\nvariables they contain.  The archive is compressed with\n``zipfile.ZIP_DEFLATED`` and each file in the archive contains one variable\nin ``.npy`` format. For a description of the ``.npy`` format, see\n:py:mod:`numpy.lib.format`.\n\n\nWhen opening the saved ``.npz`` file with `load` a `~lib.npyio.NpzFile`\nobject is returned. This is a dictionary-like object which can be queried\nfor its list of arrays (with the ``.files`` attribute), and for the arrays\nthemselves.\n\nExamples\n--------\n>>> import numpy as np\n>>> test_array = np.random.rand(3, 2)\n>>> test_vector = np.random.rand(4)\n>>> np.savez_compressed('/tmp/123', a=test_array, b=test_vector)\n>>> loaded = np.load('/tmp/123.npz')\n>>> print(np.array_equal(test_array, loaded['a']))\nTrue\n>>> print(np.array_equal(test_vector, loaded['b']))\nTrue"
    },
    {
      "name": "loadtxt",
      "docstring": "Load data from a text file.\n\nParameters\n----------\nfname : file, str, pathlib.Path, list of str, generator\n    File, filename, list, or generator to read.  If the filename\n    extension is ``.gz`` or ``.bz2``, the file is first decompressed. Note\n    that generators must return bytes or strings. The strings\n    in a list or produced by a generator are treated as lines.\ndtype : data-type, optional\n    Data-type of the resulting array; default: float.  If this is a\n    structured data-type, the resulting array will be 1-dimensional, and\n    each row will be interpreted as an element of the array.  In this\n    case, the number of columns used must match the number of fields in\n    the data-type.\ncomments : str or sequence of str or None, optional\n    The characters or list of characters used to indicate the start of a\n    comment. None implies no comments. For backwards compatibility, byte\n    strings will be decoded as 'latin1'. The default is '#'.\ndelimiter : str, optional\n    The character used to separate the values. For backwards compatibility,\n    byte strings will be decoded as 'latin1'. The default is whitespace.\n\n    .. versionchanged:: 1.23.0\n       Only single character delimiters are supported. Newline characters\n       cannot be used as the delimiter.\n\nconverters : dict or callable, optional\n    Converter functions to customize value parsing. If `converters` is\n    callable, the function is applied to all columns, else it must be a\n    dict that maps column number to a parser function.\n    See examples for further details.\n    Default: None.\n\n    .. versionchanged:: 1.23.0\n       The ability to pass a single callable to be applied to all columns\n       was added.\n\nskiprows : int, optional\n    Skip the first `skiprows` lines, including comments; default: 0.\nusecols : int or sequence, optional\n    Which columns to read, with 0 being the first. For example,\n    ``usecols = (1,4,5)`` will extract the 2nd, 5th and 6th columns.\n    The default, None, results in all columns being read.\nunpack : bool, optional\n    If True, the returned array is transposed, so that arguments may be\n    unpacked using ``x, y, z = loadtxt(...)``.  When used with a\n    structured data-type, arrays are returned for each field.\n    Default is False.\nndmin : int, optional\n    The returned array will have at least `ndmin` dimensions.\n    Otherwise mono-dimensional axes will be squeezed.\n    Legal values: 0 (default), 1 or 2.\nencoding : str, optional\n    Encoding used to decode the inputfile. Does not apply to input streams.\n    The special value 'bytes' enables backward compatibility workarounds\n    that ensures you receive byte arrays as results if possible and passes\n    'latin1' encoded strings to converters. Override this value to receive\n    unicode arrays and pass strings as input to converters.  If set to None\n    the system default is used. The default value is 'bytes'.\n\n    .. versionchanged:: 2.0\n        Before NumPy 2, the default was ``'bytes'`` for Python 2\n        compatibility. The default is now ``None``.\n\nmax_rows : int, optional\n    Read `max_rows` rows of content after `skiprows` lines. The default is\n    to read all the rows. Note that empty rows containing no data such as\n    empty lines and comment lines are not counted towards `max_rows`,\n    while such lines are counted in `skiprows`.\n\n    .. versionchanged:: 1.23.0\n        Lines containing no data, including comment lines (e.g., lines\n        starting with '#' or as specified via `comments`) are not counted\n        towards `max_rows`.\nquotechar : unicode character or None, optional\n    The character used to denote the start and end of a quoted item.\n    Occurrences of the delimiter or comment characters are ignored within\n    a quoted item. The default value is ``quotechar=None``, which means\n    quoting support is disabled.\n\n    If two consecutive instances of `quotechar` are found within a quoted\n    field, the first is treated as an escape character. See examples.\n\n    .. versionadded:: 1.23.0\n${ARRAY_FUNCTION_LIKE}\n\n    .. versionadded:: 1.20.0\n\nReturns\n-------\nout : ndarray\n    Data read from the text file.\n\nSee Also\n--------\nload, fromstring, fromregex\ngenfromtxt : Load data with missing values handled as specified.\nscipy.io.loadmat : reads MATLAB data files\n\nNotes\n-----\nThis function aims to be a fast reader for simply formatted files.  The\n`genfromtxt` function provides more sophisticated handling of, e.g.,\nlines with missing values.\n\nEach row in the input text file must have the same number of values to be\nable to read all values. If all rows do not have same number of values, a\nsubset of up to n columns (where n is the least number of values present\nin all rows) can be read by specifying the columns via `usecols`.\n\nThe strings produced by the Python float.hex method can be used as\ninput for floats.\n\nExamples\n--------\n>>> import numpy as np\n>>> from io import StringIO   # StringIO behaves like a file object\n>>> c = StringIO(\"0 1\\n2 3\")\n>>> np.loadtxt(c)\narray([[0., 1.],\n       [2., 3.]])\n\n>>> d = StringIO(\"M 21 72\\nF 35 58\")\n>>> np.loadtxt(d, dtype={'names': ('gender', 'age', 'weight'),\n...                      'formats': ('S1', 'i4', 'f4')})\narray([(b'M', 21, 72.), (b'F', 35, 58.)],\n      dtype=[('gender', 'S1'), ('age', '<i4'), ('weight', '<f4')])\n\n>>> c = StringIO(\"1,0,2\\n3,0,4\")\n>>> x, y = np.loadtxt(c, delimiter=',', usecols=(0, 2), unpack=True)\n>>> x\narray([1., 3.])\n>>> y\narray([2., 4.])\n\nThe `converters` argument is used to specify functions to preprocess the\ntext prior to parsing. `converters` can be a dictionary that maps\npreprocessing functions to each column:\n\n>>> s = StringIO(\"1.618, 2.296\\n3.141, 4.669\\n\")\n>>> conv = {\n...     0: lambda x: np.floor(float(x)),  # conversion fn for column 0\n...     1: lambda x: np.ceil(float(x)),  # conversion fn for column 1\n... }\n>>> np.loadtxt(s, delimiter=\",\", converters=conv)\narray([[1., 3.],\n       [3., 5.]])\n\n`converters` can be a callable instead of a dictionary, in which case it\nis applied to all columns:\n\n>>> s = StringIO(\"0xDE 0xAD\\n0xC0 0xDE\")\n>>> import functools\n>>> conv = functools.partial(int, base=16)\n>>> np.loadtxt(s, converters=conv)\narray([[222., 173.],\n       [192., 222.]])\n\nThis example shows how `converters` can be used to convert a field\nwith a trailing minus sign into a negative number.\n\n>>> s = StringIO(\"10.01 31.25-\\n19.22 64.31\\n17.57- 63.94\")\n>>> def conv(fld):\n...     return -float(fld[:-1]) if fld.endswith(\"-\") else float(fld)\n...\n>>> np.loadtxt(s, converters=conv)\narray([[ 10.01, -31.25],\n       [ 19.22,  64.31],\n       [-17.57,  63.94]])\n\nUsing a callable as the converter can be particularly useful for handling\nvalues with different formatting, e.g. floats with underscores:\n\n>>> s = StringIO(\"1 2.7 100_000\")\n>>> np.loadtxt(s, converters=float)\narray([1.e+00, 2.7e+00, 1.e+05])\n\nThis idea can be extended to automatically handle values specified in\nmany different formats, such as hex values:\n\n>>> def conv(val):\n...     try:\n...         return float(val)\n...     except ValueError:\n...         return float.fromhex(val)\n>>> s = StringIO(\"1, 2.5, 3_000, 0b4, 0x1.4000000000000p+2\")\n>>> np.loadtxt(s, delimiter=\",\", converters=conv)\narray([1.0e+00, 2.5e+00, 3.0e+03, 1.8e+02, 5.0e+00])\n\nOr a format where the ``-`` sign comes after the number:\n\n>>> s = StringIO(\"10.01 31.25-\\n19.22 64.31\\n17.57- 63.94\")\n>>> conv = lambda x: -float(x[:-1]) if x.endswith(\"-\") else float(x)\n>>> np.loadtxt(s, converters=conv)\narray([[ 10.01, -31.25],\n       [ 19.22,  64.31],\n       [-17.57,  63.94]])\n\nSupport for quoted fields is enabled with the `quotechar` parameter.\nComment and delimiter characters are ignored when they appear within a\nquoted item delineated by `quotechar`:\n\n>>> s = StringIO('\"alpha, #42\", 10.0\\n\"beta, #64\", 2.0\\n')\n>>> dtype = np.dtype([(\"label\", \"U12\"), (\"value\", float)])\n>>> np.loadtxt(s, dtype=dtype, delimiter=\",\", quotechar='\"')\narray([('alpha, #42', 10.), ('beta, #64',  2.)],\n      dtype=[('label', '<U12'), ('value', '<f8')])\n\nQuoted fields can be separated by multiple whitespace characters:\n\n>>> s = StringIO('\"alpha, #42\"       10.0\\n\"beta, #64\" 2.0\\n')\n>>> dtype = np.dtype([(\"label\", \"U12\"), (\"value\", float)])\n>>> np.loadtxt(s, dtype=dtype, delimiter=None, quotechar='\"')\narray([('alpha, #42', 10.), ('beta, #64',  2.)],\n      dtype=[('label', '<U12'), ('value', '<f8')])\n\nTwo consecutive quote characters within a quoted field are treated as a\nsingle escaped character:\n\n>>> s = StringIO('\"Hello, my name is \"\"Monty\"\"!\"')\n>>> np.loadtxt(s, dtype=\"U\", delimiter=\",\", quotechar='\"')\narray('Hello, my name is \"Monty\"!', dtype='<U26')\n\nRead subset of columns when all rows do not contain equal number of values:\n\n>>> d = StringIO(\"1 2\\n2 4\\n3 9 12\\n4 16 20\")\n>>> np.loadtxt(d, usecols=(0, 1))\narray([[ 1.,  2.],\n       [ 2.,  4.],\n       [ 3.,  9.],\n       [ 4., 16.]])"
    },
    {
      "name": "savetxt",
      "docstring": "Save an array to a text file.\n\nParameters\n----------\nfname : filename, file handle or pathlib.Path\n    If the filename ends in ``.gz``, the file is automatically saved in\n    compressed gzip format.  `loadtxt` understands gzipped files\n    transparently.\nX : 1D or 2D array_like\n    Data to be saved to a text file.\nfmt : str or sequence of strs, optional\n    A single format (%10.5f), a sequence of formats, or a\n    multi-format string, e.g. 'Iteration %d -- %10.5f', in which\n    case `delimiter` is ignored. For complex `X`, the legal options\n    for `fmt` are:\n\n    * a single specifier, ``fmt='%.4e'``, resulting in numbers formatted\n      like ``' (%s+%sj)' % (fmt, fmt)``\n    * a full string specifying every real and imaginary part, e.g.\n      ``' %.4e %+.4ej %.4e %+.4ej %.4e %+.4ej'`` for 3 columns\n    * a list of specifiers, one per column - in this case, the real\n      and imaginary part must have separate specifiers,\n      e.g. ``['%.3e + %.3ej', '(%.15e%+.15ej)']`` for 2 columns\ndelimiter : str, optional\n    String or character separating columns.\nnewline : str, optional\n    String or character separating lines.\nheader : str, optional\n    String that will be written at the beginning of the file.\nfooter : str, optional\n    String that will be written at the end of the file.\ncomments : str, optional\n    String that will be prepended to the ``header`` and ``footer`` strings,\n    to mark them as comments. Default: '# ',  as expected by e.g.\n    ``numpy.loadtxt``.\nencoding : {None, str}, optional\n    Encoding used to encode the outputfile. Does not apply to output\n    streams. If the encoding is something other than 'bytes' or 'latin1'\n    you will not be able to load the file in NumPy versions < 1.14. Default\n    is 'latin1'.\n\nSee Also\n--------\nsave : Save an array to a binary file in NumPy ``.npy`` format\nsavez : Save several arrays into an uncompressed ``.npz`` archive\nsavez_compressed : Save several arrays into a compressed ``.npz`` archive\n\nNotes\n-----\nFurther explanation of the `fmt` parameter\n(``%[flag]width[.precision]specifier``):\n\nflags:\n    ``-`` : left justify\n\n    ``+`` : Forces to precede result with + or -.\n\n    ``0`` : Left pad the number with zeros instead of space (see width).\n\nwidth:\n    Minimum number of characters to be printed. The value is not truncated\n    if it has more characters.\n\nprecision:\n    - For integer specifiers (eg. ``d,i,o,x``), the minimum number of\n      digits.\n    - For ``e, E`` and ``f`` specifiers, the number of digits to print\n      after the decimal point.\n    - For ``g`` and ``G``, the maximum number of significant digits.\n    - For ``s``, the maximum number of characters.\n\nspecifiers:\n    ``c`` : character\n\n    ``d`` or ``i`` : signed decimal integer\n\n    ``e`` or ``E`` : scientific notation with ``e`` or ``E``.\n\n    ``f`` : decimal floating point\n\n    ``g,G`` : use the shorter of ``e,E`` or ``f``\n\n    ``o`` : signed octal\n\n    ``s`` : string of characters\n\n    ``u`` : unsigned decimal integer\n\n    ``x,X`` : unsigned hexadecimal integer\n\nThis explanation of ``fmt`` is not complete, for an exhaustive\nspecification see [1]_.\n\nReferences\n----------\n.. [1] `Format Specification Mini-Language\n       <https://docs.python.org/library/string.html#format-specification-mini-language>`_,\n       Python Documentation.\n\nExamples\n--------\n>>> import numpy as np\n>>> x = y = z = np.arange(0.0,5.0,1.0)\n>>> np.savetxt('test.out', x, delimiter=',')   # X is an array\n>>> np.savetxt('test.out', (x,y,z))   # x,y,z equal sized 1D arrays\n>>> np.savetxt('test.out', x, fmt='%1.4e')   # use exponential notation"
    },
    {
      "name": "fromregex",
      "docstring": "Construct an array from a text file, using regular expression parsing.\n\nThe returned array is always a structured array, and is constructed from\nall matches of the regular expression in the file. Groups in the regular\nexpression are converted to fields of the structured array.\n\nParameters\n----------\nfile : file, str, or pathlib.Path\n    Filename or file object to read.\n\n    .. versionchanged:: 1.22.0\n        Now accepts `os.PathLike` implementations.\n\nregexp : str or regexp\n    Regular expression used to parse the file.\n    Groups in the regular expression correspond to fields in the dtype.\ndtype : dtype or list of dtypes\n    Dtype for the structured array; must be a structured datatype.\nencoding : str, optional\n    Encoding used to decode the inputfile. Does not apply to input streams.\n\nReturns\n-------\noutput : ndarray\n    The output array, containing the part of the content of `file` that\n    was matched by `regexp`. `output` is always a structured array.\n\nRaises\n------\nTypeError\n    When `dtype` is not a valid dtype for a structured array.\n\nSee Also\n--------\nfromstring, loadtxt\n\nNotes\n-----\nDtypes for structured arrays can be specified in several forms, but all\nforms specify at least the data type and field name. For details see\n`basics.rec`.\n\nExamples\n--------\n>>> import numpy as np\n>>> from io import StringIO\n>>> text = StringIO(\"1312 foo\\n1534  bar\\n444   qux\")\n\n>>> regexp = r\"(\\d+)\\s+(...)\"  # match [digits, whitespace, anything]\n>>> output = np.fromregex(text, regexp,\n...                       [('num', np.int64), ('key', 'S3')])\n>>> output\narray([(1312, b'foo'), (1534, b'bar'), ( 444, b'qux')],\n      dtype=[('num', '<i8'), ('key', 'S3')])\n>>> output['num']\narray([1312, 1534,  444])"
    },
    {
      "name": "genfromtxt",
      "docstring": "Load data from a text file, with missing values handled as specified.\n\nEach line past the first `skip_header` lines is split at the `delimiter`\ncharacter, and characters following the `comments` character are discarded.\n\nParameters\n----------\nfname : file, str, pathlib.Path, list of str, generator\n    File, filename, list, or generator to read.  If the filename\n    extension is ``.gz`` or ``.bz2``, the file is first decompressed. Note\n    that generators must return bytes or strings. The strings\n    in a list or produced by a generator are treated as lines.\ndtype : dtype, optional\n    Data type of the resulting array.\n    If None, the dtypes will be determined by the contents of each\n    column, individually.\ncomments : str, optional\n    The character used to indicate the start of a comment.\n    All the characters occurring on a line after a comment are discarded.\ndelimiter : str, int, or sequence, optional\n    The string used to separate values.  By default, any consecutive\n    whitespaces act as delimiter.  An integer or sequence of integers\n    can also be provided as width(s) of each field.\nskiprows : int, optional\n    `skiprows` was removed in numpy 1.10. Please use `skip_header` instead.\nskip_header : int, optional\n    The number of lines to skip at the beginning of the file.\nskip_footer : int, optional\n    The number of lines to skip at the end of the file.\nconverters : variable, optional\n    The set of functions that convert the data of a column to a value.\n    The converters can also be used to provide a default value\n    for missing data: ``converters = {3: lambda s: float(s or 0)}``.\nmissing : variable, optional\n    `missing` was removed in numpy 1.10. Please use `missing_values`\n    instead.\nmissing_values : variable, optional\n    The set of strings corresponding to missing data.\nfilling_values : variable, optional\n    The set of values to be used as default when the data are missing.\nusecols : sequence, optional\n    Which columns to read, with 0 being the first.  For example,\n    ``usecols = (1, 4, 5)`` will extract the 2nd, 5th and 6th columns.\nnames : {None, True, str, sequence}, optional\n    If `names` is True, the field names are read from the first line after\n    the first `skip_header` lines. This line can optionally be preceded\n    by a comment delimiter. Any content before the comment delimiter is\n    discarded. If `names` is a sequence or a single-string of\n    comma-separated names, the names will be used to define the field\n    names in a structured dtype. If `names` is None, the names of the\n    dtype fields will be used, if any.\nexcludelist : sequence, optional\n    A list of names to exclude. This list is appended to the default list\n    ['return','file','print']. Excluded names are appended with an\n    underscore: for example, `file` would become `file_`.\ndeletechars : str, optional\n    A string combining invalid characters that must be deleted from the\n    names.\ndefaultfmt : str, optional\n    A format used to define default field names, such as \"f%i\" or \"f_%02i\".\nautostrip : bool, optional\n    Whether to automatically strip white spaces from the variables.\nreplace_space : char, optional\n    Character(s) used in replacement of white spaces in the variable\n    names. By default, use a '_'.\ncase_sensitive : {True, False, 'upper', 'lower'}, optional\n    If True, field names are case sensitive.\n    If False or 'upper', field names are converted to upper case.\n    If 'lower', field names are converted to lower case.\nunpack : bool, optional\n    If True, the returned array is transposed, so that arguments may be\n    unpacked using ``x, y, z = genfromtxt(...)``.  When used with a\n    structured data-type, arrays are returned for each field.\n    Default is False.\nusemask : bool, optional\n    If True, return a masked array.\n    If False, return a regular array.\nloose : bool, optional\n    If True, do not raise errors for invalid values.\ninvalid_raise : bool, optional\n    If True, an exception is raised if an inconsistency is detected in the\n    number of columns.\n    If False, a warning is emitted and the offending lines are skipped.\nmax_rows : int,  optional\n    The maximum number of rows to read. Must not be used with skip_footer\n    at the same time.  If given, the value must be at least 1. Default is\n    to read the entire file.\nencoding : str, optional\n    Encoding used to decode the inputfile. Does not apply when `fname`\n    is a file object. The special value 'bytes' enables backward\n    compatibility workarounds that ensure that you receive byte arrays\n    when possible and passes latin1 encoded strings to converters.\n    Override this value to receive unicode arrays and pass strings\n    as input to converters.  If set to None the system default is used.\n    The default value is 'bytes'.\n\n    .. versionchanged:: 2.0\n        Before NumPy 2, the default was ``'bytes'`` for Python 2\n        compatibility. The default is now ``None``.\n\nndmin : int, optional\n    Same parameter as `loadtxt`\n\n    .. versionadded:: 1.23.0\n${ARRAY_FUNCTION_LIKE}\n\n    .. versionadded:: 1.20.0\n\nReturns\n-------\nout : ndarray\n    Data read from the text file. If `usemask` is True, this is a\n    masked array.\n\nSee Also\n--------\nnumpy.loadtxt : equivalent function when no data is missing.\n\nNotes\n-----\n* When spaces are used as delimiters, or when no delimiter has been given\n  as input, there should not be any missing data between two fields.\n* When variables are named (either by a flexible dtype or with a `names`\n  sequence), there must not be any header in the file (else a ValueError\n  exception is raised).\n* Individual values are not stripped of spaces by default.\n  When using a custom converter, make sure the function does remove spaces.\n* Custom converters may receive unexpected values due to dtype\n  discovery.\n\nReferences\n----------\n.. [1] NumPy User Guide, section `I/O with NumPy\n       <https://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html>`_.\n\nExamples\n--------\n>>> from io import StringIO\n>>> import numpy as np\n\nComma delimited file with mixed dtype\n\n>>> s = StringIO(\"1,1.3,abcde\")\n>>> data = np.genfromtxt(s, dtype=[('myint','i8'),('myfloat','f8'),\n... ('mystring','S5')], delimiter=\",\")\n>>> data\narray((1, 1.3, b'abcde'),\n      dtype=[('myint', '<i8'), ('myfloat', '<f8'), ('mystring', 'S5')])\n\nUsing dtype = None\n\n>>> _ = s.seek(0) # needed for StringIO example only\n>>> data = np.genfromtxt(s, dtype=None,\n... names = ['myint','myfloat','mystring'], delimiter=\",\")\n>>> data\narray((1, 1.3, 'abcde'),\n      dtype=[('myint', '<i8'), ('myfloat', '<f8'), ('mystring', '<U5')])\n\nSpecifying dtype and names\n\n>>> _ = s.seek(0)\n>>> data = np.genfromtxt(s, dtype=\"i8,f8,S5\",\n... names=['myint','myfloat','mystring'], delimiter=\",\")\n>>> data\narray((1, 1.3, b'abcde'),\n      dtype=[('myint', '<i8'), ('myfloat', '<f8'), ('mystring', 'S5')])\n\nAn example with fixed-width columns\n\n>>> s = StringIO(\"11.3abcde\")\n>>> data = np.genfromtxt(s, dtype=None, names=['intvar','fltvar','strvar'],\n...     delimiter=[1,3,5])\n>>> data\narray((1, 1.3, 'abcde'),\n      dtype=[('intvar', '<i8'), ('fltvar', '<f8'), ('strvar', '<U5')])\n\nAn example to show comments\n\n>>> f = StringIO('''\n... text,# of chars\n... hello world,11\n... numpy,5''')\n>>> np.genfromtxt(f, dtype='S12,S12', delimiter=',')\narray([(b'text', b''), (b'hello world', b'11'), (b'numpy', b'5')],\n  dtype=[('f0', 'S12'), ('f1', 'S12')])"
    },
    {
      "name": "recfromtxt",
      "docstring": "Load ASCII data from a file and return it in a record array.\n\nIf ``usemask=False`` a standard `recarray` is returned,\nif ``usemask=True`` a MaskedRecords array is returned.\n\n.. deprecated:: 2.0\n    Use `numpy.genfromtxt` instead.\n\nParameters\n----------\nfname, kwargs : For a description of input parameters, see `genfromtxt`.\n\nSee Also\n--------\nnumpy.genfromtxt : generic function\n\nNotes\n-----\nBy default, `dtype` is None, which means that the data-type of the output\narray will be determined from the data."
    },
    {
      "name": "recfromcsv",
      "docstring": "Load ASCII data stored in a comma-separated file.\n\nThe returned array is a record array (if ``usemask=False``, see\n`recarray`) or a masked record array (if ``usemask=True``,\nsee `ma.mrecords.MaskedRecords`).\n\n.. deprecated:: 2.0\n    Use `numpy.genfromtxt` with comma as `delimiter` instead.\n\nParameters\n----------\nfname, kwargs : For a description of input parameters, see `genfromtxt`.\n\nSee Also\n--------\nnumpy.genfromtxt : generic function to load ASCII data.\n\nNotes\n-----\nBy default, `dtype` is None, which means that the data-type of the output\narray will be determined from the data."
    },
    {
      "name": "close",
      "docstring": "Close the file."
    },
    {
      "name": "get",
      "docstring": "D.get(k,[,d]) returns D[k] if k in D, else d.  d defaults to None."
    },
    {
      "name": "items",
      "docstring": "D.items() returns a set-like object providing a view on the items"
    },
    {
      "name": "keys",
      "docstring": "D.keys() returns a set-like object providing a view on the keys"
    },
    {
      "name": "values",
      "docstring": "D.values() returns a set-like object providing a view on the values"
    },
    {
      "name": "close",
      "docstring": null
    },
    {
      "name": "write",
      "docstring": null
    },
    {
      "name": "write_bytes",
      "docstring": null
    },
    {
      "name": "write_normal",
      "docstring": null
    },
    {
      "name": "first_write",
      "docstring": null
    },
    {
      "name": "encode_unicode_cols",
      "docstring": null
    },
    {
      "name": "tobytes_first",
      "docstring": null
    }
  ],
  "innovations": []
}