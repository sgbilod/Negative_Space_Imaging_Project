{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\quiver.py",
  "classes": [
    {
      "name": "QuiverKey",
      "docstring": "Labelled arrow for use as a quiver plot scale key.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Add a key to a quiver plot.\n\nThe positioning of the key depends on *X*, *Y*, *coordinates*, and\n*labelpos*.  If *labelpos* is 'N' or 'S', *X*, *Y* give the position of\nthe middle of the key arrow.  If *labelpos* is 'E', *X*, *Y* positions\nthe head, and if *labelpos* is 'W', *X*, *Y* positions the tail; in\neither of these two cases, *X*, *Y* is somewhere in the middle of the\narrow+label key object.\n\nParameters\n----------\nQ : `~matplotlib.quiver.Quiver`\n    A `.Quiver` object as returned by a call to `~.Axes.quiver()`.\nX, Y : float\n    The location of the key.\nU : float\n    The length of the key.\nlabel : str\n    The key label (e.g., length and units of the key).\nangle : float, default: 0\n    The angle of the key arrow, in degrees anti-clockwise from the\n    horizontal axis.\ncoordinates : {'axes', 'figure', 'data', 'inches'}, default: 'axes'\n    Coordinate system and units for *X*, *Y*: 'axes' and 'figure' are\n    normalized coordinate systems with (0, 0) in the lower left and\n    (1, 1) in the upper right; 'data' are the axes data coordinates\n    (used for the locations of the vectors in the quiver plot itself);\n    'inches' is position in the figure in inches, with (0, 0) at the\n    lower left corner.\ncolor : :mpltype:`color`\n    Overrides face and edge colors from *Q*.\nlabelpos : {'N', 'S', 'E', 'W'}\n    Position the label above, below, to the right, to the left of the\n    arrow, respectively.\nlabelsep : float, default: 0.1\n    Distance in inches between the arrow and the label.\nlabelcolor : :mpltype:`color`, default: :rc:`text.color`\n    Label color.\nfontproperties : dict, optional\n    A dictionary with keyword arguments accepted by the\n    `~matplotlib.font_manager.FontProperties` initializer:\n    *family*, *style*, *variant*, *size*, *weight*.\nzorder : float\n    The zorder of the key. The default is 0.1 above *Q*.\n**kwargs\n    Any additional keyword arguments are used to override vector\n    properties taken from *Q*."
        },
        {
          "name": "labelsep",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        },
        {
          "name": "set_figure",
          "docstring": null
        },
        {
          "name": "contains",
          "docstring": null
        }
      ]
    },
    {
      "name": "Quiver",
      "docstring": "Specialized PolyCollection for arrows.\n\nThe only API method is set_UVC(), which can be used\nto change the size, orientation, and color of the\narrows; their locations are fixed when the class is\ninstantiated.  Possibly this method will be useful\nin animations.\n\nMuch of the work in this class is done in the draw()\nmethod so that as much information as possible is available\nabout the plot.  In subsequent draw() calls, recalculation\nis limited to things that might have changed, so there\nshould be no performance penalty from putting the calculations\nin the draw() method.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "The constructor takes one required argument, an Axes\ninstance, followed by the args and kwargs described\nby the following pyplot interface documentation:\n%s"
        },
        {
          "name": "get_datalim",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        },
        {
          "name": "set_UVC",
          "docstring": null
        }
      ]
    },
    {
      "name": "Barbs",
      "docstring": "Specialized PolyCollection for barbs.\n\nThe only API method is :meth:`set_UVC`, which can be used to\nchange the size, orientation, and color of the arrows.  Locations\nare changed using the :meth:`set_offsets` collection method.\nPossibly this method will be useful in animations.\n\nThere is one internal function :meth:`_find_tails` which finds\nexactly what should be put on the barb given the vector magnitude.\nFrom there :meth:`_make_barbs` is used to find the vertices of the\npolygon to represent the barb based on this information.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "The constructor takes one required argument, an Axes\ninstance, followed by the args and kwargs described\nby the following pyplot interface documentation:\n%(barbs_doc)s"
        },
        {
          "name": "set_UVC",
          "docstring": null
        },
        {
          "name": "set_offsets",
          "docstring": "Set the offsets for the barb polygons.  This saves the offsets passed\nin and masks them as appropriate for the existing U/V data.\n\nParameters\n----------\nxy : sequence of pairs of floats"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "labelsep",
      "docstring": null
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "set_figure",
      "docstring": null
    },
    {
      "name": "contains",
      "docstring": null
    },
    {
      "name": "get_datalim",
      "docstring": null
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "set_UVC",
      "docstring": null
    },
    {
      "name": "set_UVC",
      "docstring": null
    },
    {
      "name": "set_offsets",
      "docstring": "Set the offsets for the barb polygons.  This saves the offsets passed\nin and masks them as appropriate for the existing U/V data.\n\nParameters\n----------\nxy : sequence of pairs of floats"
    }
  ],
  "innovations": []
}