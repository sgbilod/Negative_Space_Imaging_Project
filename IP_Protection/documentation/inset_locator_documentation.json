{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\mpl_toolkits\\axes_grid1\\inset_locator.py",
  "classes": [
    {
      "name": "AnchoredLocatorBase",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        }
      ]
    },
    {
      "name": "AnchoredSizeLocator",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_bbox",
          "docstring": null
        }
      ]
    },
    {
      "name": "AnchoredZoomLocator",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_bbox",
          "docstring": null
        }
      ]
    },
    {
      "name": "BboxPatch",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": "Patch showing the shape bounded by a Bbox.\n\nParameters\n----------\nbbox : `~matplotlib.transforms.Bbox`\n    Bbox to use for the extents of this patch.\n\n**kwargs\n    Patch properties. Valid arguments include:\n\n    %(Patch:kwdoc)s"
        },
        {
          "name": "get_path",
          "docstring": null
        }
      ]
    },
    {
      "name": "BboxConnector",
      "docstring": null,
      "methods": [
        {
          "name": "get_bbox_edge_pos",
          "docstring": "Return the ``(x, y)`` coordinates of corner *loc* of *bbox*; parameters\nbehave as documented for the `.BboxConnector` constructor."
        },
        {
          "name": "connect_bbox",
          "docstring": "Construct a `.Path` connecting corner *loc1* of *bbox1* to corner\n*loc2* of *bbox2*, where parameters behave as documented as for the\n`.BboxConnector` constructor."
        },
        {
          "name": "__init__",
          "docstring": "Connect two bboxes with a straight line.\n\nParameters\n----------\nbbox1, bbox2 : `~matplotlib.transforms.Bbox`\n    Bounding boxes to connect.\n\nloc1, loc2 : {1, 2, 3, 4}\n    Corner of *bbox1* and *bbox2* to draw the line. Valid values are::\n\n        'upper right'  : 1,\n        'upper left'   : 2,\n        'lower left'   : 3,\n        'lower right'  : 4\n\n    *loc2* is optional and defaults to *loc1*.\n\n**kwargs\n    Patch properties for the line drawn. Valid arguments include:\n\n    %(Patch:kwdoc)s"
        },
        {
          "name": "get_path",
          "docstring": null
        }
      ]
    },
    {
      "name": "BboxConnectorPatch",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": "Connect two bboxes with a quadrilateral.\n\nThe quadrilateral is specified by two lines that start and end at\ncorners of the bboxes. The four sides of the quadrilateral are defined\nby the two lines given, the line between the two corners specified in\n*bbox1* and the line between the two corners specified in *bbox2*.\n\nParameters\n----------\nbbox1, bbox2 : `~matplotlib.transforms.Bbox`\n    Bounding boxes to connect.\n\nloc1a, loc2a, loc1b, loc2b : {1, 2, 3, 4}\n    The first line connects corners *loc1a* of *bbox1* and *loc2a* of\n    *bbox2*; the second line connects corners *loc1b* of *bbox1* and\n    *loc2b* of *bbox2*.  Valid values are::\n\n        'upper right'  : 1,\n        'upper left'   : 2,\n        'lower left'   : 3,\n        'lower right'  : 4\n\n**kwargs\n    Patch properties for the line drawn:\n\n    %(Patch:kwdoc)s"
        },
        {
          "name": "get_path",
          "docstring": null
        }
      ]
    },
    {
      "name": "_TransformedBboxWithCallback",
      "docstring": "Variant of `.TransformBbox` which calls *callback* before returning points.\n\nUsed by `.mark_inset` to unstale the parent axes' viewlim as needed.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_points",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "inset_axes",
      "docstring": "Create an inset axes with a given width and height.\n\nBoth sizes used can be specified either in inches or percentage.\nFor example,::\n\n    inset_axes(parent_axes, width='40%%', height='30%%', loc='lower left')\n\ncreates in inset axes in the lower left corner of *parent_axes* which spans\nover 30%% in height and 40%% in width of the *parent_axes*. Since the usage\nof `.inset_axes` may become slightly tricky when exceeding such standard\ncases, it is recommended to read :doc:`the examples\n</gallery/axes_grid1/inset_locator_demo>`.\n\nNotes\n-----\nThe meaning of *bbox_to_anchor* and *bbox_to_transform* is interpreted\ndifferently from that of legend. The value of bbox_to_anchor\n(or the return value of its get_points method; the default is\n*parent_axes.bbox*) is transformed by the bbox_transform (the default\nis Identity transform) and then interpreted as points in the pixel\ncoordinate (which is dpi dependent).\n\nThus, following three calls are identical and creates an inset axes\nwith respect to the *parent_axes*::\n\n   axins = inset_axes(parent_axes, \"30%%\", \"40%%\")\n   axins = inset_axes(parent_axes, \"30%%\", \"40%%\",\n                      bbox_to_anchor=parent_axes.bbox)\n   axins = inset_axes(parent_axes, \"30%%\", \"40%%\",\n                      bbox_to_anchor=(0, 0, 1, 1),\n                      bbox_transform=parent_axes.transAxes)\n\nParameters\n----------\nparent_axes : `matplotlib.axes.Axes`\n    Axes to place the inset axes.\n\nwidth, height : float or str\n    Size of the inset axes to create. If a float is provided, it is\n    the size in inches, e.g. *width=1.3*. If a string is provided, it is\n    the size in relative units, e.g. *width='40%%'*. By default, i.e. if\n    neither *bbox_to_anchor* nor *bbox_transform* are specified, those\n    are relative to the parent_axes. Otherwise, they are to be understood\n    relative to the bounding box provided via *bbox_to_anchor*.\n\nloc : str, default: 'upper right'\n    Location to place the inset axes.  Valid locations are\n    'upper left', 'upper center', 'upper right',\n    'center left', 'center', 'center right',\n    'lower left', 'lower center', 'lower right'.\n    For backward compatibility, numeric values are accepted as well.\n    See the parameter *loc* of `.Legend` for details.\n\nbbox_to_anchor : tuple or `~matplotlib.transforms.BboxBase`, optional\n    Bbox that the inset axes will be anchored to. If None,\n    a tuple of (0, 0, 1, 1) is used if *bbox_transform* is set\n    to *parent_axes.transAxes* or *parent_axes.figure.transFigure*.\n    Otherwise, *parent_axes.bbox* is used. If a tuple, can be either\n    [left, bottom, width, height], or [left, bottom].\n    If the kwargs *width* and/or *height* are specified in relative units,\n    the 2-tuple [left, bottom] cannot be used. Note that,\n    unless *bbox_transform* is set, the units of the bounding box\n    are interpreted in the pixel coordinate. When using *bbox_to_anchor*\n    with tuple, it almost always makes sense to also specify\n    a *bbox_transform*. This might often be the axes transform\n    *parent_axes.transAxes*.\n\nbbox_transform : `~matplotlib.transforms.Transform`, optional\n    Transformation for the bbox that contains the inset axes.\n    If None, a `.transforms.IdentityTransform` is used. The value\n    of *bbox_to_anchor* (or the return value of its get_points method)\n    is transformed by the *bbox_transform* and then interpreted\n    as points in the pixel coordinate (which is dpi dependent).\n    You may provide *bbox_to_anchor* in some normalized coordinate,\n    and give an appropriate transform (e.g., *parent_axes.transAxes*).\n\naxes_class : `~matplotlib.axes.Axes` type, default: `.HostAxes`\n    The type of the newly created inset axes.\n\naxes_kwargs : dict, optional\n    Keyword arguments to pass to the constructor of the inset axes.\n    Valid arguments include:\n\n    %(Axes:kwdoc)s\n\nborderpad : float, default: 0.5\n    Padding between inset axes and the bbox_to_anchor.\n    The units are axes font size, i.e. for a default font size of 10 points\n    *borderpad = 0.5* is equivalent to a padding of 5 points.\n\nReturns\n-------\ninset_axes : *axes_class*\n    Inset axes object created."
    },
    {
      "name": "zoomed_inset_axes",
      "docstring": "Create an anchored inset axes by scaling a parent axes. For usage, also see\n:doc:`the examples </gallery/axes_grid1/inset_locator_demo2>`.\n\nParameters\n----------\nparent_axes : `~matplotlib.axes.Axes`\n    Axes to place the inset axes.\n\nzoom : float\n    Scaling factor of the data axes. *zoom* > 1 will enlarge the\n    coordinates (i.e., \"zoomed in\"), while *zoom* < 1 will shrink the\n    coordinates (i.e., \"zoomed out\").\n\nloc : str, default: 'upper right'\n    Location to place the inset axes.  Valid locations are\n    'upper left', 'upper center', 'upper right',\n    'center left', 'center', 'center right',\n    'lower left', 'lower center', 'lower right'.\n    For backward compatibility, numeric values are accepted as well.\n    See the parameter *loc* of `.Legend` for details.\n\nbbox_to_anchor : tuple or `~matplotlib.transforms.BboxBase`, optional\n    Bbox that the inset axes will be anchored to. If None,\n    *parent_axes.bbox* is used. If a tuple, can be either\n    [left, bottom, width, height], or [left, bottom].\n    If the kwargs *width* and/or *height* are specified in relative units,\n    the 2-tuple [left, bottom] cannot be used. Note that\n    the units of the bounding box are determined through the transform\n    in use. When using *bbox_to_anchor* it almost always makes sense to\n    also specify a *bbox_transform*. This might often be the axes transform\n    *parent_axes.transAxes*.\n\nbbox_transform : `~matplotlib.transforms.Transform`, optional\n    Transformation for the bbox that contains the inset axes.\n    If None, a `.transforms.IdentityTransform` is used (i.e. pixel\n    coordinates). This is useful when not providing any argument to\n    *bbox_to_anchor*. When using *bbox_to_anchor* it almost always makes\n    sense to also specify a *bbox_transform*. This might often be the\n    axes transform *parent_axes.transAxes*. Inversely, when specifying\n    the axes- or figure-transform here, be aware that not specifying\n    *bbox_to_anchor* will use *parent_axes.bbox*, the units of which are\n    in display (pixel) coordinates.\n\naxes_class : `~matplotlib.axes.Axes` type, default: `.HostAxes`\n    The type of the newly created inset axes.\n\naxes_kwargs : dict, optional\n    Keyword arguments to pass to the constructor of the inset axes.\n    Valid arguments include:\n\n    %(Axes:kwdoc)s\n\nborderpad : float, default: 0.5\n    Padding between inset axes and the bbox_to_anchor.\n    The units are axes font size, i.e. for a default font size of 10 points\n    *borderpad = 0.5* is equivalent to a padding of 5 points.\n\nReturns\n-------\ninset_axes : *axes_class*\n    Inset axes object created."
    },
    {
      "name": "mark_inset",
      "docstring": "Draw a box to mark the location of an area represented by an inset axes.\n\nThis function draws a box in *parent_axes* at the bounding box of\n*inset_axes*, and shows a connection with the inset axes by drawing lines\nat the corners, giving a \"zoomed in\" effect.\n\nParameters\n----------\nparent_axes : `~matplotlib.axes.Axes`\n    Axes which contains the area of the inset axes.\n\ninset_axes : `~matplotlib.axes.Axes`\n    The inset axes.\n\nloc1, loc2 : {1, 2, 3, 4}\n    Corners to use for connecting the inset axes and the area in the\n    parent axes.\n\n**kwargs\n    Patch properties for the lines and box drawn:\n\n    %(Patch:kwdoc)s\n\nReturns\n-------\npp : `~matplotlib.patches.Patch`\n    The patch drawn to represent the area of the inset axes.\n\np1, p2 : `~matplotlib.patches.Patch`\n    The patches connecting two corners of the inset axes and its area."
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "get_bbox",
      "docstring": null
    },
    {
      "name": "get_bbox",
      "docstring": null
    },
    {
      "name": "get_path",
      "docstring": null
    },
    {
      "name": "get_bbox_edge_pos",
      "docstring": "Return the ``(x, y)`` coordinates of corner *loc* of *bbox*; parameters\nbehave as documented for the `.BboxConnector` constructor."
    },
    {
      "name": "connect_bbox",
      "docstring": "Construct a `.Path` connecting corner *loc1* of *bbox1* to corner\n*loc2* of *bbox2*, where parameters behave as documented as for the\n`.BboxConnector` constructor."
    },
    {
      "name": "get_path",
      "docstring": null
    },
    {
      "name": "get_path",
      "docstring": null
    },
    {
      "name": "get_points",
      "docstring": null
    }
  ],
  "innovations": []
}