{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\lib\\_stride_tricks_impl.py",
  "classes": [
    {
      "name": "DummyArray",
      "docstring": "Dummy object that just exists to hang __array_interface__ dictionaries\nand possibly keep alive a reference to a base array.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "as_strided",
      "docstring": "Create a view into the array with the given shape and strides.\n\n.. warning:: This function has to be used with extreme care, see notes.\n\nParameters\n----------\nx : ndarray\n    Array to create a new.\nshape : sequence of int, optional\n    The shape of the new array. Defaults to ``x.shape``.\nstrides : sequence of int, optional\n    The strides of the new array. Defaults to ``x.strides``.\nsubok : bool, optional\n    If True, subclasses are preserved.\nwriteable : bool, optional\n    If set to False, the returned array will always be readonly.\n    Otherwise it will be writable if the original array was. It\n    is advisable to set this to False if possible (see Notes).\n\nReturns\n-------\nview : ndarray\n\nSee also\n--------\nbroadcast_to : broadcast an array to a given shape.\nreshape : reshape an array.\nlib.stride_tricks.sliding_window_view :\n    userfriendly and safe function for a creation of sliding window views.\n\nNotes\n-----\n``as_strided`` creates a view into the array given the exact strides\nand shape. This means it manipulates the internal data structure of\nndarray and, if done incorrectly, the array elements can point to\ninvalid memory and can corrupt results or crash your program.\nIt is advisable to always use the original ``x.strides`` when\ncalculating new strides to avoid reliance on a contiguous memory\nlayout.\n\nFurthermore, arrays created with this function often contain self\noverlapping memory, so that two elements are identical.\nVectorized write operations on such arrays will typically be\nunpredictable. They may even give different results for small, large,\nor transposed arrays.\n\nSince writing to these arrays has to be tested and done with great\ncare, you may want to use ``writeable=False`` to avoid accidental write\noperations.\n\nFor these reasons it is advisable to avoid ``as_strided`` when\npossible."
    },
    {
      "name": "sliding_window_view",
      "docstring": "Create a sliding window view into the array with the given window shape.\n\nAlso known as rolling or moving window, the window slides across all\ndimensions of the array and extracts subsets of the array at all window\npositions.\n\n.. versionadded:: 1.20.0\n\nParameters\n----------\nx : array_like\n    Array to create the sliding window view from.\nwindow_shape : int or tuple of int\n    Size of window over each axis that takes part in the sliding window.\n    If `axis` is not present, must have same length as the number of input\n    array dimensions. Single integers `i` are treated as if they were the\n    tuple `(i,)`.\naxis : int or tuple of int, optional\n    Axis or axes along which the sliding window is applied.\n    By default, the sliding window is applied to all axes and\n    `window_shape[i]` will refer to axis `i` of `x`.\n    If `axis` is given as a `tuple of int`, `window_shape[i]` will refer to\n    the axis `axis[i]` of `x`.\n    Single integers `i` are treated as if they were the tuple `(i,)`.\nsubok : bool, optional\n    If True, sub-classes will be passed-through, otherwise the returned\n    array will be forced to be a base-class array (default).\nwriteable : bool, optional\n    When true, allow writing to the returned view. The default is false,\n    as this should be used with caution: the returned view contains the\n    same memory location multiple times, so writing to one location will\n    cause others to change.\n\nReturns\n-------\nview : ndarray\n    Sliding window view of the array. The sliding window dimensions are\n    inserted at the end, and the original dimensions are trimmed as\n    required by the size of the sliding window.\n    That is, ``view.shape = x_shape_trimmed + window_shape``, where\n    ``x_shape_trimmed`` is ``x.shape`` with every entry reduced by one less\n    than the corresponding window size.\n\nSee Also\n--------\nlib.stride_tricks.as_strided: A lower-level and less safe routine for\n    creating arbitrary views from custom shape and strides.\nbroadcast_to: broadcast an array to a given shape.\n\nNotes\n-----\nFor many applications using a sliding window view can be convenient, but\npotentially very slow. Often specialized solutions exist, for example:\n\n- `scipy.signal.fftconvolve`\n\n- filtering functions in `scipy.ndimage`\n\n- moving window functions provided by\n  `bottleneck <https://github.com/pydata/bottleneck>`_.\n\nAs a rough estimate, a sliding window approach with an input size of `N`\nand a window size of `W` will scale as `O(N*W)` where frequently a special\nalgorithm can achieve `O(N)`. That means that the sliding window variant\nfor a window size of 100 can be a 100 times slower than a more specialized\nversion.\n\nNevertheless, for small window sizes, when no custom algorithm exists, or\nas a prototyping and developing tool, this function can be a good solution.\n\nExamples\n--------\n>>> import numpy as np\n>>> from numpy.lib.stride_tricks import sliding_window_view\n>>> x = np.arange(6)\n>>> x.shape\n(6,)\n>>> v = sliding_window_view(x, 3)\n>>> v.shape\n(4, 3)\n>>> v\narray([[0, 1, 2],\n       [1, 2, 3],\n       [2, 3, 4],\n       [3, 4, 5]])\n\nThis also works in more dimensions, e.g.\n\n>>> i, j = np.ogrid[:3, :4]\n>>> x = 10*i + j\n>>> x.shape\n(3, 4)\n>>> x\narray([[ 0,  1,  2,  3],\n       [10, 11, 12, 13],\n       [20, 21, 22, 23]])\n>>> shape = (2,2)\n>>> v = sliding_window_view(x, shape)\n>>> v.shape\n(2, 3, 2, 2)\n>>> v\narray([[[[ 0,  1],\n         [10, 11]],\n        [[ 1,  2],\n         [11, 12]],\n        [[ 2,  3],\n         [12, 13]]],\n       [[[10, 11],\n         [20, 21]],\n        [[11, 12],\n         [21, 22]],\n        [[12, 13],\n         [22, 23]]]])\n\nThe axis can be specified explicitly:\n\n>>> v = sliding_window_view(x, 3, 0)\n>>> v.shape\n(1, 4, 3)\n>>> v\narray([[[ 0, 10, 20],\n        [ 1, 11, 21],\n        [ 2, 12, 22],\n        [ 3, 13, 23]]])\n\nThe same axis can be used several times. In that case, every use reduces\nthe corresponding original dimension:\n\n>>> v = sliding_window_view(x, (2, 3), (1, 1))\n>>> v.shape\n(3, 1, 2, 3)\n>>> v\narray([[[[ 0,  1,  2],\n         [ 1,  2,  3]]],\n       [[[10, 11, 12],\n         [11, 12, 13]]],\n       [[[20, 21, 22],\n         [21, 22, 23]]]])\n\nCombining with stepped slicing (`::step`), this can be used to take sliding\nviews which skip elements:\n\n>>> x = np.arange(7)\n>>> sliding_window_view(x, 5)[:, ::2]\narray([[0, 2, 4],\n       [1, 3, 5],\n       [2, 4, 6]])\n\nor views which move by multiple elements\n\n>>> x = np.arange(7)\n>>> sliding_window_view(x, 3)[::2, :]\narray([[0, 1, 2],\n       [2, 3, 4],\n       [4, 5, 6]])\n\nA common application of `sliding_window_view` is the calculation of running\nstatistics. The simplest example is the\n`moving average <https://en.wikipedia.org/wiki/Moving_average>`_:\n\n>>> x = np.arange(6)\n>>> x.shape\n(6,)\n>>> v = sliding_window_view(x, 3)\n>>> v.shape\n(4, 3)\n>>> v\narray([[0, 1, 2],\n       [1, 2, 3],\n       [2, 3, 4],\n       [3, 4, 5]])\n>>> moving_average = v.mean(axis=-1)\n>>> moving_average\narray([1., 2., 3., 4.])\n\nNote that a sliding window approach is often **not** optimal (see Notes)."
    },
    {
      "name": "broadcast_to",
      "docstring": "Broadcast an array to a new shape.\n\nParameters\n----------\narray : array_like\n    The array to broadcast.\nshape : tuple or int\n    The shape of the desired array. A single integer ``i`` is interpreted\n    as ``(i,)``.\nsubok : bool, optional\n    If True, then sub-classes will be passed-through, otherwise\n    the returned array will be forced to be a base-class array (default).\n\nReturns\n-------\nbroadcast : array\n    A readonly view on the original array with the given shape. It is\n    typically not contiguous. Furthermore, more than one element of a\n    broadcasted array may refer to a single memory location.\n\nRaises\n------\nValueError\n    If the array is not compatible with the new shape according to NumPy's\n    broadcasting rules.\n\nSee Also\n--------\nbroadcast\nbroadcast_arrays\nbroadcast_shapes\n\nExamples\n--------\n>>> import numpy as np\n>>> x = np.array([1, 2, 3])\n>>> np.broadcast_to(x, (3, 3))\narray([[1, 2, 3],\n       [1, 2, 3],\n       [1, 2, 3]])"
    },
    {
      "name": "broadcast_shapes",
      "docstring": "Broadcast the input shapes into a single shape.\n\n:ref:`Learn more about broadcasting here <basics.broadcasting>`.\n\n.. versionadded:: 1.20.0\n\nParameters\n----------\n*args : tuples of ints, or ints\n    The shapes to be broadcast against each other.\n\nReturns\n-------\ntuple\n    Broadcasted shape.\n\nRaises\n------\nValueError\n    If the shapes are not compatible and cannot be broadcast according\n    to NumPy's broadcasting rules.\n\nSee Also\n--------\nbroadcast\nbroadcast_arrays\nbroadcast_to\n\nExamples\n--------\n>>> import numpy as np\n>>> np.broadcast_shapes((1, 2), (3, 1), (3, 2))\n(3, 2)\n\n>>> np.broadcast_shapes((6, 7), (5, 6, 1), (7,), (5, 1, 7))\n(5, 6, 7)"
    },
    {
      "name": "broadcast_arrays",
      "docstring": "Broadcast any number of arrays against each other.\n\nParameters\n----------\n*args : array_likes\n    The arrays to broadcast.\n\nsubok : bool, optional\n    If True, then sub-classes will be passed-through, otherwise\n    the returned arrays will be forced to be a base-class array (default).\n\nReturns\n-------\nbroadcasted : tuple of arrays\n    These arrays are views on the original arrays.  They are typically\n    not contiguous.  Furthermore, more than one element of a\n    broadcasted array may refer to a single memory location. If you need\n    to write to the arrays, make copies first. While you can set the\n    ``writable`` flag True, writing to a single output value may end up\n    changing more than one location in the output array.\n\n    .. deprecated:: 1.17\n        The output is currently marked so that if written to, a deprecation\n        warning will be emitted. A future version will set the\n        ``writable`` flag False so writing to it will raise an error.\n\nSee Also\n--------\nbroadcast\nbroadcast_to\nbroadcast_shapes\n\nExamples\n--------\n>>> import numpy as np\n>>> x = np.array([[1,2,3]])\n>>> y = np.array([[4],[5]])\n>>> np.broadcast_arrays(x, y)\n(array([[1, 2, 3],\n        [1, 2, 3]]),\n array([[4, 4, 4],\n        [5, 5, 5]]))\n\nHere is a useful idiom for getting contiguous copies instead of\nnon-contiguous views.\n\n>>> [np.array(a) for a in np.broadcast_arrays(x, y)]\n[array([[1, 2, 3],\n        [1, 2, 3]]),\n array([[4, 4, 4],\n        [5, 5, 5]])]"
    }
  ],
  "innovations": []
}