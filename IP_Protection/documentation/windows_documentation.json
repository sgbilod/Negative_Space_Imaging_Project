{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\windows.py",
  "classes": [
    {
      "name": "Windows",
      "docstring": "`MSDN on where to store app data files <https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid>`_.\n\nMakes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `appauthor\n<platformdirs.api.PlatformDirsABC.appauthor>`, `version <platformdirs.api.PlatformDirsABC.version>`, `roaming\n<platformdirs.api.PlatformDirsABC.roaming>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n<platformdirs.api.PlatformDirsABC.ensure_exists>`.",
      "methods": [
        {
          "name": "user_data_dir",
          "docstring": ":return: data directory tied to the user, e.g.\n ``%USERPROFILE%\\AppData\\Local\\$appauthor\\$appname`` (not roaming) or\n ``%USERPROFILE%\\AppData\\Roaming\\$appauthor\\$appname`` (roaming)"
        },
        {
          "name": "site_data_dir",
          "docstring": ":return: data directory shared by users, e.g. ``C:\\ProgramData\\$appauthor\\$appname``"
        },
        {
          "name": "user_config_dir",
          "docstring": ":return: config directory tied to the user, same as `user_data_dir`"
        },
        {
          "name": "site_config_dir",
          "docstring": ":return: config directory shared by the users, same as `site_data_dir`"
        },
        {
          "name": "user_cache_dir",
          "docstring": ":return: cache directory tied to the user (if opinionated with ``Cache`` folder within ``$appname``) e.g.\n ``%USERPROFILE%\\AppData\\Local\\$appauthor\\$appname\\Cache\\$version``"
        },
        {
          "name": "site_cache_dir",
          "docstring": ":return: cache directory shared by users, e.g. ``C:\\ProgramData\\$appauthor\\$appname\\Cache\\$version``"
        },
        {
          "name": "user_state_dir",
          "docstring": ":return: state directory tied to the user, same as `user_data_dir`"
        },
        {
          "name": "user_log_dir",
          "docstring": ":return: log directory tied to the user, same as `user_data_dir` if not opinionated else ``Logs`` in it"
        },
        {
          "name": "user_documents_dir",
          "docstring": ":return: documents directory tied to the user e.g. ``%USERPROFILE%\\Documents``"
        },
        {
          "name": "user_downloads_dir",
          "docstring": ":return: downloads directory tied to the user e.g. ``%USERPROFILE%\\Downloads``"
        },
        {
          "name": "user_pictures_dir",
          "docstring": ":return: pictures directory tied to the user e.g. ``%USERPROFILE%\\Pictures``"
        },
        {
          "name": "user_videos_dir",
          "docstring": ":return: videos directory tied to the user e.g. ``%USERPROFILE%\\Videos``"
        },
        {
          "name": "user_music_dir",
          "docstring": ":return: music directory tied to the user e.g. ``%USERPROFILE%\\Music``"
        },
        {
          "name": "user_desktop_dir",
          "docstring": ":return: desktop directory tied to the user, e.g. ``%USERPROFILE%\\Desktop``"
        },
        {
          "name": "user_runtime_dir",
          "docstring": ":return: runtime directory tied to the user, e.g.\n ``%USERPROFILE%\\AppData\\Local\\Temp\\$appauthor\\$appname``"
        },
        {
          "name": "site_runtime_dir",
          "docstring": ":return: runtime directory shared by users, same as `user_runtime_dir`"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_win_folder_from_env_vars",
      "docstring": "Get folder from environment variables."
    },
    {
      "name": "get_win_folder_if_csidl_name_not_env_var",
      "docstring": "Get a folder for a CSIDL name that does not exist as an environment variable."
    },
    {
      "name": "get_win_folder_from_registry",
      "docstring": "Get folder from the registry.\n\nThis is a fallback technique at best. I'm not sure if using the registry for these guarantees us the correct answer\nfor all CSIDL_* names."
    },
    {
      "name": "get_win_folder_via_ctypes",
      "docstring": "Get folder with ctypes."
    },
    {
      "name": "user_data_dir",
      "docstring": ":return: data directory tied to the user, e.g.\n ``%USERPROFILE%\\AppData\\Local\\$appauthor\\$appname`` (not roaming) or\n ``%USERPROFILE%\\AppData\\Roaming\\$appauthor\\$appname`` (roaming)"
    },
    {
      "name": "site_data_dir",
      "docstring": ":return: data directory shared by users, e.g. ``C:\\ProgramData\\$appauthor\\$appname``"
    },
    {
      "name": "user_config_dir",
      "docstring": ":return: config directory tied to the user, same as `user_data_dir`"
    },
    {
      "name": "site_config_dir",
      "docstring": ":return: config directory shared by the users, same as `site_data_dir`"
    },
    {
      "name": "user_cache_dir",
      "docstring": ":return: cache directory tied to the user (if opinionated with ``Cache`` folder within ``$appname``) e.g.\n ``%USERPROFILE%\\AppData\\Local\\$appauthor\\$appname\\Cache\\$version``"
    },
    {
      "name": "site_cache_dir",
      "docstring": ":return: cache directory shared by users, e.g. ``C:\\ProgramData\\$appauthor\\$appname\\Cache\\$version``"
    },
    {
      "name": "user_state_dir",
      "docstring": ":return: state directory tied to the user, same as `user_data_dir`"
    },
    {
      "name": "user_log_dir",
      "docstring": ":return: log directory tied to the user, same as `user_data_dir` if not opinionated else ``Logs`` in it"
    },
    {
      "name": "user_documents_dir",
      "docstring": ":return: documents directory tied to the user e.g. ``%USERPROFILE%\\Documents``"
    },
    {
      "name": "user_downloads_dir",
      "docstring": ":return: downloads directory tied to the user e.g. ``%USERPROFILE%\\Downloads``"
    },
    {
      "name": "user_pictures_dir",
      "docstring": ":return: pictures directory tied to the user e.g. ``%USERPROFILE%\\Pictures``"
    },
    {
      "name": "user_videos_dir",
      "docstring": ":return: videos directory tied to the user e.g. ``%USERPROFILE%\\Videos``"
    },
    {
      "name": "user_music_dir",
      "docstring": ":return: music directory tied to the user e.g. ``%USERPROFILE%\\Music``"
    },
    {
      "name": "user_desktop_dir",
      "docstring": ":return: desktop directory tied to the user, e.g. ``%USERPROFILE%\\Desktop``"
    },
    {
      "name": "user_runtime_dir",
      "docstring": ":return: runtime directory tied to the user, e.g.\n ``%USERPROFILE%\\AppData\\Local\\Temp\\$appauthor\\$appname``"
    },
    {
      "name": "site_runtime_dir",
      "docstring": ":return: runtime directory shared by users, same as `user_runtime_dir`"
    }
  ],
  "innovations": []
}