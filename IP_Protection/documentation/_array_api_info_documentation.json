{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\_array_api_info.py",
  "classes": [
    {
      "name": "__array_namespace_info__",
      "docstring": "Get the array API inspection namespace for NumPy.\n\nThe array API inspection namespace defines the following functions:\n\n- capabilities()\n- default_device()\n- default_dtypes()\n- dtypes()\n- devices()\n\nSee\nhttps://data-apis.org/array-api/latest/API_specification/inspection.html\nfor more details.\n\nReturns\n-------\ninfo : ModuleType\n    The array API inspection namespace for NumPy.\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.default_dtypes()\n{'real floating': numpy.float64,\n 'complex floating': numpy.complex128,\n 'integral': numpy.int64,\n 'indexing': numpy.int64}",
      "methods": [
        {
          "name": "capabilities",
          "docstring": "Return a dictionary of array API library capabilities.\n\nThe resulting dictionary has the following keys:\n\n- **\"boolean indexing\"**: boolean indicating whether an array library\n  supports boolean indexing. Always ``True`` for NumPy.\n\n- **\"data-dependent shapes\"**: boolean indicating whether an array\n  library supports data-dependent output shapes. Always ``True`` for\n  NumPy.\n\nSee\nhttps://data-apis.org/array-api/latest/API_specification/generated/array_api.info.capabilities.html\nfor more details.\n\nSee Also\n--------\n__array_namespace_info__.default_device,\n__array_namespace_info__.default_dtypes,\n__array_namespace_info__.dtypes,\n__array_namespace_info__.devices\n\nReturns\n-------\ncapabilities : dict\n    A dictionary of array API library capabilities.\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.capabilities()\n{'boolean indexing': True,\n 'data-dependent shapes': True}"
        },
        {
          "name": "default_device",
          "docstring": "The default device used for new NumPy arrays.\n\nFor NumPy, this always returns ``'cpu'``.\n\nSee Also\n--------\n__array_namespace_info__.capabilities,\n__array_namespace_info__.default_dtypes,\n__array_namespace_info__.dtypes,\n__array_namespace_info__.devices\n\nReturns\n-------\ndevice : str\n    The default device used for new NumPy arrays.\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.default_device()\n'cpu'"
        },
        {
          "name": "default_dtypes",
          "docstring": "The default data types used for new NumPy arrays.\n\nFor NumPy, this always returns the following dictionary:\n\n- **\"real floating\"**: ``numpy.float64``\n- **\"complex floating\"**: ``numpy.complex128``\n- **\"integral\"**: ``numpy.intp``\n- **\"indexing\"**: ``numpy.intp``\n\nParameters\n----------\ndevice : str, optional\n    The device to get the default data types for. For NumPy, only\n    ``'cpu'`` is allowed.\n\nReturns\n-------\ndtypes : dict\n    A dictionary describing the default data types used for new NumPy\n    arrays.\n\nSee Also\n--------\n__array_namespace_info__.capabilities,\n__array_namespace_info__.default_device,\n__array_namespace_info__.dtypes,\n__array_namespace_info__.devices\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.default_dtypes()\n{'real floating': numpy.float64,\n 'complex floating': numpy.complex128,\n 'integral': numpy.int64,\n 'indexing': numpy.int64}"
        },
        {
          "name": "dtypes",
          "docstring": "The array API data types supported by NumPy.\n\nNote that this function only returns data types that are defined by\nthe array API.\n\nParameters\n----------\ndevice : str, optional\n    The device to get the data types for. For NumPy, only ``'cpu'`` is\n    allowed.\nkind : str or tuple of str, optional\n    The kind of data types to return. If ``None``, all data types are\n    returned. If a string, only data types of that kind are returned.\n    If a tuple, a dictionary containing the union of the given kinds\n    is returned. The following kinds are supported:\n\n    - ``'bool'``: boolean data types (i.e., ``bool``).\n    - ``'signed integer'``: signed integer data types (i.e., ``int8``,\n      ``int16``, ``int32``, ``int64``).\n    - ``'unsigned integer'``: unsigned integer data types (i.e.,\n      ``uint8``, ``uint16``, ``uint32``, ``uint64``).\n    - ``'integral'``: integer data types. Shorthand for ``('signed\n      integer', 'unsigned integer')``.\n    - ``'real floating'``: real-valued floating-point data types\n      (i.e., ``float32``, ``float64``).\n    - ``'complex floating'``: complex floating-point data types (i.e.,\n      ``complex64``, ``complex128``).\n    - ``'numeric'``: numeric data types. Shorthand for ``('integral',\n      'real floating', 'complex floating')``.\n\nReturns\n-------\ndtypes : dict\n    A dictionary mapping the names of data types to the corresponding\n    NumPy data types.\n\nSee Also\n--------\n__array_namespace_info__.capabilities,\n__array_namespace_info__.default_device,\n__array_namespace_info__.default_dtypes,\n__array_namespace_info__.devices\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.dtypes(kind='signed integer')\n{'int8': numpy.int8,\n 'int16': numpy.int16,\n 'int32': numpy.int32,\n 'int64': numpy.int64}"
        },
        {
          "name": "devices",
          "docstring": "The devices supported by NumPy.\n\nFor NumPy, this always returns ``['cpu']``.\n\nReturns\n-------\ndevices : list of str\n    The devices supported by NumPy.\n\nSee Also\n--------\n__array_namespace_info__.capabilities,\n__array_namespace_info__.default_device,\n__array_namespace_info__.default_dtypes,\n__array_namespace_info__.dtypes\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.devices()\n['cpu']"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "capabilities",
      "docstring": "Return a dictionary of array API library capabilities.\n\nThe resulting dictionary has the following keys:\n\n- **\"boolean indexing\"**: boolean indicating whether an array library\n  supports boolean indexing. Always ``True`` for NumPy.\n\n- **\"data-dependent shapes\"**: boolean indicating whether an array\n  library supports data-dependent output shapes. Always ``True`` for\n  NumPy.\n\nSee\nhttps://data-apis.org/array-api/latest/API_specification/generated/array_api.info.capabilities.html\nfor more details.\n\nSee Also\n--------\n__array_namespace_info__.default_device,\n__array_namespace_info__.default_dtypes,\n__array_namespace_info__.dtypes,\n__array_namespace_info__.devices\n\nReturns\n-------\ncapabilities : dict\n    A dictionary of array API library capabilities.\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.capabilities()\n{'boolean indexing': True,\n 'data-dependent shapes': True}"
    },
    {
      "name": "default_device",
      "docstring": "The default device used for new NumPy arrays.\n\nFor NumPy, this always returns ``'cpu'``.\n\nSee Also\n--------\n__array_namespace_info__.capabilities,\n__array_namespace_info__.default_dtypes,\n__array_namespace_info__.dtypes,\n__array_namespace_info__.devices\n\nReturns\n-------\ndevice : str\n    The default device used for new NumPy arrays.\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.default_device()\n'cpu'"
    },
    {
      "name": "default_dtypes",
      "docstring": "The default data types used for new NumPy arrays.\n\nFor NumPy, this always returns the following dictionary:\n\n- **\"real floating\"**: ``numpy.float64``\n- **\"complex floating\"**: ``numpy.complex128``\n- **\"integral\"**: ``numpy.intp``\n- **\"indexing\"**: ``numpy.intp``\n\nParameters\n----------\ndevice : str, optional\n    The device to get the default data types for. For NumPy, only\n    ``'cpu'`` is allowed.\n\nReturns\n-------\ndtypes : dict\n    A dictionary describing the default data types used for new NumPy\n    arrays.\n\nSee Also\n--------\n__array_namespace_info__.capabilities,\n__array_namespace_info__.default_device,\n__array_namespace_info__.dtypes,\n__array_namespace_info__.devices\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.default_dtypes()\n{'real floating': numpy.float64,\n 'complex floating': numpy.complex128,\n 'integral': numpy.int64,\n 'indexing': numpy.int64}"
    },
    {
      "name": "dtypes",
      "docstring": "The array API data types supported by NumPy.\n\nNote that this function only returns data types that are defined by\nthe array API.\n\nParameters\n----------\ndevice : str, optional\n    The device to get the data types for. For NumPy, only ``'cpu'`` is\n    allowed.\nkind : str or tuple of str, optional\n    The kind of data types to return. If ``None``, all data types are\n    returned. If a string, only data types of that kind are returned.\n    If a tuple, a dictionary containing the union of the given kinds\n    is returned. The following kinds are supported:\n\n    - ``'bool'``: boolean data types (i.e., ``bool``).\n    - ``'signed integer'``: signed integer data types (i.e., ``int8``,\n      ``int16``, ``int32``, ``int64``).\n    - ``'unsigned integer'``: unsigned integer data types (i.e.,\n      ``uint8``, ``uint16``, ``uint32``, ``uint64``).\n    - ``'integral'``: integer data types. Shorthand for ``('signed\n      integer', 'unsigned integer')``.\n    - ``'real floating'``: real-valued floating-point data types\n      (i.e., ``float32``, ``float64``).\n    - ``'complex floating'``: complex floating-point data types (i.e.,\n      ``complex64``, ``complex128``).\n    - ``'numeric'``: numeric data types. Shorthand for ``('integral',\n      'real floating', 'complex floating')``.\n\nReturns\n-------\ndtypes : dict\n    A dictionary mapping the names of data types to the corresponding\n    NumPy data types.\n\nSee Also\n--------\n__array_namespace_info__.capabilities,\n__array_namespace_info__.default_device,\n__array_namespace_info__.default_dtypes,\n__array_namespace_info__.devices\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.dtypes(kind='signed integer')\n{'int8': numpy.int8,\n 'int16': numpy.int16,\n 'int32': numpy.int32,\n 'int64': numpy.int64}"
    },
    {
      "name": "devices",
      "docstring": "The devices supported by NumPy.\n\nFor NumPy, this always returns ``['cpu']``.\n\nReturns\n-------\ndevices : list of str\n    The devices supported by NumPy.\n\nSee Also\n--------\n__array_namespace_info__.capabilities,\n__array_namespace_info__.default_device,\n__array_namespace_info__.default_dtypes,\n__array_namespace_info__.dtypes\n\nExamples\n--------\n>>> info = np.__array_namespace_info__()\n>>> info.devices()\n['cpu']"
    }
  ],
  "innovations": []
}