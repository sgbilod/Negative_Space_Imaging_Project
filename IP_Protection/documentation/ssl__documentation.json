{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\urllib3\\util\\ssl_.py",
  "classes": [
    {
      "name": "SSLContext",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "load_cert_chain",
          "docstring": null
        },
        {
          "name": "load_verify_locations",
          "docstring": null
        },
        {
          "name": "set_ciphers",
          "docstring": null
        },
        {
          "name": "wrap_socket",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "assert_fingerprint",
      "docstring": "Checks if given fingerprint matches the supplied certificate.\n\n:param cert:\n    Certificate as bytes object.\n:param fingerprint:\n    Fingerprint as string of hexdigits, can be interspersed by colons."
    },
    {
      "name": "resolve_cert_reqs",
      "docstring": "Resolves the argument to a numeric constant, which can be passed to\nthe wrap_socket function/method from the ssl module.\nDefaults to :data:`ssl.CERT_REQUIRED`.\nIf given a string it is assumed to be the name of the constant in the\n:mod:`ssl` module or its abbreviation.\n(So you can specify `REQUIRED` instead of `CERT_REQUIRED`.\nIf it's neither `None` nor a string we assume it is already the numeric\nconstant which can directly be passed to wrap_socket."
    },
    {
      "name": "resolve_ssl_version",
      "docstring": "like resolve_cert_reqs"
    },
    {
      "name": "create_urllib3_context",
      "docstring": "All arguments have the same meaning as ``ssl_wrap_socket``.\n\nBy default, this function does a lot of the same work that\n``ssl.create_default_context`` does on Python 3.4+. It:\n\n- Disables SSLv2, SSLv3, and compression\n- Sets a restricted set of server ciphers\n\nIf you wish to enable SSLv3, you can do::\n\n    from pip._vendor.urllib3.util import ssl_\n    context = ssl_.create_urllib3_context()\n    context.options &= ~ssl_.OP_NO_SSLv3\n\nYou can do the same to enable compression (substituting ``COMPRESSION``\nfor ``SSLv3`` in the last line above).\n\n:param ssl_version:\n    The desired protocol version to use. This will default to\n    PROTOCOL_SSLv23 which will negotiate the highest protocol that both\n    the server and your installation of OpenSSL support.\n:param cert_reqs:\n    Whether to require the certificate verification. This defaults to\n    ``ssl.CERT_REQUIRED``.\n:param options:\n    Specific OpenSSL options. These default to ``ssl.OP_NO_SSLv2``,\n    ``ssl.OP_NO_SSLv3``, ``ssl.OP_NO_COMPRESSION``, and ``ssl.OP_NO_TICKET``.\n:param ciphers:\n    Which cipher suites to allow the server to select.\n:returns:\n    Constructed SSLContext object with specified options\n:rtype: SSLContext"
    },
    {
      "name": "ssl_wrap_socket",
      "docstring": "All arguments except for server_hostname, ssl_context, and ca_cert_dir have\nthe same meaning as they do when using :func:`ssl.wrap_socket`.\n\n:param server_hostname:\n    When SNI is supported, the expected hostname of the certificate\n:param ssl_context:\n    A pre-made :class:`SSLContext` object. If none is provided, one will\n    be created using :func:`create_urllib3_context`.\n:param ciphers:\n    A string of ciphers we wish the client to support.\n:param ca_cert_dir:\n    A directory containing CA certificates in multiple separate files, as\n    supported by OpenSSL's -CApath flag or the capath argument to\n    SSLContext.load_verify_locations().\n:param key_password:\n    Optional password if the keyfile is encrypted.\n:param ca_cert_data:\n    Optional string containing CA certificates in PEM format suitable for\n    passing as the cadata parameter to SSLContext.load_verify_locations()\n:param tls_in_tls:\n    Use SSLTransport to wrap the existing socket."
    },
    {
      "name": "is_ipaddress",
      "docstring": "Detects whether the hostname given is an IPv4 or IPv6 address.\nAlso detects IPv6 addresses with Zone IDs.\n\n:param str hostname: Hostname to examine.\n:return: True if the hostname is an IP address, False otherwise."
    },
    {
      "name": "disable_check_hostname",
      "docstring": null
    },
    {
      "name": "load_cert_chain",
      "docstring": null
    },
    {
      "name": "load_verify_locations",
      "docstring": null
    },
    {
      "name": "set_ciphers",
      "docstring": null
    },
    {
      "name": "wrap_socket",
      "docstring": null
    }
  ],
  "innovations": []
}