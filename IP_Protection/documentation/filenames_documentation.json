{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\fontTools\\ufoLib\\filenames.py",
  "classes": [
    {
      "name": "NameTranslationError",
      "docstring": null,
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "userNameToFileName",
      "docstring": "Converts from a user name to a file name.\n\nTakes care to avoid illegal characters, reserved file names, ambiguity between\nupper- and lower-case characters, and clashes with existing files.\n\nArgs:\n        userName (str): The input file name.\n        existing: A case-insensitive list of all existing file names.\n        prefix: Prefix to be prepended to the file name.\n        suffix: Suffix to be appended to the file name.\n\nReturns:\n        A suitable filename.\n\nRaises:\n        NameTranslationError: If no suitable name could be generated.\n\nExamples::\n\n        >>> userNameToFileName(\"a\") == \"a\"\n        True\n        >>> userNameToFileName(\"A\") == \"A_\"\n        True\n        >>> userNameToFileName(\"AE\") == \"A_E_\"\n        True\n        >>> userNameToFileName(\"Ae\") == \"A_e\"\n        True\n        >>> userNameToFileName(\"ae\") == \"ae\"\n        True\n        >>> userNameToFileName(\"aE\") == \"aE_\"\n        True\n        >>> userNameToFileName(\"a.alt\") == \"a.alt\"\n        True\n        >>> userNameToFileName(\"A.alt\") == \"A_.alt\"\n        True\n        >>> userNameToFileName(\"A.Alt\") == \"A_.A_lt\"\n        True\n        >>> userNameToFileName(\"A.aLt\") == \"A_.aL_t\"\n        True\n        >>> userNameToFileName(u\"A.alT\") == \"A_.alT_\"\n        True\n        >>> userNameToFileName(\"T_H\") == \"T__H_\"\n        True\n        >>> userNameToFileName(\"T_h\") == \"T__h\"\n        True\n        >>> userNameToFileName(\"t_h\") == \"t_h\"\n        True\n        >>> userNameToFileName(\"F_F_I\") == \"F__F__I_\"\n        True\n        >>> userNameToFileName(\"f_f_i\") == \"f_f_i\"\n        True\n        >>> userNameToFileName(\"Aacute_V.swash\") == \"A_acute_V_.swash\"\n        True\n        >>> userNameToFileName(\".notdef\") == \"_notdef\"\n        True\n        >>> userNameToFileName(\"con\") == \"_con\"\n        True\n        >>> userNameToFileName(\"CON\") == \"C_O_N_\"\n        True\n        >>> userNameToFileName(\"con.alt\") == \"_con.alt\"\n        True\n        >>> userNameToFileName(\"alt.con\") == \"alt._con\"\n        True"
    },
    {
      "name": "handleClash1",
      "docstring": "A helper function that resolves collisions with existing names when choosing a filename.\n\nThis function attempts to append an unused integer counter to the filename.\n\n    Args:\n            userName (str): The input file name.\n            existing: A case-insensitive list of all existing file names.\n            prefix: Prefix to be prepended to the file name.\n            suffix: Suffix to be appended to the file name.\n\n    Returns:\n            A suitable filename.\n\n    >>> prefix = (\"0\" * 5) + \".\"\n    >>> suffix = \".\" + (\"0\" * 10)\n    >>> existing = [\"a\" * 5]\n\n    >>> e = list(existing)\n    >>> handleClash1(userName=\"A\" * 5, existing=e,\n    ...             prefix=prefix, suffix=suffix) == (\n    ...     '00000.AAAAA000000000000001.0000000000')\n    True\n\n    >>> e = list(existing)\n    >>> e.append(prefix + \"aaaaa\" + \"1\".zfill(15) + suffix)\n    >>> handleClash1(userName=\"A\" * 5, existing=e,\n    ...             prefix=prefix, suffix=suffix) == (\n    ...     '00000.AAAAA000000000000002.0000000000')\n    True\n\n    >>> e = list(existing)\n    >>> e.append(prefix + \"AAAAA\" + \"2\".zfill(15) + suffix)\n    >>> handleClash1(userName=\"A\" * 5, existing=e,\n    ...             prefix=prefix, suffix=suffix) == (\n    ...     '00000.AAAAA000000000000001.0000000000')\n    True"
    },
    {
      "name": "handleClash2",
      "docstring": "A helper function that resolves collisions with existing names when choosing a filename.\n\nThis function is a fallback to :func:`handleClash1`. It attempts to append an unused integer counter to the filename.\n\n    Args:\n            userName (str): The input file name.\n            existing: A case-insensitive list of all existing file names.\n            prefix: Prefix to be prepended to the file name.\n            suffix: Suffix to be appended to the file name.\n\n    Returns:\n            A suitable filename.\n\n    Raises:\n            NameTranslationError: If no suitable name could be generated.\n\n    Examples::\n\n      >>> prefix = (\"0\" * 5) + \".\"\n      >>> suffix = \".\" + (\"0\" * 10)\n      >>> existing = [prefix + str(i) + suffix for i in range(100)]\n\n      >>> e = list(existing)\n      >>> handleClash2(existing=e, prefix=prefix, suffix=suffix) == (\n      ...   '00000.100.0000000000')\n      True\n\n      >>> e = list(existing)\n      >>> e.remove(prefix + \"1\" + suffix)\n      >>> handleClash2(existing=e, prefix=prefix, suffix=suffix) == (\n      ...   '00000.1.0000000000')\n      True\n\n      >>> e = list(existing)\n      >>> e.remove(prefix + \"2\" + suffix)\n      >>> handleClash2(existing=e, prefix=prefix, suffix=suffix) == (\n      ...   '00000.2.0000000000')\n      True"
    }
  ],
  "innovations": []
}