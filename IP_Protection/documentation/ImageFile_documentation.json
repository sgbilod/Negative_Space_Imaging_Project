{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\PIL\\ImageFile.py",
  "classes": [
    {
      "name": "_Tile",
      "docstring": null,
      "methods": []
    },
    {
      "name": "ImageFile",
      "docstring": "Base class for image file format handlers.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "close",
          "docstring": "Closes the file pointer, if possible.\n\nThis operation will destroy the image core and release its memory.\nThe image data will be unusable afterward.\n\nThis function is required to close images that have multiple frames or\nhave not had their file read and closed by the\n:py:meth:`~PIL.Image.Image.load` method. See :ref:`file-handling` for\nmore information."
        },
        {
          "name": "get_child_images",
          "docstring": null
        },
        {
          "name": "get_format_mimetype",
          "docstring": null
        },
        {
          "name": "verify",
          "docstring": "Check file integrity"
        },
        {
          "name": "load",
          "docstring": "Load image data based on tile list"
        },
        {
          "name": "load_prepare",
          "docstring": null
        },
        {
          "name": "load_end",
          "docstring": null
        }
      ]
    },
    {
      "name": "StubHandler",
      "docstring": null,
      "methods": [
        {
          "name": "open",
          "docstring": null
        },
        {
          "name": "load",
          "docstring": null
        }
      ]
    },
    {
      "name": "StubImageFile",
      "docstring": "Base class for stub image loaders.\n\nA stub loader is an image loader that can identify files of a\ncertain format, but relies on external code to load the file.",
      "methods": [
        {
          "name": "load",
          "docstring": null
        }
      ]
    },
    {
      "name": "Parser",
      "docstring": "Incremental image parser.  This class implements the standard\nfeed/close consumer interface.",
      "methods": [
        {
          "name": "reset",
          "docstring": "(Consumer) Reset the parser.  Note that you can only call this\nmethod immediately after you've created a parser; parser\ninstances cannot be reused."
        },
        {
          "name": "feed",
          "docstring": "(Consumer) Feed data to the parser.\n\n:param data: A string buffer.\n:exception OSError: If the parser failed to parse the image file."
        },
        {
          "name": "close",
          "docstring": "(Consumer) Close the stream.\n\n:returns: An image object.\n:exception OSError: If the parser failed to parse the image file either\n                    because it cannot be identified or cannot be\n                    decoded."
        }
      ]
    },
    {
      "name": "PyCodecState",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "extents",
          "docstring": null
        }
      ]
    },
    {
      "name": "PyCodec",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "init",
          "docstring": "Override to perform codec specific initialization\n\n:param args: Tuple of arg items from the tile entry\n:returns: None"
        },
        {
          "name": "cleanup",
          "docstring": "Override to perform codec specific cleanup\n\n:returns: None"
        },
        {
          "name": "setfd",
          "docstring": "Called from ImageFile to set the Python file-like object\n\n:param fd: A Python file-like object\n:returns: None"
        },
        {
          "name": "setimage",
          "docstring": "Called from ImageFile to set the core output image for the codec\n\n:param im: A core image object\n:param extents: a 4 tuple of (x0, y0, x1, y1) defining the rectangle\n    for this tile\n:returns: None"
        }
      ]
    },
    {
      "name": "PyDecoder",
      "docstring": "Python implementation of a format decoder. Override this class and\nadd the decoding logic in the :meth:`decode` method.\n\nSee :ref:`Writing Your Own File Codec in Python<file-codecs-py>`",
      "methods": [
        {
          "name": "pulls_fd",
          "docstring": null
        },
        {
          "name": "decode",
          "docstring": "Override to perform the decoding process.\n\n:param buffer: A bytes object with the data to be decoded.\n:returns: A tuple of ``(bytes consumed, errcode)``.\n    If finished with decoding return -1 for the bytes consumed.\n    Err codes are from :data:`.ImageFile.ERRORS`."
        },
        {
          "name": "set_as_raw",
          "docstring": "Convenience method to set the internal image from a stream of raw data\n\n:param data: Bytes to be set\n:param rawmode: The rawmode to be used for the decoder.\n    If not specified, it will default to the mode of the image\n:param extra: Extra arguments for the decoder.\n:returns: None"
        }
      ]
    },
    {
      "name": "PyEncoder",
      "docstring": "Python implementation of a format encoder. Override this class and\nadd the decoding logic in the :meth:`encode` method.\n\nSee :ref:`Writing Your Own File Codec in Python<file-codecs-py>`",
      "methods": [
        {
          "name": "pushes_fd",
          "docstring": null
        },
        {
          "name": "encode",
          "docstring": "Override to perform the encoding process.\n\n:param bufsize: Buffer size.\n:returns: A tuple of ``(bytes encoded, errcode, bytes)``.\n    If finished with encoding return 1 for the error code.\n    Err codes are from :data:`.ImageFile.ERRORS`."
        },
        {
          "name": "encode_to_pyfd",
          "docstring": "If ``pushes_fd`` is ``True``, then this method will be used,\nand ``encode()`` will only be called once.\n\n:returns: A tuple of ``(bytes consumed, errcode)``.\n    Err codes are from :data:`.ImageFile.ERRORS`."
        },
        {
          "name": "encode_to_file",
          "docstring": ":param fh: File handle.\n:param bufsize: Buffer size.\n\n:returns: If finished successfully, return 0.\n    Otherwise, return an error code. Err codes are from\n    :data:`.ImageFile.ERRORS`."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "raise_oserror",
      "docstring": null
    },
    {
      "name": "close",
      "docstring": "Closes the file pointer, if possible.\n\nThis operation will destroy the image core and release its memory.\nThe image data will be unusable afterward.\n\nThis function is required to close images that have multiple frames or\nhave not had their file read and closed by the\n:py:meth:`~PIL.Image.Image.load` method. See :ref:`file-handling` for\nmore information."
    },
    {
      "name": "get_child_images",
      "docstring": null
    },
    {
      "name": "get_format_mimetype",
      "docstring": null
    },
    {
      "name": "verify",
      "docstring": "Check file integrity"
    },
    {
      "name": "load",
      "docstring": "Load image data based on tile list"
    },
    {
      "name": "load_prepare",
      "docstring": null
    },
    {
      "name": "load_end",
      "docstring": null
    },
    {
      "name": "open",
      "docstring": null
    },
    {
      "name": "load",
      "docstring": null
    },
    {
      "name": "load",
      "docstring": null
    },
    {
      "name": "reset",
      "docstring": "(Consumer) Reset the parser.  Note that you can only call this\nmethod immediately after you've created a parser; parser\ninstances cannot be reused."
    },
    {
      "name": "feed",
      "docstring": "(Consumer) Feed data to the parser.\n\n:param data: A string buffer.\n:exception OSError: If the parser failed to parse the image file."
    },
    {
      "name": "close",
      "docstring": "(Consumer) Close the stream.\n\n:returns: An image object.\n:exception OSError: If the parser failed to parse the image file either\n                    because it cannot be identified or cannot be\n                    decoded."
    },
    {
      "name": "extents",
      "docstring": null
    },
    {
      "name": "init",
      "docstring": "Override to perform codec specific initialization\n\n:param args: Tuple of arg items from the tile entry\n:returns: None"
    },
    {
      "name": "cleanup",
      "docstring": "Override to perform codec specific cleanup\n\n:returns: None"
    },
    {
      "name": "setfd",
      "docstring": "Called from ImageFile to set the Python file-like object\n\n:param fd: A Python file-like object\n:returns: None"
    },
    {
      "name": "setimage",
      "docstring": "Called from ImageFile to set the core output image for the codec\n\n:param im: A core image object\n:param extents: a 4 tuple of (x0, y0, x1, y1) defining the rectangle\n    for this tile\n:returns: None"
    },
    {
      "name": "pulls_fd",
      "docstring": null
    },
    {
      "name": "decode",
      "docstring": "Override to perform the decoding process.\n\n:param buffer: A bytes object with the data to be decoded.\n:returns: A tuple of ``(bytes consumed, errcode)``.\n    If finished with decoding return -1 for the bytes consumed.\n    Err codes are from :data:`.ImageFile.ERRORS`."
    },
    {
      "name": "set_as_raw",
      "docstring": "Convenience method to set the internal image from a stream of raw data\n\n:param data: Bytes to be set\n:param rawmode: The rawmode to be used for the decoder.\n    If not specified, it will default to the mode of the image\n:param extra: Extra arguments for the decoder.\n:returns: None"
    },
    {
      "name": "pushes_fd",
      "docstring": null
    },
    {
      "name": "encode",
      "docstring": "Override to perform the encoding process.\n\n:param bufsize: Buffer size.\n:returns: A tuple of ``(bytes encoded, errcode, bytes)``.\n    If finished with encoding return 1 for the error code.\n    Err codes are from :data:`.ImageFile.ERRORS`."
    },
    {
      "name": "encode_to_pyfd",
      "docstring": "If ``pushes_fd`` is ``True``, then this method will be used,\nand ``encode()`` will only be called once.\n\n:returns: A tuple of ``(bytes consumed, errcode)``.\n    Err codes are from :data:`.ImageFile.ERRORS`."
    },
    {
      "name": "encode_to_file",
      "docstring": ":param fh: File handle.\n:param bufsize: Buffer size.\n\n:returns: If finished successfully, return 0.\n    Otherwise, return an error code. Err codes are from\n    :data:`.ImageFile.ERRORS`."
    }
  ],
  "innovations": []
}