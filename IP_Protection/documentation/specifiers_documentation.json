{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\packaging\\specifiers.py",
  "classes": [
    {
      "name": "InvalidSpecifier",
      "docstring": "Raised when attempting to create a :class:`Specifier` with a specifier\nstring that is invalid.\n\n>>> Specifier(\"lolwat\")\nTraceback (most recent call last):\n    ...\npackaging.specifiers.InvalidSpecifier: Invalid specifier: 'lolwat'",
      "methods": []
    },
    {
      "name": "BaseSpecifier",
      "docstring": null,
      "methods": [
        {
          "name": "prereleases",
          "docstring": "Whether or not pre-releases as a whole are allowed.\n\nThis can be set to either ``True`` or ``False`` to explicitly enable or disable\nprereleases or it can be set to ``None`` (the default) to use default semantics."
        },
        {
          "name": "prereleases",
          "docstring": "Setter for :attr:`prereleases`.\n\n:param value: The value to set."
        },
        {
          "name": "contains",
          "docstring": "Determines if the given item is contained within this specifier."
        },
        {
          "name": "filter",
          "docstring": "Takes an iterable of items and filters them so that only items which\nare contained within this specifier are allowed in it."
        }
      ]
    },
    {
      "name": "Specifier",
      "docstring": "This class abstracts handling of version specifiers.\n\n.. tip::\n\n    It is generally not required to instantiate this manually. You should instead\n    prefer to work with :class:`SpecifierSet` instead, which can parse\n    comma-separated version specifiers (which is what package metadata contains).",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Initialize a Specifier instance.\n\n:param spec:\n    The string representation of a specifier which will be parsed and\n    normalized before use.\n:param prereleases:\n    This tells the specifier if it should accept prerelease versions if\n    applicable or not. The default of ``None`` will autodetect it from the\n    given specifiers.\n:raises InvalidSpecifier:\n    If the given specifier is invalid (i.e. bad syntax)."
        },
        {
          "name": "prereleases",
          "docstring": null
        },
        {
          "name": "prereleases",
          "docstring": null
        },
        {
          "name": "operator",
          "docstring": "The operator of this specifier.\n\n>>> Specifier(\"==1.2.3\").operator\n'=='"
        },
        {
          "name": "version",
          "docstring": "The version of this specifier.\n\n>>> Specifier(\"==1.2.3\").version\n'1.2.3'"
        },
        {
          "name": "contains",
          "docstring": "Return whether or not the item is contained in this specifier.\n\n:param item:\n    The item to check for, which can be a version string or a\n    :class:`Version` instance.\n:param prereleases:\n    Whether or not to match prereleases with this Specifier. If set to\n    ``None`` (the default), it uses :attr:`prereleases` to determine\n    whether or not prereleases are allowed.\n\n>>> Specifier(\">=1.2.3\").contains(\"1.2.3\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(Version(\"1.2.3\"))\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.0.0\")\nFalse\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\")\nFalse\n>>> Specifier(\">=1.2.3\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\", prereleases=True)\nTrue"
        },
        {
          "name": "filter",
          "docstring": "Filter items in the given iterable, that match the specifier.\n\n:param iterable:\n    An iterable that can contain version strings and :class:`Version` instances.\n    The items in the iterable will be filtered according to the specifier.\n:param prereleases:\n    Whether or not to allow prereleases in the returned iterator. If set to\n    ``None`` (the default), it will be intelligently decide whether to allow\n    prereleases or not (based on the :attr:`prereleases` attribute, and\n    whether the only versions matching are prereleases).\n\nThis method is smarter than just ``filter(Specifier().contains, [...])``\nbecause it implements the rule from :pep:`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.2.3\", \"1.3\", Version(\"1.4\")]))\n['1.2.3', '1.3', <Version('1.4')>]\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n['1.5a1']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(Specifier(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']"
        }
      ]
    },
    {
      "name": "SpecifierSet",
      "docstring": "This class abstracts handling of a set of version specifiers.\n\nIt can be passed a single specifier (``>=3.0``), a comma-separated list of\nspecifiers (``>=3.0,!=3.1``), or no specifier at all.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Initialize a SpecifierSet instance.\n\n:param specifiers:\n    The string representation of a specifier or a comma-separated list of\n    specifiers which will be parsed and normalized before use.\n    May also be an iterable of ``Specifier`` instances, which will be used\n    as is.\n:param prereleases:\n    This tells the SpecifierSet if it should accept prerelease versions if\n    applicable or not. The default of ``None`` will autodetect it from the\n    given specifiers.\n\n:raises InvalidSpecifier:\n    If the given ``specifiers`` are not parseable than this exception will be\n    raised."
        },
        {
          "name": "prereleases",
          "docstring": null
        },
        {
          "name": "prereleases",
          "docstring": null
        },
        {
          "name": "contains",
          "docstring": "Return whether or not the item is contained in this SpecifierSet.\n\n:param item:\n    The item to check for, which can be a version string or a\n    :class:`Version` instance.\n:param prereleases:\n    Whether or not to match prereleases with this SpecifierSet. If set to\n    ``None`` (the default), it uses :attr:`prereleases` to determine\n    whether or not prereleases are allowed.\n\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.2.3\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(Version(\"1.2.3\"))\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.0.1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\", prereleases=True)\nTrue"
        },
        {
          "name": "filter",
          "docstring": "Filter items in the given iterable, that match the specifiers in this set.\n\n:param iterable:\n    An iterable that can contain version strings and :class:`Version` instances.\n    The items in the iterable will be filtered according to the specifier.\n:param prereleases:\n    Whether or not to allow prereleases in the returned iterator. If set to\n    ``None`` (the default), it will be intelligently decide whether to allow\n    prereleases or not (based on the :attr:`prereleases` attribute, and\n    whether the only versions matching are prereleases).\n\nThis method is smarter than just ``filter(SpecifierSet(...).contains, [...])``\nbecause it implements the rule from :pep:`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", Version(\"1.4\")]))\n['1.3', <Version('1.4')>]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n[]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n\nAn \"empty\" SpecifierSet will filter items based on the presence of prerelease\nversions in the set.\n\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\"\").filter([\"1.5a1\"]))\n['1.5a1']\n>>> list(SpecifierSet(\"\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "prereleases",
      "docstring": "Whether or not pre-releases as a whole are allowed.\n\nThis can be set to either ``True`` or ``False`` to explicitly enable or disable\nprereleases or it can be set to ``None`` (the default) to use default semantics."
    },
    {
      "name": "prereleases",
      "docstring": "Setter for :attr:`prereleases`.\n\n:param value: The value to set."
    },
    {
      "name": "contains",
      "docstring": "Determines if the given item is contained within this specifier."
    },
    {
      "name": "filter",
      "docstring": "Takes an iterable of items and filters them so that only items which\nare contained within this specifier are allowed in it."
    },
    {
      "name": "prereleases",
      "docstring": null
    },
    {
      "name": "prereleases",
      "docstring": null
    },
    {
      "name": "operator",
      "docstring": "The operator of this specifier.\n\n>>> Specifier(\"==1.2.3\").operator\n'=='"
    },
    {
      "name": "version",
      "docstring": "The version of this specifier.\n\n>>> Specifier(\"==1.2.3\").version\n'1.2.3'"
    },
    {
      "name": "contains",
      "docstring": "Return whether or not the item is contained in this specifier.\n\n:param item:\n    The item to check for, which can be a version string or a\n    :class:`Version` instance.\n:param prereleases:\n    Whether or not to match prereleases with this Specifier. If set to\n    ``None`` (the default), it uses :attr:`prereleases` to determine\n    whether or not prereleases are allowed.\n\n>>> Specifier(\">=1.2.3\").contains(\"1.2.3\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(Version(\"1.2.3\"))\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.0.0\")\nFalse\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\")\nFalse\n>>> Specifier(\">=1.2.3\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> Specifier(\">=1.2.3\").contains(\"1.3.0a1\", prereleases=True)\nTrue"
    },
    {
      "name": "filter",
      "docstring": "Filter items in the given iterable, that match the specifier.\n\n:param iterable:\n    An iterable that can contain version strings and :class:`Version` instances.\n    The items in the iterable will be filtered according to the specifier.\n:param prereleases:\n    Whether or not to allow prereleases in the returned iterator. If set to\n    ``None`` (the default), it will be intelligently decide whether to allow\n    prereleases or not (based on the :attr:`prereleases` attribute, and\n    whether the only versions matching are prereleases).\n\nThis method is smarter than just ``filter(Specifier().contains, [...])``\nbecause it implements the rule from :pep:`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.2.3\", \"1.3\", Version(\"1.4\")]))\n['1.2.3', '1.3', <Version('1.4')>]\n>>> list(Specifier(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n['1.5a1']\n>>> list(Specifier(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(Specifier(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']"
    },
    {
      "name": "prereleases",
      "docstring": null
    },
    {
      "name": "prereleases",
      "docstring": null
    },
    {
      "name": "contains",
      "docstring": "Return whether or not the item is contained in this SpecifierSet.\n\n:param item:\n    The item to check for, which can be a version string or a\n    :class:`Version` instance.\n:param prereleases:\n    Whether or not to match prereleases with this SpecifierSet. If set to\n    ``None`` (the default), it uses :attr:`prereleases` to determine\n    whether or not prereleases are allowed.\n\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.2.3\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(Version(\"1.2.3\"))\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.0.1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\")\nFalse\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\", prereleases=True).contains(\"1.3.0a1\")\nTrue\n>>> SpecifierSet(\">=1.0.0,!=1.0.1\").contains(\"1.3.0a1\", prereleases=True)\nTrue"
    },
    {
      "name": "filter",
      "docstring": "Filter items in the given iterable, that match the specifiers in this set.\n\n:param iterable:\n    An iterable that can contain version strings and :class:`Version` instances.\n    The items in the iterable will be filtered according to the specifier.\n:param prereleases:\n    Whether or not to allow prereleases in the returned iterator. If set to\n    ``None`` (the default), it will be intelligently decide whether to allow\n    prereleases or not (based on the :attr:`prereleases` attribute, and\n    whether the only versions matching are prereleases).\n\nThis method is smarter than just ``filter(SpecifierSet(...).contains, [...])``\nbecause it implements the rule from :pep:`440` that a prerelease item\nSHOULD be accepted if no other versions match the given specifier.\n\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.3\", Version(\"1.4\")]))\n['1.3', <Version('1.4')>]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.2\", \"1.5a1\"]))\n[]\n>>> list(SpecifierSet(\">=1.2.3\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\">=1.2.3\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n\nAn \"empty\" SpecifierSet will filter items based on the presence of prerelease\nversions in the set.\n\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"]))\n['1.3']\n>>> list(SpecifierSet(\"\").filter([\"1.5a1\"]))\n['1.5a1']\n>>> list(SpecifierSet(\"\", prereleases=True).filter([\"1.3\", \"1.5a1\"]))\n['1.3', '1.5a1']\n>>> list(SpecifierSet(\"\").filter([\"1.3\", \"1.5a1\"], prereleases=True))\n['1.3', '1.5a1']"
    }
  ],
  "innovations": []
}