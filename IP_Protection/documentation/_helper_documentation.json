{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\fft\\_helper.py",
  "classes": [],
  "functions": [
    {
      "name": "fftshift",
      "docstring": "Shift the zero-frequency component to the center of the spectrum.\n\nThis function swaps half-spaces for all axes listed (defaults to all).\nNote that ``y[0]`` is the Nyquist component only if ``len(x)`` is even.\n\nParameters\n----------\nx : array_like\n    Input array.\naxes : int or shape tuple, optional\n    Axes over which to shift.  Default is None, which shifts all axes.\n\nReturns\n-------\ny : ndarray\n    The shifted array.\n\nSee Also\n--------\nifftshift : The inverse of `fftshift`.\n\nExamples\n--------\n>>> import numpy as np\n>>> freqs = np.fft.fftfreq(10, 0.1)\n>>> freqs\narray([ 0.,  1.,  2., ..., -3., -2., -1.])\n>>> np.fft.fftshift(freqs)\narray([-5., -4., -3., -2., -1.,  0.,  1.,  2.,  3.,  4.])\n\nShift the zero-frequency component only along the second axis:\n\n>>> freqs = np.fft.fftfreq(9, d=1./9).reshape(3, 3)\n>>> freqs\narray([[ 0.,  1.,  2.],\n       [ 3.,  4., -4.],\n       [-3., -2., -1.]])\n>>> np.fft.fftshift(freqs, axes=(1,))\narray([[ 2.,  0.,  1.],\n       [-4.,  3.,  4.],\n       [-1., -3., -2.]])"
    },
    {
      "name": "ifftshift",
      "docstring": "The inverse of `fftshift`. Although identical for even-length `x`, the\nfunctions differ by one sample for odd-length `x`.\n\nParameters\n----------\nx : array_like\n    Input array.\naxes : int or shape tuple, optional\n    Axes over which to calculate.  Defaults to None, which shifts all axes.\n\nReturns\n-------\ny : ndarray\n    The shifted array.\n\nSee Also\n--------\nfftshift : Shift zero-frequency component to the center of the spectrum.\n\nExamples\n--------\n>>> import numpy as np\n>>> freqs = np.fft.fftfreq(9, d=1./9).reshape(3, 3)\n>>> freqs\narray([[ 0.,  1.,  2.],\n       [ 3.,  4., -4.],\n       [-3., -2., -1.]])\n>>> np.fft.ifftshift(np.fft.fftshift(freqs))\narray([[ 0.,  1.,  2.],\n       [ 3.,  4., -4.],\n       [-3., -2., -1.]])"
    },
    {
      "name": "fftfreq",
      "docstring": "Return the Discrete Fourier Transform sample frequencies.\n\nThe returned float array `f` contains the frequency bin centers in cycles\nper unit of the sample spacing (with zero at the start).  For instance, if\nthe sample spacing is in seconds, then the frequency unit is cycles/second.\n\nGiven a window length `n` and a sample spacing `d`::\n\n  f = [0, 1, ...,   n/2-1,     -n/2, ..., -1] / (d*n)   if n is even\n  f = [0, 1, ..., (n-1)/2, -(n-1)/2, ..., -1] / (d*n)   if n is odd\n\nParameters\n----------\nn : int\n    Window length.\nd : scalar, optional\n    Sample spacing (inverse of the sampling rate). Defaults to 1.\ndevice : str, optional\n    The device on which to place the created array. Default: ``None``.\n    For Array-API interoperability only, so must be ``\"cpu\"`` if passed.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nf : ndarray\n    Array of length `n` containing the sample frequencies.\n\nExamples\n--------\n>>> import numpy as np\n>>> signal = np.array([-2, 8, 6, 4, 1, 0, 3, 5], dtype=float)\n>>> fourier = np.fft.fft(signal)\n>>> n = signal.size\n>>> timestep = 0.1\n>>> freq = np.fft.fftfreq(n, d=timestep)\n>>> freq\narray([ 0.  ,  1.25,  2.5 , ..., -3.75, -2.5 , -1.25])"
    },
    {
      "name": "rfftfreq",
      "docstring": "Return the Discrete Fourier Transform sample frequencies\n(for usage with rfft, irfft).\n\nThe returned float array `f` contains the frequency bin centers in cycles\nper unit of the sample spacing (with zero at the start).  For instance, if\nthe sample spacing is in seconds, then the frequency unit is cycles/second.\n\nGiven a window length `n` and a sample spacing `d`::\n\n  f = [0, 1, ...,     n/2-1,     n/2] / (d*n)   if n is even\n  f = [0, 1, ..., (n-1)/2-1, (n-1)/2] / (d*n)   if n is odd\n\nUnlike `fftfreq` (but like `scipy.fftpack.rfftfreq`)\nthe Nyquist frequency component is considered to be positive.\n\nParameters\n----------\nn : int\n    Window length.\nd : scalar, optional\n    Sample spacing (inverse of the sampling rate). Defaults to 1.\ndevice : str, optional\n    The device on which to place the created array. Default: ``None``.\n    For Array-API interoperability only, so must be ``\"cpu\"`` if passed.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nf : ndarray\n    Array of length ``n//2 + 1`` containing the sample frequencies.\n\nExamples\n--------\n>>> import numpy as np\n>>> signal = np.array([-2, 8, 6, 4, 1, 0, 3, 5, -3, 4], dtype=float)\n>>> fourier = np.fft.rfft(signal)\n>>> n = signal.size\n>>> sample_rate = 100\n>>> freq = np.fft.fftfreq(n, d=1./sample_rate)\n>>> freq\narray([  0.,  10.,  20., ..., -30., -20., -10.])\n>>> freq = np.fft.rfftfreq(n, d=1./sample_rate)\n>>> freq\narray([  0.,  10.,  20.,  30.,  40.,  50.])"
    }
  ],
  "innovations": []
}