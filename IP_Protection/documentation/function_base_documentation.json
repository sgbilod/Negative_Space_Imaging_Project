{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\_core\\function_base.py",
  "classes": [],
  "functions": [
    {
      "name": "linspace",
      "docstring": "Return evenly spaced numbers over a specified interval.\n\nReturns `num` evenly spaced samples, calculated over the\ninterval [`start`, `stop`].\n\nThe endpoint of the interval can optionally be excluded.\n\n.. versionchanged:: 1.20.0\n    Values are rounded towards ``-inf`` instead of ``0`` when an\n    integer ``dtype`` is specified. The old behavior can\n    still be obtained with ``np.linspace(start, stop, num).astype(int)``\n\nParameters\n----------\nstart : array_like\n    The starting value of the sequence.\nstop : array_like\n    The end value of the sequence, unless `endpoint` is set to False.\n    In that case, the sequence consists of all but the last of ``num + 1``\n    evenly spaced samples, so that `stop` is excluded.  Note that the step\n    size changes when `endpoint` is False.\nnum : int, optional\n    Number of samples to generate. Default is 50. Must be non-negative.\nendpoint : bool, optional\n    If True, `stop` is the last sample. Otherwise, it is not included.\n    Default is True.\nretstep : bool, optional\n    If True, return (`samples`, `step`), where `step` is the spacing\n    between samples.\ndtype : dtype, optional\n    The type of the output array.  If `dtype` is not given, the data type\n    is inferred from `start` and `stop`. The inferred dtype will never be\n    an integer; `float` is chosen even if the arguments would produce an\n    array of integers.\naxis : int, optional\n    The axis in the result to store the samples.  Relevant only if start\n    or stop are array-like.  By default (0), the samples will be along a\n    new axis inserted at the beginning. Use -1 to get an axis at the end.\ndevice : str, optional\n    The device on which to place the created array. Default: None.\n    For Array-API interoperability only, so must be ``\"cpu\"`` if passed.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nsamples : ndarray\n    There are `num` equally spaced samples in the closed interval\n    ``[start, stop]`` or the half-open interval ``[start, stop)``\n    (depending on whether `endpoint` is True or False).\nstep : float, optional\n    Only returned if `retstep` is True\n\n    Size of spacing between samples.\n\n\nSee Also\n--------\narange : Similar to `linspace`, but uses a step size (instead of the\n         number of samples).\ngeomspace : Similar to `linspace`, but with numbers spaced evenly on a log\n            scale (a geometric progression).\nlogspace : Similar to `geomspace`, but with the end points specified as\n           logarithms.\n:ref:`how-to-partition`\n\nExamples\n--------\n>>> import numpy as np\n>>> np.linspace(2.0, 3.0, num=5)\narray([2.  , 2.25, 2.5 , 2.75, 3.  ])\n>>> np.linspace(2.0, 3.0, num=5, endpoint=False)\narray([2. ,  2.2,  2.4,  2.6,  2.8])\n>>> np.linspace(2.0, 3.0, num=5, retstep=True)\n(array([2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)\n\nGraphical illustration:\n\n>>> import matplotlib.pyplot as plt\n>>> N = 8\n>>> y = np.zeros(N)\n>>> x1 = np.linspace(0, 10, N, endpoint=True)\n>>> x2 = np.linspace(0, 10, N, endpoint=False)\n>>> plt.plot(x1, y, 'o')\n[<matplotlib.lines.Line2D object at 0x...>]\n>>> plt.plot(x2, y + 0.5, 'o')\n[<matplotlib.lines.Line2D object at 0x...>]\n>>> plt.ylim([-0.5, 1])\n(-0.5, 1)\n>>> plt.show()"
    },
    {
      "name": "logspace",
      "docstring": "Return numbers spaced evenly on a log scale.\n\nIn linear space, the sequence starts at ``base ** start``\n(`base` to the power of `start`) and ends with ``base ** stop``\n(see `endpoint` below).\n\n.. versionchanged:: 1.25.0\n    Non-scalar 'base` is now supported\n\nParameters\n----------\nstart : array_like\n    ``base ** start`` is the starting value of the sequence.\nstop : array_like\n    ``base ** stop`` is the final value of the sequence, unless `endpoint`\n    is False.  In that case, ``num + 1`` values are spaced over the\n    interval in log-space, of which all but the last (a sequence of\n    length `num`) are returned.\nnum : integer, optional\n    Number of samples to generate.  Default is 50.\nendpoint : boolean, optional\n    If true, `stop` is the last sample. Otherwise, it is not included.\n    Default is True.\nbase : array_like, optional\n    The base of the log space. The step size between the elements in\n    ``ln(samples) / ln(base)`` (or ``log_base(samples)``) is uniform.\n    Default is 10.0.\ndtype : dtype\n    The type of the output array.  If `dtype` is not given, the data type\n    is inferred from `start` and `stop`. The inferred type will never be\n    an integer; `float` is chosen even if the arguments would produce an\n    array of integers.\naxis : int, optional\n    The axis in the result to store the samples.  Relevant only if start,\n    stop, or base are array-like.  By default (0), the samples will be\n    along a new axis inserted at the beginning. Use -1 to get an axis at\n    the end.\n\nReturns\n-------\nsamples : ndarray\n    `num` samples, equally spaced on a log scale.\n\nSee Also\n--------\narange : Similar to linspace, with the step size specified instead of the\n         number of samples. Note that, when used with a float endpoint, the\n         endpoint may or may not be included.\nlinspace : Similar to logspace, but with the samples uniformly distributed\n           in linear space, instead of log space.\ngeomspace : Similar to logspace, but with endpoints specified directly.\n:ref:`how-to-partition`\n\nNotes\n-----\nIf base is a scalar, logspace is equivalent to the code\n\n>>> y = np.linspace(start, stop, num=num, endpoint=endpoint)\n... # doctest: +SKIP\n>>> power(base, y).astype(dtype)\n... # doctest: +SKIP\n\nExamples\n--------\n>>> import numpy as np\n>>> np.logspace(2.0, 3.0, num=4)\narray([ 100.        ,  215.443469  ,  464.15888336, 1000.        ])\n>>> np.logspace(2.0, 3.0, num=4, endpoint=False)\narray([100.        ,  177.827941  ,  316.22776602,  562.34132519])\n>>> np.logspace(2.0, 3.0, num=4, base=2.0)\narray([4.        ,  5.0396842 ,  6.34960421,  8.        ])\n>>> np.logspace(2.0, 3.0, num=4, base=[2.0, 3.0], axis=-1)\narray([[ 4.        ,  5.0396842 ,  6.34960421,  8.        ],\n       [ 9.        , 12.98024613, 18.72075441, 27.        ]])\n\nGraphical illustration:\n\n>>> import matplotlib.pyplot as plt\n>>> N = 10\n>>> x1 = np.logspace(0.1, 1, N, endpoint=True)\n>>> x2 = np.logspace(0.1, 1, N, endpoint=False)\n>>> y = np.zeros(N)\n>>> plt.plot(x1, y, 'o')\n[<matplotlib.lines.Line2D object at 0x...>]\n>>> plt.plot(x2, y + 0.5, 'o')\n[<matplotlib.lines.Line2D object at 0x...>]\n>>> plt.ylim([-0.5, 1])\n(-0.5, 1)\n>>> plt.show()"
    },
    {
      "name": "geomspace",
      "docstring": "Return numbers spaced evenly on a log scale (a geometric progression).\n\nThis is similar to `logspace`, but with endpoints specified directly.\nEach output sample is a constant multiple of the previous.\n\nParameters\n----------\nstart : array_like\n    The starting value of the sequence.\nstop : array_like\n    The final value of the sequence, unless `endpoint` is False.\n    In that case, ``num + 1`` values are spaced over the\n    interval in log-space, of which all but the last (a sequence of\n    length `num`) are returned.\nnum : integer, optional\n    Number of samples to generate.  Default is 50.\nendpoint : boolean, optional\n    If true, `stop` is the last sample. Otherwise, it is not included.\n    Default is True.\ndtype : dtype\n    The type of the output array.  If `dtype` is not given, the data type\n    is inferred from `start` and `stop`. The inferred dtype will never be\n    an integer; `float` is chosen even if the arguments would produce an\n    array of integers.\naxis : int, optional\n    The axis in the result to store the samples.  Relevant only if start\n    or stop are array-like.  By default (0), the samples will be along a\n    new axis inserted at the beginning. Use -1 to get an axis at the end.\n\nReturns\n-------\nsamples : ndarray\n    `num` samples, equally spaced on a log scale.\n\nSee Also\n--------\nlogspace : Similar to geomspace, but with endpoints specified using log\n           and base.\nlinspace : Similar to geomspace, but with arithmetic instead of geometric\n           progression.\narange : Similar to linspace, with the step size specified instead of the\n         number of samples.\n:ref:`how-to-partition`\n\nNotes\n-----\nIf the inputs or dtype are complex, the output will follow a logarithmic\nspiral in the complex plane.  (There are an infinite number of spirals\npassing through two points; the output will follow the shortest such path.)\n\nExamples\n--------\n>>> import numpy as np\n>>> np.geomspace(1, 1000, num=4)\narray([    1.,    10.,   100.,  1000.])\n>>> np.geomspace(1, 1000, num=3, endpoint=False)\narray([   1.,   10.,  100.])\n>>> np.geomspace(1, 1000, num=4, endpoint=False)\narray([   1.        ,    5.62341325,   31.6227766 ,  177.827941  ])\n>>> np.geomspace(1, 256, num=9)\narray([   1.,    2.,    4.,    8.,   16.,   32.,   64.,  128.,  256.])\n\nNote that the above may not produce exact integers:\n\n>>> np.geomspace(1, 256, num=9, dtype=int)\narray([  1,   2,   4,   7,  16,  32,  63, 127, 256])\n>>> np.around(np.geomspace(1, 256, num=9)).astype(int)\narray([  1,   2,   4,   8,  16,  32,  64, 128, 256])\n\nNegative, decreasing, and complex inputs are allowed:\n\n>>> np.geomspace(1000, 1, num=4)\narray([1000.,  100.,   10.,    1.])\n>>> np.geomspace(-1000, -1, num=4)\narray([-1000.,  -100.,   -10.,    -1.])\n>>> np.geomspace(1j, 1000j, num=4)  # Straight line\narray([0.   +1.j, 0.  +10.j, 0. +100.j, 0.+1000.j])\n>>> np.geomspace(-1+0j, 1+0j, num=5)  # Circle\narray([-1.00000000e+00+1.22464680e-16j, -7.07106781e-01+7.07106781e-01j,\n        6.12323400e-17+1.00000000e+00j,  7.07106781e-01+7.07106781e-01j,\n        1.00000000e+00+0.00000000e+00j])\n\nGraphical illustration of `endpoint` parameter:\n\n>>> import matplotlib.pyplot as plt\n>>> N = 10\n>>> y = np.zeros(N)\n>>> plt.semilogx(np.geomspace(1, 1000, N, endpoint=True), y + 1, 'o')\n[<matplotlib.lines.Line2D object at 0x...>]\n>>> plt.semilogx(np.geomspace(1, 1000, N, endpoint=False), y + 2, 'o')\n[<matplotlib.lines.Line2D object at 0x...>]\n>>> plt.axis([0.5, 2000, 0, 3])\n[0.5, 2000, 0, 3]\n>>> plt.grid(True, color='0.7', linestyle='-', which='both', axis='both')\n>>> plt.show()"
    },
    {
      "name": "add_newdoc",
      "docstring": "Add documentation to an existing object, typically one defined in C\n\nThe purpose is to allow easier editing of the docstrings without requiring\na re-compile. This exists primarily for internal use within numpy itself.\n\nParameters\n----------\nplace : str\n    The absolute name of the module to import from\nobj : str or None\n    The name of the object to add documentation to, typically a class or\n    function name.\ndoc : {str, Tuple[str, str], List[Tuple[str, str]]}\n    If a string, the documentation to apply to `obj`\n\n    If a tuple, then the first element is interpreted as an attribute\n    of `obj` and the second as the docstring to apply -\n    ``(method, docstring)``\n\n    If a list, then each element of the list should be a tuple of length\n    two - ``[(method1, docstring1), (method2, docstring2), ...]``\nwarn_on_python : bool\n    If True, the default, emit `UserWarning` if this is used to attach\n    documentation to a pure-python object.\n\nNotes\n-----\nThis routine never raises an error if the docstring can't be written, but\nwill raise an error if the object being documented does not exist.\n\nThis routine cannot modify read-only docstrings, as appear\nin new-style classes or built-in functions. Because this\nroutine never raises an error the caller must check manually\nthat the docstrings were changed.\n\nSince this function grabs the ``char *`` from a c-level str object and puts\nit into the ``tp_doc`` slot of the type of `obj`, it violates a number of\nC-API best-practices, by:\n\n- modifying a `PyTypeObject` after calling `PyType_Ready`\n- calling `Py_INCREF` on the str and losing the reference, so the str\n  will never be released\n\nIf possible it should be avoided."
    }
  ],
  "innovations": []
}