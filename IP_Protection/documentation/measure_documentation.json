{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\rich\\measure.py",
  "classes": [
    {
      "name": "Measurement",
      "docstring": "Stores the minimum and maximum widths (in characters) required to render an object.",
      "methods": [
        {
          "name": "span",
          "docstring": "Get difference between maximum and minimum."
        },
        {
          "name": "normalize",
          "docstring": "Get measurement that ensures that minimum <= maximum and minimum >= 0\n\nReturns:\n    Measurement: A normalized measurement."
        },
        {
          "name": "with_maximum",
          "docstring": "Get a RenderableWith where the widths are <= width.\n\nArgs:\n    width (int): Maximum desired width.\n\nReturns:\n    Measurement: New Measurement object."
        },
        {
          "name": "with_minimum",
          "docstring": "Get a RenderableWith where the widths are >= width.\n\nArgs:\n    width (int): Minimum desired width.\n\nReturns:\n    Measurement: New Measurement object."
        },
        {
          "name": "clamp",
          "docstring": "Clamp a measurement within the specified range.\n\nArgs:\n    min_width (int): Minimum desired width, or ``None`` for no minimum. Defaults to None.\n    max_width (int): Maximum desired width, or ``None`` for no maximum. Defaults to None.\n\nReturns:\n    Measurement: New Measurement object."
        },
        {
          "name": "get",
          "docstring": "Get a measurement for a renderable.\n\nArgs:\n    console (~rich.console.Console): Console instance.\n    options (~rich.console.ConsoleOptions): Console options.\n    renderable (RenderableType): An object that may be rendered with Rich.\n\nRaises:\n    errors.NotRenderableError: If the object is not renderable.\n\nReturns:\n    Measurement: Measurement object containing range of character widths required to render the object."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "measure_renderables",
      "docstring": "Get a measurement that would fit a number of renderables.\n\nArgs:\n    console (~rich.console.Console): Console instance.\n    options (~rich.console.ConsoleOptions): Console options.\n    renderables (Iterable[RenderableType]): One or more renderable objects.\n\nReturns:\n    Measurement: Measurement object containing range of character widths required to\n        contain all given renderables."
    },
    {
      "name": "span",
      "docstring": "Get difference between maximum and minimum."
    },
    {
      "name": "normalize",
      "docstring": "Get measurement that ensures that minimum <= maximum and minimum >= 0\n\nReturns:\n    Measurement: A normalized measurement."
    },
    {
      "name": "with_maximum",
      "docstring": "Get a RenderableWith where the widths are <= width.\n\nArgs:\n    width (int): Maximum desired width.\n\nReturns:\n    Measurement: New Measurement object."
    },
    {
      "name": "with_minimum",
      "docstring": "Get a RenderableWith where the widths are >= width.\n\nArgs:\n    width (int): Minimum desired width.\n\nReturns:\n    Measurement: New Measurement object."
    },
    {
      "name": "clamp",
      "docstring": "Clamp a measurement within the specified range.\n\nArgs:\n    min_width (int): Minimum desired width, or ``None`` for no minimum. Defaults to None.\n    max_width (int): Maximum desired width, or ``None`` for no maximum. Defaults to None.\n\nReturns:\n    Measurement: New Measurement object."
    },
    {
      "name": "get",
      "docstring": "Get a measurement for a renderable.\n\nArgs:\n    console (~rich.console.Console): Console instance.\n    options (~rich.console.ConsoleOptions): Console options.\n    renderable (RenderableType): An object that may be rendered with Rich.\n\nRaises:\n    errors.NotRenderableError: If the object is not renderable.\n\nReturns:\n    Measurement: Measurement object containing range of character widths required to render the object."
    }
  ],
  "innovations": []
}