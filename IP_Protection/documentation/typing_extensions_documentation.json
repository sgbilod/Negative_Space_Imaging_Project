{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\typing_extensions.py",
  "classes": [
    {
      "name": "_Sentinel",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_ExtensionsSpecialForm",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_DefaultMixin",
      "docstring": "Mixin for TypeVarLike defaults.",
      "methods": []
    },
    {
      "name": "_TypeVarLikeMeta",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_EllipsisDummy",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_SpecialForm",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "Format",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_AnyMeta",
      "docstring": null,
      "methods": []
    },
    {
      "name": "Any",
      "docstring": "Special type indicating an unconstrained type.\n- Any is compatible with every type.\n- Any assumed to have all methods.\n- All values assumed to be instances of Any.\nNote that all the above statements are true from the point of view of\nstatic type checkers. At runtime, Any should not be used with instance\nchecks.",
      "methods": []
    },
    {
      "name": "_LiteralGenericAlias",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_LiteralForm",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "_SpecialGenericAlias",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "_ProtocolMeta",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "Protocol",
      "docstring": null,
      "methods": []
    },
    {
      "name": "SupportsInt",
      "docstring": "An ABC with one abstract method __int__.",
      "methods": []
    },
    {
      "name": "SupportsFloat",
      "docstring": "An ABC with one abstract method __float__.",
      "methods": []
    },
    {
      "name": "SupportsComplex",
      "docstring": "An ABC with one abstract method __complex__.",
      "methods": []
    },
    {
      "name": "SupportsBytes",
      "docstring": "An ABC with one abstract method __bytes__.",
      "methods": []
    },
    {
      "name": "SupportsIndex",
      "docstring": null,
      "methods": []
    },
    {
      "name": "SupportsAbs",
      "docstring": "An ABC with one abstract method __abs__ that is covariant in its return type.",
      "methods": []
    },
    {
      "name": "SupportsRound",
      "docstring": "An ABC with one abstract method __round__ that is covariant in its return type.",
      "methods": []
    },
    {
      "name": "SingletonMeta",
      "docstring": null,
      "methods": []
    },
    {
      "name": "NoDefaultType",
      "docstring": "The type of the NoDefault singleton.",
      "methods": []
    },
    {
      "name": "NoExtraItemsType",
      "docstring": "The type of the NoExtraItems singleton.",
      "methods": []
    },
    {
      "name": "_TypedDictMeta",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_AnnotatedAlias",
      "docstring": "Runtime representation of an annotated type.\n\nAt its core 'Annotated[t, dec1, dec2, ...]' is an alias for the type 't'\nwith extra annotations. The alias behaves like a normal typing alias,\ninstantiating is the same as instantiating the underlying type, binding\nit to types is also the same.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "copy_with",
          "docstring": null
        }
      ]
    },
    {
      "name": "Annotated",
      "docstring": "Add context specific metadata to a type.\n\nExample: Annotated[int, runtime_check.Unsigned] indicates to the\nhypothetical runtime_check module that this type is an unsigned int.\nEvery other consumer of this type can ignore this metadata and treat\nthis type as int.\n\nThe first argument to Annotated must be a valid type (and will be in\nthe __origin__ field), the remaining arguments are kept as a tuple in\nthe __extra__ field.\n\nDetails:\n\n- It's an error to call `Annotated` with less than two arguments.\n- Nested Annotated are flattened::\n\n    Annotated[Annotated[T, Ann1, Ann2], Ann3] == Annotated[T, Ann1, Ann2, Ann3]\n\n- Instantiating an annotated type is equivalent to instantiating the\nunderlying type::\n\n    Annotated[C, Ann1](5) == C(5)\n\n- Annotated can be used as a generic type alias::\n\n    Optimized = Annotated[T, runtime.Optimize()]\n    Optimized[int] == Annotated[int, runtime.Optimize()]\n\n    OptimizedList = Annotated[List[T], runtime.Optimize()]\n    OptimizedList[int] == Annotated[List[int], runtime.Optimize()]",
      "methods": []
    },
    {
      "name": "TypeVar",
      "docstring": "Type variable.",
      "methods": []
    },
    {
      "name": "_Immutable",
      "docstring": "Mixin to indicate that object should not be copied.",
      "methods": []
    },
    {
      "name": "ParamSpecArgs",
      "docstring": "The args for a ParamSpec object.\n\nGiven a ParamSpec object P, P.args is an instance of ParamSpecArgs.\n\nParamSpecArgs objects have a reference back to their ParamSpec:\n\nP.args.__origin__ is P\n\nThis type is meant for runtime introspection and has no special meaning to\nstatic type checkers.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "ParamSpecKwargs",
      "docstring": "The kwargs for a ParamSpec object.\n\nGiven a ParamSpec object P, P.kwargs is an instance of ParamSpecKwargs.\n\nParamSpecKwargs objects have a reference back to their ParamSpec:\n\nP.kwargs.__origin__ is P\n\nThis type is meant for runtime introspection and has no special meaning to\nstatic type checkers.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "_ConcatenateGenericAlias",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "copy_with",
          "docstring": null
        }
      ]
    },
    {
      "name": "deprecated",
      "docstring": "Indicate that a class, function or overload is deprecated.\n\nWhen this decorator is applied to an object, the type checker\nwill generate a diagnostic on usage of the deprecated object.\n\nUsage:\n\n    @deprecated(\"Use B instead\")\n    class A:\n        pass\n\n    @deprecated(\"Use g instead\")\n    def f():\n        pass\n\n    @overload\n    @deprecated(\"int support is deprecated\")\n    def g(x: int) -> int: ...\n    @overload\n    def g(x: str) -> int: ...\n\nThe warning specified by *category* will be emitted at runtime\non use of deprecated objects. For functions, that happens on calls;\nfor classes, on instantiation and on creation of subclasses.\nIf the *category* is ``None``, no warning is emitted at runtime.\nThe *stacklevel* determines where the\nwarning is emitted. If it is ``1`` (the default), the warning\nis emitted at the direct caller of the deprecated object; if it\nis higher, it is emitted further up the stack.\nStatic type checker behavior is not affected by the *category*\nand *stacklevel* arguments.\n\nThe deprecation message passed to the decorator is saved in the\n``__deprecated__`` attribute on the decorated object.\nIf applied to an overload, the decorator\nmust be after the ``@overload`` decorator for the attribute to\nexist on the overload as returned by ``get_overloads()``.\n\nSee PEP 702 for details.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "_NamedTupleMeta",
      "docstring": null,
      "methods": []
    },
    {
      "name": "Buffer",
      "docstring": "Base class for classes that implement the buffer protocol.\n\nThe buffer protocol allows Python objects to expose a low-level\nmemory buffer interface. Before Python 3.12, it is not possible\nto implement the buffer protocol in pure Python code, or even\nto check whether a class implements the buffer protocol. In\nPython 3.12 and higher, the ``__buffer__`` method allows access\nto the buffer protocol from Python code, and the\n``collections.abc.Buffer`` ABC allows checking whether a class\nimplements the buffer protocol.\n\nTo indicate support for the buffer protocol in earlier versions,\ninherit from this ABC, either in a stub file or at runtime,\nor use ABC registration. This ABC provides no methods, because\nthere is no Python-accessible methods shared by pre-3.12 buffer\nclasses. It is useful primarily for static checks.",
      "methods": []
    },
    {
      "name": "NewType",
      "docstring": "NewType creates simple unique types with almost zero\nruntime overhead. NewType(name, tp) is considered a subtype of tp\nby static type checkers. At runtime, NewType(name, tp) returns\na dummy callable that simply returns its argument. Usage::\n    UserId = NewType('UserId', int)\n    def name_by_id(user_id: UserId) -> str:\n        ...\n    UserId('user')          # Fails type check\n    name_by_id(42)          # Fails type check\n    name_by_id(UserId(42))  # OK\n    num = UserId(5) + 1     # type: int",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "TypeAliasType",
      "docstring": "Create named, parameterized type aliases.\n\nThis provides a backport of the new `type` statement in Python 3.12:\n\n    type ListOrSet[T] = list[T] | set[T]\n\nis equivalent to:\n\n    T = TypeVar(\"T\")\n    ListOrSet = TypeAliasType(\"ListOrSet\", list[T] | set[T], type_params=(T,))\n\nThe name ListOrSet can then be used as an alias for the type it refers to.\n\nThe type_params argument should contain all the type parameters used\nin the value of the type alias. If the alias is not generic, this\nargument is omitted.\n\nStatic type checkers should only support type aliases declared using\nTypeAliasType that follow these rules:\n\n- The first argument (the name) must be a string literal.\n- The TypeAliasType instance must be immediately assigned to a variable\n  of the same name. (For example, 'X = TypeAliasType(\"Y\", int)' is invalid,\n  as is 'X, Y = TypeAliasType(\"X\", int), TypeAliasType(\"Y\", int)').",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "Doc",
      "docstring": "Define the documentation of a type annotation using ``Annotated``, to be\n used in class attributes, function and method parameters, return values,\n and variables.\n\nThe value should be a positional-only string literal to allow static tools\nlike editors and documentation generators to use it.\n\nThis complements docstrings.\n\nThe string value passed is available in the attribute ``documentation``.\n\nExample::\n\n    >>> from typing_extensions import Annotated, Doc\n    >>> def hi(to: Annotated[str, Doc(\"Who to say hi to\")]) -> None: ...",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "ParamSpec",
      "docstring": "Parameter specification.",
      "methods": []
    },
    {
      "name": "ParamSpec",
      "docstring": "Parameter specification variable.\n\nUsage::\n\n   P = ParamSpec('P')\n\nParameter specification variables exist primarily for the benefit of static\ntype checkers.  They are used to forward the parameter types of one\ncallable to another callable, a pattern commonly found in higher order\nfunctions and decorators.  They are only valid when used in ``Concatenate``,\nor s the first argument to ``Callable``. In Python 3.10 and higher,\nthey are also supported in user-defined Generics at runtime.\nSee class Generic for more information on generic types.  An\nexample for annotating a decorator::\n\n   T = TypeVar('T')\n   P = ParamSpec('P')\n\n   def add_logging(f: Callable[P, T]) -> Callable[P, T]:\n       '''A type-safe decorator to add logging to a function.'''\n       def inner(*args: P.args, **kwargs: P.kwargs) -> T:\n           logging.info(f'{f.__name__} was called')\n           return f(*args, **kwargs)\n       return inner\n\n   @add_logging\n   def add_two(x: float, y: float) -> float:\n       '''Add two numbers together.'''\n       return x + y\n\nParameter specification variables defined with covariant=True or\ncontravariant=True can be used to declare covariant or contravariant\ngeneric types.  These keyword arguments are valid, but their actual semantics\nare yet to be decided.  See PEP 612 for details.\n\nParameter specification variables can be introspected. e.g.:\n\n   P.__name__ == 'T'\n   P.__bound__ == None\n   P.__covariant__ == False\n   P.__contravariant__ == False\n\nNote that only parameter specification variables defined in global scope can\nbe pickled.",
      "methods": [
        {
          "name": "args",
          "docstring": null
        },
        {
          "name": "kwargs",
          "docstring": null
        },
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "_ConcatenateGenericAlias",
      "docstring": null,
      "methods": [
        {
          "name": "copy_with",
          "docstring": null
        }
      ]
    },
    {
      "name": "_ConcatenateForm",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_TypeGuardForm",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_TypeIsForm",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_TypeFormForm",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_TypeFormForm",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_RequiredForm",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_ReadOnlyForm",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_UnpackSpecialForm",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "_UnpackAlias",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_UnpackAlias",
      "docstring": null,
      "methods": []
    },
    {
      "name": "_UnpackForm",
      "docstring": null,
      "methods": []
    },
    {
      "name": "TypeVarTuple",
      "docstring": "Type variable tuple.",
      "methods": []
    },
    {
      "name": "TypeVarTuple",
      "docstring": "Type variable tuple.\n\nUsage::\n\n    Ts = TypeVarTuple('Ts')\n\nIn the same way that a normal type variable is a stand-in for a single\ntype such as ``int``, a type variable *tuple* is a stand-in for a *tuple*\ntype such as ``Tuple[int, str]``.\n\nType variable tuples can be used in ``Generic`` declarations.\nConsider the following example::\n\n    class Array(Generic[*Ts]): ...\n\nThe ``Ts`` type variable tuple here behaves like ``tuple[T1, T2]``,\nwhere ``T1`` and ``T2`` are type variables. To use these type variables\nas type parameters of ``Array``, we must *unpack* the type variable tuple using\nthe star operator: ``*Ts``. The signature of ``Array`` then behaves\nas if we had simply written ``class Array(Generic[T1, T2]): ...``.\nIn contrast to ``Generic[T1, T2]``, however, ``Generic[*Shape]`` allows\nus to parameterise the class with an *arbitrary* number of type parameters.\n\nType variable tuples can be used anywhere a normal ``TypeVar`` can.\nThis includes class definitions, as shown above, as well as function\nsignatures and variable annotations::\n\n    class Array(Generic[*Ts]):\n\n        def __init__(self, shape: Tuple[*Ts]):\n            self._shape: Tuple[*Ts] = shape\n\n        def get_shape(self) -> Tuple[*Ts]:\n            return self._shape\n\n    shape = (Height(480), Width(640))\n    x: Array[Height, Width] = Array(shape)\n    y = abs(x)  # Inferred type is Array[Height, Width]\n    z = x + x   #        ...    is Array[Height, Width]\n    x.get_shape()  #     ...    is tuple[Height, Width]",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        }
      ]
    },
    {
      "name": "_TypeAliasGenericAlias",
      "docstring": null,
      "methods": []
    },
    {
      "name": "Dummy",
      "docstring": null,
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "IntVar",
      "docstring": null
    },
    {
      "name": "final",
      "docstring": "This decorator can be used to indicate to type checkers that\nthe decorated method cannot be overridden, and decorated class\ncannot be subclassed. For example:\n\n    class Base:\n        @final\n        def done(self) -> None:\n            ...\n    class Sub(Base):\n        def done(self) -> None:  # Error reported by type checker\n            ...\n    @final\n    class Leaf:\n        ...\n    class Other(Leaf):  # Error reported by type checker\n        ...\n\nThere is no runtime checking of these properties. The decorator\nsets the ``__final__`` attribute to ``True`` on the decorated object\nto allow runtime introspection."
    },
    {
      "name": "overload",
      "docstring": "Decorator for overloaded functions/methods.\n\nIn a stub file, place two or more stub definitions for the same\nfunction in a row, each decorated with @overload.  For example:\n\n@overload\ndef utf8(value: None) -> None: ...\n@overload\ndef utf8(value: bytes) -> bytes: ...\n@overload\ndef utf8(value: str) -> bytes: ...\n\nIn a non-stub file (i.e. a regular .py file), do the same but\nfollow it with an implementation.  The implementation should *not*\nbe decorated with @overload.  For example:\n\n@overload\ndef utf8(value: None) -> None: ...\n@overload\ndef utf8(value: bytes) -> bytes: ...\n@overload\ndef utf8(value: str) -> bytes: ...\ndef utf8(value):\n    # implementation goes here\n\nThe overloads for a function can be retrieved at runtime using the\nget_overloads() function."
    },
    {
      "name": "get_overloads",
      "docstring": "Return all defined overloads for *func* as a sequence."
    },
    {
      "name": "clear_overloads",
      "docstring": "Clear all overloads in the registry."
    },
    {
      "name": "runtime_checkable",
      "docstring": "Mark a protocol class as a runtime protocol.\n\nSuch protocol can be used with isinstance() and issubclass().\nRaise TypeError if applied to a non-protocol class.\nThis allows a simple-minded structural check very similar to\none trick ponies in collections.abc such as Iterable.\n\nFor example::\n\n    @runtime_checkable\n    class Closable(Protocol):\n        def close(self): ...\n\n    assert isinstance(open('/some/file'), Closable)\n\nWarning: this will check only the presence of the required methods,\nnot their type signatures!"
    },
    {
      "name": "inner",
      "docstring": null
    },
    {
      "name": "TypedDict",
      "docstring": "A simple typed namespace. At runtime it is equivalent to a plain dict.\n\nTypedDict creates a dictionary type such that a type checker will expect all\ninstances to have a certain set of keys, where each key is\nassociated with a value of a consistent type. This expectation\nis not checked at runtime.\n\nUsage::\n\n    class Point2D(TypedDict):\n        x: int\n        y: int\n        label: str\n\n    a: Point2D = {'x': 1, 'y': 2, 'label': 'good'}  # OK\n    b: Point2D = {'z': 3, 'label': 'bad'}           # Fails type check\n\n    assert Point2D(x=1, y=2, label='first') == dict(x=1, y=2, label='first')\n\nThe type info can be accessed via the Point2D.__annotations__ dict, and\nthe Point2D.__required_keys__ and Point2D.__optional_keys__ frozensets.\nTypedDict supports an additional equivalent form::\n\n    Point2D = TypedDict('Point2D', {'x': int, 'y': int, 'label': str})\n\nBy default, all keys must be present in a TypedDict. It is possible\nto override this by specifying totality::\n\n    class Point2D(TypedDict, total=False):\n        x: int\n        y: int\n\nThis means that a Point2D TypedDict can have any of the keys omitted. A type\nchecker is only expected to support a literal False or True as the value of\nthe total argument. True is the default, and makes all items defined in the\nclass body be required.\n\nThe Required and NotRequired special forms can also be used to mark\nindividual keys as being required or not required::\n\n    class Point2D(TypedDict):\n        x: int  # the \"x\" key must always be present (Required is the default)\n        y: NotRequired[int]  # the \"y\" key can be omitted\n\nSee PEP 655 for more details on Required and NotRequired."
    },
    {
      "name": "is_typeddict",
      "docstring": "Check if an annotation is a TypedDict class\n\nFor example::\n    class Film(TypedDict):\n        title: str\n        year: int\n\n    is_typeddict(Film)  # => True\n    is_typeddict(Union[list, str])  # => False"
    },
    {
      "name": "assert_type",
      "docstring": "Assert (to the type checker) that the value is of the given type.\n\nWhen the type checker encounters a call to assert_type(), it\nemits an error if the value is not of the specified type::\n\n    def greet(name: str) -> None:\n        assert_type(name, str)  # ok\n        assert_type(name, int)  # type checker error\n\nAt runtime this returns the first argument unchanged and otherwise\ndoes nothing."
    },
    {
      "name": "get_type_hints",
      "docstring": "Return type hints for an object.\n\nThis is often the same as obj.__annotations__, but it handles\nforward references encoded as string literals, adds Optional[t] if a\ndefault value equal to None is set and recursively replaces all\n'Annotated[T, ...]', 'Required[T]' or 'NotRequired[T]' with 'T'\n(unless 'include_extras=True').\n\nThe argument may be a module, class, method, or function. The annotations\nare returned as a dictionary. For classes, annotations include also\ninherited members.\n\nTypeError is raised if the argument is not of a type that can contain\nannotations, and an empty dictionary is returned if no annotations are\npresent.\n\nBEWARE -- the behavior of globalns and localns is counterintuitive\n(unless you are familiar with how eval() and exec() work).  The\nsearch order is locals first, then globals.\n\n- If no dict arguments are passed, an attempt is made to use the\n  globals from obj (or the respective module's globals for classes),\n  and these are also used as the locals.  If the object does not appear\n  to have globals, an empty dictionary is used.\n\n- If one dict argument is passed, it is used for both globals and\n  locals.\n\n- If two dict arguments are passed, they specify globals and\n  locals, respectively."
    },
    {
      "name": "get_origin",
      "docstring": "Get the unsubscripted version of a type.\n\nThis supports generic types, Callable, Tuple, Union, Literal, Final, ClassVar\nand Annotated. Return None for unsupported types. Examples::\n\n    get_origin(Literal[42]) is Literal\n    get_origin(int) is None\n    get_origin(ClassVar[int]) is ClassVar\n    get_origin(Generic) is Generic\n    get_origin(Generic[T]) is Generic\n    get_origin(Union[T, int]) is Union\n    get_origin(List[Tuple[T, T]][int]) == list\n    get_origin(P.args) is P"
    },
    {
      "name": "get_args",
      "docstring": "Get type arguments with all substitutions performed.\n\nFor unions, basic simplifications used by Union constructor are performed.\nExamples::\n    get_args(Dict[str, int]) == (str, int)\n    get_args(int) == ()\n    get_args(Union[int, Union[T, int], str][int]) == (int, str)\n    get_args(Union[int, Tuple[T, int]][str]) == (int, Tuple[str, int])\n    get_args(Callable[[], T][int]) == ([], int)"
    },
    {
      "name": "LiteralString",
      "docstring": "Represents an arbitrary literal string.\n\nExample::\n\n  from pip._vendor.typing_extensions import LiteralString\n\n  def query(sql: LiteralString) -> ...:\n      ...\n\n  query(\"SELECT * FROM table\")  # ok\n  query(f\"SELECT * FROM {input()}\")  # not ok\n\nSee PEP 675 for details."
    },
    {
      "name": "Self",
      "docstring": "Used to spell the type of \"self\" in classes.\n\nExample::\n\n  from typing import Self\n\n  class ReturnsSelf:\n      def parse(self, data: bytes) -> Self:\n          ...\n          return self"
    },
    {
      "name": "Never",
      "docstring": "The bottom type, a type that has no members.\n\nThis can be used to define a function that should never be\ncalled, or a function that never returns::\n\n    from pip._vendor.typing_extensions import Never\n\n    def never_call_me(arg: Never) -> None:\n        pass\n\n    def int_or_str(arg: int | str) -> None:\n        never_call_me(arg)  # type checker error\n        match arg:\n            case int():\n                print(\"It's an int\")\n            case str():\n                print(\"It's a str\")\n            case _:\n                never_call_me(arg)  # ok, arg is of type Never"
    },
    {
      "name": "reveal_type",
      "docstring": "Reveal the inferred type of a variable.\n\nWhen a static type checker encounters a call to ``reveal_type()``,\nit will emit the inferred type of the argument::\n\n    x: int = 1\n    reveal_type(x)\n\nRunning a static type checker (e.g., ``mypy``) on this example\nwill produce output similar to 'Revealed type is \"builtins.int\"'.\n\nAt runtime, the function prints the runtime type of the\nargument and returns it unchanged."
    },
    {
      "name": "assert_never",
      "docstring": "Assert to the type checker that a line of code is unreachable.\n\nExample::\n\n    def int_or_str(arg: int | str) -> None:\n        match arg:\n            case int():\n                print(\"It's an int\")\n            case str():\n                print(\"It's a str\")\n            case _:\n                assert_never(arg)\n\nIf a type checker finds that a call to assert_never() is\nreachable, it will emit an error.\n\nAt runtime, this throws an exception when called."
    },
    {
      "name": "dataclass_transform",
      "docstring": "Decorator that marks a function, class, or metaclass as providing\ndataclass-like behavior.\n\nExample:\n\n    from pip._vendor.typing_extensions import dataclass_transform\n\n    _T = TypeVar(\"_T\")\n\n    # Used on a decorator function\n    @dataclass_transform()\n    def create_model(cls: type[_T]) -> type[_T]:\n        ...\n        return cls\n\n    @create_model\n    class CustomerModel:\n        id: int\n        name: str\n\n    # Used on a base class\n    @dataclass_transform()\n    class ModelBase: ...\n\n    class CustomerModel(ModelBase):\n        id: int\n        name: str\n\n    # Used on a metaclass\n    @dataclass_transform()\n    class ModelMeta(type): ...\n\n    class ModelBase(metaclass=ModelMeta): ...\n\n    class CustomerModel(ModelBase):\n        id: int\n        name: str\n\nEach of the ``CustomerModel`` classes defined in this example will now\nbehave similarly to a dataclass created with the ``@dataclasses.dataclass``\ndecorator. For example, the type checker will synthesize an ``__init__``\nmethod.\n\nThe arguments to this decorator can be used to customize this behavior:\n- ``eq_default`` indicates whether the ``eq`` parameter is assumed to be\n  True or False if it is omitted by the caller.\n- ``order_default`` indicates whether the ``order`` parameter is\n  assumed to be True or False if it is omitted by the caller.\n- ``kw_only_default`` indicates whether the ``kw_only`` parameter is\n  assumed to be True or False if it is omitted by the caller.\n- ``frozen_default`` indicates whether the ``frozen`` parameter is\n  assumed to be True or False if it is omitted by the caller.\n- ``field_specifiers`` specifies a static list of supported classes\n  or functions that describe fields, similar to ``dataclasses.field()``.\n\nAt runtime, this decorator records its arguments in the\n``__dataclass_transform__`` attribute on the decorated object.\n\nSee PEP 681 for details."
    },
    {
      "name": "override",
      "docstring": "Indicate that a method is intended to override a method in a base class.\n\nUsage:\n\n    class Base:\n        def method(self) -> None:\n            pass\n\n    class Child(Base):\n        @override\n        def method(self) -> None:\n            super().method()\n\nWhen this decorator is applied to a method, the type checker will\nvalidate that it overrides a method with the same name on a base class.\nThis helps prevent bugs that may occur when a base class is changed\nwithout an equivalent change to a child class.\n\nThere is no runtime checking of these properties. The decorator\nsets the ``__override__`` attribute to ``True`` on the decorated object\nto allow runtime introspection.\n\nSee PEP 698 for details."
    },
    {
      "name": "NamedTuple",
      "docstring": "Typed version of namedtuple.\n\nUsage::\n\n    class Employee(NamedTuple):\n        name: str\n        id: int\n\nThis is equivalent to::\n\n    Employee = collections.namedtuple('Employee', ['name', 'id'])\n\nThe resulting class has an extra __annotations__ attribute, giving a\ndict that maps field names to types.  (The field names are also in\nthe _fields attribute, which is part of the namedtuple API.)\nAn alternative equivalent functional syntax is also accepted::\n\n    Employee = NamedTuple('Employee', [('name', str), ('id', int)])"
    },
    {
      "name": "get_original_bases",
      "docstring": "Return the class's \"original\" bases prior to modification by `__mro_entries__`.\n\nExamples::\n\n    from typing import TypeVar, Generic\n    from pip._vendor.typing_extensions import NamedTuple, TypedDict\n\n    T = TypeVar(\"T\")\n    class Foo(Generic[T]): ...\n    class Bar(Foo[int], float): ...\n    class Baz(list[str]): ...\n    Eggs = NamedTuple(\"Eggs\", [(\"a\", int), (\"b\", str)])\n    Spam = TypedDict(\"Spam\", {\"a\": int, \"b\": str})\n\n    assert get_original_bases(Bar) == (Foo[int], float)\n    assert get_original_bases(Baz) == (list[str],)\n    assert get_original_bases(Eggs) == (NamedTuple,)\n    assert get_original_bases(Spam) == (TypedDict,)\n    assert get_original_bases(int) == (object,)"
    },
    {
      "name": "is_protocol",
      "docstring": "Return True if the given type is a Protocol.\n\nExample::\n\n    >>> from typing_extensions import Protocol, is_protocol\n    >>> class P(Protocol):\n    ...     def a(self) -> str: ...\n    ...     b: int\n    >>> is_protocol(P)\n    True\n    >>> is_protocol(int)\n    False"
    },
    {
      "name": "get_protocol_members",
      "docstring": "Return the set of members defined in a Protocol.\n\nExample::\n\n    >>> from typing_extensions import Protocol, get_protocol_members\n    >>> class P(Protocol):\n    ...     def a(self) -> str: ...\n    ...     b: int\n    >>> get_protocol_members(P)\n    frozenset({'a', 'b'})\n\nRaise a TypeError for arguments that are not Protocols."
    },
    {
      "name": "get_annotations",
      "docstring": "Compute the annotations dict for an object.\n\nobj may be a callable, class, or module.\nPassing in an object of any other type raises TypeError.\n\nReturns a dict.  get_annotations() returns a new dict every time\nit's called; calling it twice on the same object will return two\ndifferent but equivalent dicts.\n\nThis is a backport of `inspect.get_annotations`, which has been\nin the standard library since Python 3.10. See the standard library\ndocumentation for more:\n\n    https://docs.python.org/3/library/inspect.html#inspect.get_annotations\n\nThis backport adds the *format* argument introduced by PEP 649. The\nthree formats supported are:\n* VALUE: the annotations are returned as-is. This is the default and\n  it is compatible with the behavior on previous Python versions.\n* FORWARDREF: return annotations as-is if possible, but replace any\n  undefined names with ForwardRef objects. The implementation proposed by\n  PEP 649 relies on language changes that cannot be backported; the\n  typing-extensions implementation simply returns the same result as VALUE.\n* STRING: return annotations as strings, in a format close to the original\n  source. Again, this behavior cannot be replicated directly in a backport.\n  As an approximation, typing-extensions retrieves the annotations under\n  VALUE semantics and then stringifies them.\n\nThe purpose of this backport is to allow users who would like to use\nFORWARDREF or STRING semantics once PEP 649 is implemented, but who also\nwant to support earlier Python versions, to simply write:\n\n    typing_extensions.get_annotations(obj, format=Format.FORWARDREF)"
    },
    {
      "name": "evaluate_forward_ref",
      "docstring": "Evaluate a forward reference as a type hint.\n\nThis is similar to calling the ForwardRef.evaluate() method,\nbut unlike that method, evaluate_forward_ref() also:\n\n* Recursively evaluates forward references nested within the type hint.\n* Rejects certain objects that are not valid type hints.\n* Replaces type hints that evaluate to None with types.NoneType.\n* Supports the *FORWARDREF* and *STRING* formats.\n\n*forward_ref* must be an instance of ForwardRef. *owner*, if given,\nshould be the object that holds the annotations that the forward reference\nderived from, such as a module, class object, or function. It is used to\ninfer the namespaces to use for looking up names. *globals* and *locals*\ncan also be explicitly given to provide the global and local namespaces.\n*type_params* is a tuple of type parameters that are in scope when\nevaluating the forward reference. This parameter must be provided (though\nit may be an empty tuple) if *owner* is not given and the forward reference\ndoes not already have an owner set. *format* specifies the format of the\nannotation and is a member of the annotationlib.Format enum."
    },
    {
      "name": "copy_with",
      "docstring": null
    },
    {
      "name": "TypeAlias",
      "docstring": "Special marker indicating that an assignment should\nbe recognized as a proper type alias definition by type\ncheckers.\n\nFor example::\n\n    Predicate: TypeAlias = Callable[..., bool]\n\nIt's invalid when used anywhere except as in the example above."
    },
    {
      "name": "copy_with",
      "docstring": null
    },
    {
      "name": "Concatenate",
      "docstring": "Used in conjunction with ``ParamSpec`` and ``Callable`` to represent a\nhigher order function which adds, removes or transforms parameters of a\ncallable.\n\nFor example::\n\n   Callable[Concatenate[int, P], int]\n\nSee PEP 612 for detailed information."
    },
    {
      "name": "TypeGuard",
      "docstring": "Special typing form used to annotate the return type of a user-defined\ntype guard function.  ``TypeGuard`` only accepts a single type argument.\nAt runtime, functions marked this way should return a boolean.\n\n``TypeGuard`` aims to benefit *type narrowing* -- a technique used by static\ntype checkers to determine a more precise type of an expression within a\nprogram's code flow.  Usually type narrowing is done by analyzing\nconditional code flow and applying the narrowing to a block of code.  The\nconditional expression here is sometimes referred to as a \"type guard\".\n\nSometimes it would be convenient to use a user-defined boolean function\nas a type guard.  Such a function should use ``TypeGuard[...]`` as its\nreturn type to alert static type checkers to this intention.\n\nUsing  ``-> TypeGuard`` tells the static type checker that for a given\nfunction:\n\n1. The return value is a boolean.\n2. If the return value is ``True``, the type of its argument\nis the type inside ``TypeGuard``.\n\nFor example::\n\n    def is_str(val: Union[str, float]):\n        # \"isinstance\" type guard\n        if isinstance(val, str):\n            # Type of ``val`` is narrowed to ``str``\n            ...\n        else:\n            # Else, type of ``val`` is narrowed to ``float``.\n            ...\n\nStrict type narrowing is not enforced -- ``TypeB`` need not be a narrower\nform of ``TypeA`` (it can even be a wider form) and this may lead to\ntype-unsafe results.  The main reason is to allow for things like\nnarrowing ``List[object]`` to ``List[str]`` even though the latter is not\na subtype of the former, since ``List`` is invariant.  The responsibility of\nwriting type-safe type guards is left to the user.\n\n``TypeGuard`` also works with type variables.  For more information, see\nPEP 647 (User-Defined Type Guards)."
    },
    {
      "name": "TypeIs",
      "docstring": "Special typing form used to annotate the return type of a user-defined\ntype narrower function.  ``TypeIs`` only accepts a single type argument.\nAt runtime, functions marked this way should return a boolean.\n\n``TypeIs`` aims to benefit *type narrowing* -- a technique used by static\ntype checkers to determine a more precise type of an expression within a\nprogram's code flow.  Usually type narrowing is done by analyzing\nconditional code flow and applying the narrowing to a block of code.  The\nconditional expression here is sometimes referred to as a \"type guard\".\n\nSometimes it would be convenient to use a user-defined boolean function\nas a type guard.  Such a function should use ``TypeIs[...]`` as its\nreturn type to alert static type checkers to this intention.\n\nUsing  ``-> TypeIs`` tells the static type checker that for a given\nfunction:\n\n1. The return value is a boolean.\n2. If the return value is ``True``, the type of its argument\nis the intersection of the type inside ``TypeIs`` and the argument's\npreviously known type.\n\nFor example::\n\n    def is_awaitable(val: object) -> TypeIs[Awaitable[Any]]:\n        return hasattr(val, '__await__')\n\n    def f(val: Union[int, Awaitable[int]]) -> int:\n        if is_awaitable(val):\n            assert_type(val, Awaitable[int])\n        else:\n            assert_type(val, int)\n\n``TypeIs`` also works with type variables.  For more information, see\nPEP 742 (Narrowing types with TypeIs)."
    },
    {
      "name": "TypeForm",
      "docstring": "A special form representing the value that results from the evaluation\nof a type expression. This value encodes the information supplied in the\ntype expression, and it represents the type described by that type expression.\n\nWhen used in a type expression, TypeForm describes a set of type form objects.\nIt accepts a single type argument, which must be a valid type expression.\n``TypeForm[T]`` describes the set of all type form objects that represent\nthe type T or types that are assignable to T.\n\nUsage:\n\n    def cast[T](typ: TypeForm[T], value: Any) -> T: ...\n\n    reveal_type(cast(int, \"x\"))  # int\n\nSee PEP 747 for more information."
    },
    {
      "name": "Required",
      "docstring": "A special typing construct to mark a key of a total=False TypedDict\nas required. For example:\n\n    class Movie(TypedDict, total=False):\n        title: Required[str]\n        year: int\n\n    m = Movie(\n        title='The Matrix',  # typechecker error if key is omitted\n        year=1999,\n    )\n\nThere is no runtime checking that a required key is actually provided\nwhen instantiating a related TypedDict."
    },
    {
      "name": "NotRequired",
      "docstring": "A special typing construct to mark a key of a TypedDict as\npotentially missing. For example:\n\n    class Movie(TypedDict):\n        title: str\n        year: NotRequired[int]\n\n    m = Movie(\n        title='The Matrix',  # typechecker error if key is omitted\n        year=1999,\n    )"
    },
    {
      "name": "ReadOnly",
      "docstring": "A special typing construct to mark an item of a TypedDict as read-only.\n\nFor example:\n\n    class Movie(TypedDict):\n        title: ReadOnly[str]\n        year: int\n\n    def mutate_movie(m: Movie) -> None:\n        m[\"year\"] = 1992  # allowed\n        m[\"title\"] = \"The Matrix\"  # typechecker error\n\nThere is no runtime checking for this property."
    },
    {
      "name": "Unpack",
      "docstring": null
    },
    {
      "name": "decorator",
      "docstring": null
    },
    {
      "name": "args",
      "docstring": null
    },
    {
      "name": "kwargs",
      "docstring": null
    },
    {
      "name": "copy_with",
      "docstring": null
    },
    {
      "name": "wrapper",
      "docstring": null
    }
  ],
  "innovations": []
}