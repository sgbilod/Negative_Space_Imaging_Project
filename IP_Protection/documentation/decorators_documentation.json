{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\testing\\decorators.py",
  "classes": [
    {
      "name": "_ImageComparisonBase",
      "docstring": "Image comparison base class\n\nThis class provides *just* the comparison-related functionality and avoids\nany code that would be specific to any testing framework.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "copy_baseline",
          "docstring": null
        },
        {
          "name": "compare",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "remove_ticks_and_titles",
      "docstring": null
    },
    {
      "name": "image_comparison",
      "docstring": "Compare images generated by the test with those specified in\n*baseline_images*, which must correspond, else an `.ImageComparisonFailure`\nexception will be raised.\n\nParameters\n----------\nbaseline_images : list or None\n    A list of strings specifying the names of the images generated by\n    calls to `.Figure.savefig`.\n\n    If *None*, the test function must use the ``baseline_images`` fixture,\n    either as a parameter or with `pytest.mark.usefixtures`. This value is\n    only allowed when using pytest.\n\nextensions : None or list of str\n    The list of extensions to test, e.g. ``['png', 'pdf']``.\n\n    If *None*, defaults to all supported extensions: png, pdf, and svg.\n\n    When testing a single extension, it can be directly included in the\n    names passed to *baseline_images*.  In that case, *extensions* must not\n    be set.\n\n    In order to keep the size of the test suite from ballooning, we only\n    include the ``svg`` or ``pdf`` outputs if the test is explicitly\n    exercising a feature dependent on that backend (see also the\n    `check_figures_equal` decorator for that purpose).\n\ntol : float, default: 0\n    The RMS threshold above which the test is considered failed.\n\n    Due to expected small differences in floating-point calculations, on\n    32-bit systems an additional 0.06 is added to this threshold.\n\nfreetype_version : str or tuple\n    The expected freetype version or range of versions for this test to\n    pass.\n\nremove_text : bool\n    Remove the title and tick text from the figure before comparison.  This\n    is useful to make the baseline images independent of variations in text\n    rendering between different versions of FreeType.\n\n    This does not remove other, more deliberate, text, such as legends and\n    annotations.\n\nsavefig_kwarg : dict\n    Optional arguments that are passed to the savefig method.\n\nstyle : str, dict, or list\n    The optional style(s) to apply to the image test. The test itself\n    can also apply additional styles if desired. Defaults to ``[\"classic\",\n    \"_classic_test_patch\"]``."
    },
    {
      "name": "check_figures_equal",
      "docstring": "Decorator for test cases that generate and compare two figures.\n\nThe decorated function must take two keyword arguments, *fig_test*\nand *fig_ref*, and draw the test and reference images on them.\nAfter the function returns, the figures are saved and compared.\n\nThis decorator should be preferred over `image_comparison` when possible in\norder to keep the size of the test suite from ballooning.\n\nParameters\n----------\nextensions : list, default: [\"png\", \"pdf\", \"svg\"]\n    The extensions to test.\ntol : float\n    The RMS threshold above which the test is considered failed.\n\nRaises\n------\nRuntimeError\n    If any new figures are created (and not subsequently closed) inside\n    the test function.\n\nExamples\n--------\nCheck that calling `.Axes.plot` with a single argument plots it against\n``[0, 1, 2, ...]``::\n\n    @check_figures_equal()\n    def test_plot(fig_test, fig_ref):\n        fig_test.subplots().plot([1, 3, 5])\n        fig_ref.subplots().plot([0, 1, 2], [1, 3, 5])"
    },
    {
      "name": "remove_ticks",
      "docstring": "Remove ticks in *ax* and all its child Axes."
    },
    {
      "name": "copy_baseline",
      "docstring": null
    },
    {
      "name": "compare",
      "docstring": null
    },
    {
      "name": "decorator",
      "docstring": null
    },
    {
      "name": "decorator",
      "docstring": null
    },
    {
      "name": "wrapper",
      "docstring": null
    },
    {
      "name": "wrapper",
      "docstring": null
    }
  ],
  "innovations": []
}