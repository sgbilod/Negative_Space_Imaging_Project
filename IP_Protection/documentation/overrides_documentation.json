{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\_core\\overrides.py",
  "classes": [],
  "functions": [
    {
      "name": "get_array_function_like_doc",
      "docstring": null
    },
    {
      "name": "finalize_array_function_like",
      "docstring": null
    },
    {
      "name": "verify_matching_signatures",
      "docstring": "Verify that a dispatcher function has the right signature."
    },
    {
      "name": "array_function_dispatch",
      "docstring": "Decorator for adding dispatch with the __array_function__ protocol.\n\nSee NEP-18 for example usage.\n\nParameters\n----------\ndispatcher : callable or None\n    Function that when called like ``dispatcher(*args, **kwargs)`` with\n    arguments from the NumPy function call returns an iterable of\n    array-like arguments to check for ``__array_function__``.\n\n    If `None`, the first argument is used as the single `like=` argument\n    and not passed on.  A function implementing `like=` must call its\n    dispatcher with `like` as the first non-keyword argument.\nmodule : str, optional\n    __module__ attribute to set on new function, e.g., ``module='numpy'``.\n    By default, module is copied from the decorated function.\nverify : bool, optional\n    If True, verify the that the signature of the dispatcher and decorated\n    function signatures match exactly: all required and optional arguments\n    should appear in order with the same names, but the default values for\n    all optional arguments should be ``None``. Only disable verification\n    if the dispatcher's signature needs to deviate for some particular\n    reason, e.g., because the function has a signature like\n    ``func(*args, **kwargs)``.\ndocs_from_dispatcher : bool, optional\n    If True, copy docs from the dispatcher function onto the dispatched\n    function, rather than from the implementation. This is useful for\n    functions defined in C, which otherwise don't have docstrings.\n\nReturns\n-------\nFunction suitable for decorating the implementation of a NumPy function."
    },
    {
      "name": "array_function_from_dispatcher",
      "docstring": "Like array_function_dispatcher, but with function arguments flipped."
    },
    {
      "name": "decorator",
      "docstring": null
    },
    {
      "name": "decorator",
      "docstring": null
    }
  ],
  "innovations": []
}