{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\PIL\\ImageMorph.py",
  "classes": [
    {
      "name": "LutBuilder",
      "docstring": "A class for building a MorphLut from a descriptive language\n\nThe input patterns is a list of a strings sequences like these::\n\n    4:(...\n       .1.\n       111)->1\n\n(whitespaces including linebreaks are ignored). The option 4\ndescribes a series of symmetry operations (in this case a\n4-rotation), the pattern is described by:\n\n- . or X - Ignore\n- 1 - Pixel is on\n- 0 - Pixel is off\n\nThe result of the operation is described after \"->\" string.\n\nThe default is to return the current pixel value, which is\nreturned if no other match is found.\n\nOperations:\n\n- 4 - 4 way rotation\n- N - Negate\n- 1 - Dummy op for no other operation (an op must always be given)\n- M - Mirroring\n\nExample::\n\n    lb = LutBuilder(patterns = [\"4:(... .1. 111)->1\"])\n    lut = lb.build_lut()",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "add_patterns",
          "docstring": null
        },
        {
          "name": "build_default_lut",
          "docstring": null
        },
        {
          "name": "get_lut",
          "docstring": null
        },
        {
          "name": "build_lut",
          "docstring": "Compile all patterns into a morphology lut.\n\nTBD :Build based on (file) morphlut:modify_lut"
        }
      ]
    },
    {
      "name": "MorphOp",
      "docstring": "A class for binary morphological operators",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Create a binary morphological operator"
        },
        {
          "name": "apply",
          "docstring": "Run a single morphological operation on an image\n\nReturns a tuple of the number of changed pixels and the\nmorphed image"
        },
        {
          "name": "match",
          "docstring": "Get a list of coordinates matching the morphological operation on\nan image.\n\nReturns a list of tuples of (x,y) coordinates\nof all matching pixels. See :ref:`coordinate-system`."
        },
        {
          "name": "get_on_pixels",
          "docstring": "Get a list of all turned on pixels in a binary image\n\nReturns a list of tuples of (x,y) coordinates\nof all matching pixels. See :ref:`coordinate-system`."
        },
        {
          "name": "load_lut",
          "docstring": "Load an operator from an mrl file"
        },
        {
          "name": "save_lut",
          "docstring": "Save an operator to an mrl file"
        },
        {
          "name": "set_lut",
          "docstring": "Set the lut from an external source"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "add_patterns",
      "docstring": null
    },
    {
      "name": "build_default_lut",
      "docstring": null
    },
    {
      "name": "get_lut",
      "docstring": null
    },
    {
      "name": "build_lut",
      "docstring": "Compile all patterns into a morphology lut.\n\nTBD :Build based on (file) morphlut:modify_lut"
    },
    {
      "name": "apply",
      "docstring": "Run a single morphological operation on an image\n\nReturns a tuple of the number of changed pixels and the\nmorphed image"
    },
    {
      "name": "match",
      "docstring": "Get a list of coordinates matching the morphological operation on\nan image.\n\nReturns a list of tuples of (x,y) coordinates\nof all matching pixels. See :ref:`coordinate-system`."
    },
    {
      "name": "get_on_pixels",
      "docstring": "Get a list of all turned on pixels in a binary image\n\nReturns a list of tuples of (x,y) coordinates\nof all matching pixels. See :ref:`coordinate-system`."
    },
    {
      "name": "load_lut",
      "docstring": "Load an operator from an mrl file"
    },
    {
      "name": "save_lut",
      "docstring": "Save an operator to an mrl file"
    },
    {
      "name": "set_lut",
      "docstring": "Set the lut from an external source"
    }
  ],
  "innovations": []
}