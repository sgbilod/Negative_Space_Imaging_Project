{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\fontTools\\ufoLib\\validators.py",
  "classes": [],
  "functions": [
    {
      "name": "isDictEnough",
      "docstring": "Some objects will likely come in that aren't\ndicts but are dict-ish enough."
    },
    {
      "name": "genericTypeValidator",
      "docstring": "Generic. (Added at version 2.)"
    },
    {
      "name": "genericIntListValidator",
      "docstring": "Generic. (Added at version 2.)"
    },
    {
      "name": "genericNonNegativeIntValidator",
      "docstring": "Generic. (Added at version 3.)"
    },
    {
      "name": "genericNonNegativeNumberValidator",
      "docstring": "Generic. (Added at version 3.)"
    },
    {
      "name": "genericDictValidator",
      "docstring": "Generic. (Added at version 3.)"
    },
    {
      "name": "fontInfoStyleMapStyleNameValidator",
      "docstring": "Version 2+."
    },
    {
      "name": "fontInfoOpenTypeGaspRangeRecordsValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoOpenTypeHeadCreatedValidator",
      "docstring": "Version 2+."
    },
    {
      "name": "fontInfoOpenTypeNameRecordsValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoOpenTypeOS2WeightClassValidator",
      "docstring": "Version 2+."
    },
    {
      "name": "fontInfoOpenTypeOS2WidthClassValidator",
      "docstring": "Version 2+."
    },
    {
      "name": "fontInfoVersion2OpenTypeOS2PanoseValidator",
      "docstring": "Version 2."
    },
    {
      "name": "fontInfoVersion3OpenTypeOS2PanoseValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoOpenTypeOS2FamilyClassValidator",
      "docstring": "Version 2+."
    },
    {
      "name": "fontInfoPostscriptBluesValidator",
      "docstring": "Version 2+."
    },
    {
      "name": "fontInfoPostscriptOtherBluesValidator",
      "docstring": "Version 2+."
    },
    {
      "name": "fontInfoPostscriptStemsValidator",
      "docstring": "Version 2+."
    },
    {
      "name": "fontInfoPostscriptWindowsCharacterSetValidator",
      "docstring": "Version 2+."
    },
    {
      "name": "fontInfoWOFFMetadataUniqueIDValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataVendorValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataCreditsValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataDescriptionValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataLicenseValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataTrademarkValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataCopyrightValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataLicenseeValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataTextValue",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataExtensionsValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataExtensionValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataExtensionItemValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataExtensionNameValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "fontInfoWOFFMetadataExtensionValueValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "guidelinesValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "guidelineValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "anchorsValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "anchorValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "identifierValidator",
      "docstring": "Version 3+.\n\n>>> identifierValidator(\"a\")\nTrue\n>>> identifierValidator(\"\")\nFalse\n>>> identifierValidator(\"a\" * 101)\nFalse"
    },
    {
      "name": "colorValidator",
      "docstring": "Version 3+.\n\n>>> colorValidator(\"0,0,0,0\")\nTrue\n>>> colorValidator(\".5,.5,.5,.5\")\nTrue\n>>> colorValidator(\"0.5,0.5,0.5,0.5\")\nTrue\n>>> colorValidator(\"1,1,1,1\")\nTrue\n\n>>> colorValidator(\"2,0,0,0\")\nFalse\n>>> colorValidator(\"0,2,0,0\")\nFalse\n>>> colorValidator(\"0,0,2,0\")\nFalse\n>>> colorValidator(\"0,0,0,2\")\nFalse\n\n>>> colorValidator(\"1r,1,1,1\")\nFalse\n>>> colorValidator(\"1,1g,1,1\")\nFalse\n>>> colorValidator(\"1,1,1b,1\")\nFalse\n>>> colorValidator(\"1,1,1,1a\")\nFalse\n\n>>> colorValidator(\"1 1 1 1\")\nFalse\n>>> colorValidator(\"1 1,1,1\")\nFalse\n>>> colorValidator(\"1,1 1,1\")\nFalse\n>>> colorValidator(\"1,1,1 1\")\nFalse\n\n>>> colorValidator(\"1, 1, 1, 1\")\nTrue"
    },
    {
      "name": "imageValidator",
      "docstring": "Version 3+."
    },
    {
      "name": "pngValidator",
      "docstring": "Version 3+.\n\nThis checks the signature of the image data."
    },
    {
      "name": "layerContentsValidator",
      "docstring": "Check the validity of layercontents.plist.\nVersion 3+."
    },
    {
      "name": "groupsValidator",
      "docstring": "Check the validity of the groups.\nVersion 3+ (though it's backwards compatible with UFO 1 and UFO 2).\n\n>>> groups = {\"A\" : [\"A\", \"A\"], \"A2\" : [\"A\"]}\n>>> groupsValidator(groups)\n(True, None)\n\n>>> groups = {\"\" : [\"A\"]}\n>>> valid, msg = groupsValidator(groups)\n>>> valid\nFalse\n>>> print(msg)\nA group has an empty name.\n\n>>> groups = {\"public.awesome\" : [\"A\"]}\n>>> groupsValidator(groups)\n(True, None)\n\n>>> groups = {\"public.kern1.\" : [\"A\"]}\n>>> valid, msg = groupsValidator(groups)\n>>> valid\nFalse\n>>> print(msg)\nThe group data contains a kerning group with an incomplete name.\n>>> groups = {\"public.kern2.\" : [\"A\"]}\n>>> valid, msg = groupsValidator(groups)\n>>> valid\nFalse\n>>> print(msg)\nThe group data contains a kerning group with an incomplete name.\n\n>>> groups = {\"public.kern1.A\" : [\"A\"], \"public.kern2.A\" : [\"A\"]}\n>>> groupsValidator(groups)\n(True, None)\n\n>>> groups = {\"public.kern1.A1\" : [\"A\"], \"public.kern1.A2\" : [\"A\"]}\n>>> valid, msg = groupsValidator(groups)\n>>> valid\nFalse\n>>> print(msg)\nThe glyph \"A\" occurs in too many kerning groups."
    },
    {
      "name": "kerningValidator",
      "docstring": "Check the validity of the kerning data structure.\nVersion 3+ (though it's backwards compatible with UFO 1 and UFO 2).\n\n>>> kerning = {\"A\" : {\"B\" : 100}}\n>>> kerningValidator(kerning)\n(True, None)\n\n>>> kerning = {\"A\" : [\"B\"]}\n>>> valid, msg = kerningValidator(kerning)\n>>> valid\nFalse\n>>> print(msg)\nThe kerning data is not in the correct format.\n\n>>> kerning = {\"A\" : {\"B\" : \"100\"}}\n>>> valid, msg = kerningValidator(kerning)\n>>> valid\nFalse\n>>> print(msg)\nThe kerning data is not in the correct format."
    },
    {
      "name": "fontLibValidator",
      "docstring": "Check the validity of the lib.\nVersion 3+ (though it's backwards compatible with UFO 1 and UFO 2).\n\n>>> lib = {\"foo\" : \"bar\"}\n>>> fontLibValidator(lib)\n(True, None)\n\n>>> lib = {\"public.awesome\" : \"hello\"}\n>>> fontLibValidator(lib)\n(True, None)\n\n>>> lib = {\"public.glyphOrder\" : [\"A\", \"C\", \"B\"]}\n>>> fontLibValidator(lib)\n(True, None)\n\n>>> lib = \"hello\"\n>>> valid, msg = fontLibValidator(lib)\n>>> valid\nFalse\n>>> print(msg)  # doctest: +ELLIPSIS\nThe lib data is not in the correct format: expected a dictionary, ...\n\n>>> lib = {1: \"hello\"}\n>>> valid, msg = fontLibValidator(lib)\n>>> valid\nFalse\n>>> print(msg)\nThe lib key is not properly formatted: expected str, found int: 1\n\n>>> lib = {\"public.glyphOrder\" : \"hello\"}\n>>> valid, msg = fontLibValidator(lib)\n>>> valid\nFalse\n>>> print(msg)  # doctest: +ELLIPSIS\npublic.glyphOrder is not properly formatted: expected list or tuple,...\n\n>>> lib = {\"public.glyphOrder\" : [\"A\", 1, \"B\"]}\n>>> valid, msg = fontLibValidator(lib)\n>>> valid\nFalse\n>>> print(msg)  # doctest: +ELLIPSIS\npublic.glyphOrder is not properly formatted: expected str,..."
    },
    {
      "name": "glyphLibValidator",
      "docstring": "Check the validity of the lib.\nVersion 3+ (though it's backwards compatible with UFO 1 and UFO 2).\n\n>>> lib = {\"foo\" : \"bar\"}\n>>> glyphLibValidator(lib)\n(True, None)\n\n>>> lib = {\"public.awesome\" : \"hello\"}\n>>> glyphLibValidator(lib)\n(True, None)\n\n>>> lib = {\"public.markColor\" : \"1,0,0,0.5\"}\n>>> glyphLibValidator(lib)\n(True, None)\n\n>>> lib = {\"public.markColor\" : 1}\n>>> valid, msg = glyphLibValidator(lib)\n>>> valid\nFalse\n>>> print(msg)\npublic.markColor is not properly formatted."
    }
  ],
  "innovations": []
}