{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\urllib3\\_request_methods.py",
  "classes": [
    {
      "name": "RequestMethods",
      "docstring": "Convenience mixin for classes who implement a :meth:`urlopen` method, such\nas :class:`urllib3.HTTPConnectionPool` and\n:class:`urllib3.PoolManager`.\n\nProvides behavior for making common types of HTTP request methods and\ndecides which type of request field encoding to use.\n\nSpecifically,\n\n:meth:`.request_encode_url` is for sending requests whose fields are\nencoded in the URL (such as GET, HEAD, DELETE).\n\n:meth:`.request_encode_body` is for sending requests whose fields are\nencoded in the *body* of the request using multipart or www-form-urlencoded\n(such as for POST, PUT, PATCH).\n\n:meth:`.request` is for making any kind of request, it will look up the\nappropriate encoding format and use one of the above two methods to make\nthe request.\n\nInitializer parameters:\n\n:param headers:\n    Headers to include with all requests, unless other headers are given\n    explicitly.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "urlopen",
          "docstring": null
        },
        {
          "name": "request",
          "docstring": "Make a request using :meth:`urlopen` with the appropriate encoding of\n``fields`` based on the ``method`` used.\n\nThis is a convenience method that requires the least amount of manual\neffort. It can be used in most situations, while still having the\noption to drop down to more specific methods when necessary, such as\n:meth:`request_encode_url`, :meth:`request_encode_body`,\nor even the lowest level :meth:`urlopen`.\n\n:param method:\n    HTTP request method (such as GET, POST, PUT, etc.)\n\n:param url:\n    The URL to perform the request on.\n\n:param body:\n    Data to send in the request body, either :class:`str`, :class:`bytes`,\n    an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n\n:param fields:\n    Data to encode and send in the URL or request body, depending on ``method``.\n\n:param headers:\n    Dictionary of custom headers to send, such as User-Agent,\n    If-None-Match, etc. If None, pool headers are used. If provided,\n    these headers completely replace any pool-specific headers.\n\n:param json:\n    Data to encode and send as JSON with UTF-encoded in the request body.\n    The ``\"Content-Type\"`` header will be set to ``\"application/json\"``\n    unless specified otherwise."
        },
        {
          "name": "request_encode_url",
          "docstring": "Make a request using :meth:`urlopen` with the ``fields`` encoded in\nthe url. This is useful for request methods like GET, HEAD, DELETE, etc.\n\n:param method:\n    HTTP request method (such as GET, POST, PUT, etc.)\n\n:param url:\n    The URL to perform the request on.\n\n:param fields:\n    Data to encode and send in the URL.\n\n:param headers:\n    Dictionary of custom headers to send, such as User-Agent,\n    If-None-Match, etc. If None, pool headers are used. If provided,\n    these headers completely replace any pool-specific headers."
        },
        {
          "name": "request_encode_body",
          "docstring": "Make a request using :meth:`urlopen` with the ``fields`` encoded in\nthe body. This is useful for request methods like POST, PUT, PATCH, etc.\n\nWhen ``encode_multipart=True`` (default), then\n:func:`urllib3.encode_multipart_formdata` is used to encode\nthe payload with the appropriate content type. Otherwise\n:func:`urllib.parse.urlencode` is used with the\n'application/x-www-form-urlencoded' content type.\n\nMultipart encoding must be used when posting files, and it's reasonably\nsafe to use it in other times too. However, it may break request\nsigning, such as with OAuth.\n\nSupports an optional ``fields`` parameter of key/value strings AND\nkey/filetuple. A filetuple is a (filename, data, MIME type) tuple where\nthe MIME type is optional. For example::\n\n    fields = {\n        'foo': 'bar',\n        'fakefile': ('foofile.txt', 'contents of foofile'),\n        'realfile': ('barfile.txt', open('realfile').read()),\n        'typedfile': ('bazfile.bin', open('bazfile').read(),\n                      'image/jpeg'),\n        'nonamefile': 'contents of nonamefile field',\n    }\n\nWhen uploading a file, providing a filename (the first parameter of the\ntuple) is optional but recommended to best mimic behavior of browsers.\n\nNote that if ``headers`` are supplied, the 'Content-Type' header will\nbe overwritten because it depends on the dynamic random boundary string\nwhich is used to compose the body of the request. The random boundary\nstring can be explicitly set with the ``multipart_boundary`` parameter.\n\n:param method:\n    HTTP request method (such as GET, POST, PUT, etc.)\n\n:param url:\n    The URL to perform the request on.\n\n:param fields:\n    Data to encode and send in the request body.\n\n:param headers:\n    Dictionary of custom headers to send, such as User-Agent,\n    If-None-Match, etc. If None, pool headers are used. If provided,\n    these headers completely replace any pool-specific headers.\n\n:param encode_multipart:\n    If True, encode the ``fields`` using the multipart/form-data MIME\n    format.\n\n:param multipart_boundary:\n    If not specified, then a random boundary will be generated using\n    :func:`urllib3.filepost.choose_boundary`."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "urlopen",
      "docstring": null
    },
    {
      "name": "request",
      "docstring": "Make a request using :meth:`urlopen` with the appropriate encoding of\n``fields`` based on the ``method`` used.\n\nThis is a convenience method that requires the least amount of manual\neffort. It can be used in most situations, while still having the\noption to drop down to more specific methods when necessary, such as\n:meth:`request_encode_url`, :meth:`request_encode_body`,\nor even the lowest level :meth:`urlopen`.\n\n:param method:\n    HTTP request method (such as GET, POST, PUT, etc.)\n\n:param url:\n    The URL to perform the request on.\n\n:param body:\n    Data to send in the request body, either :class:`str`, :class:`bytes`,\n    an iterable of :class:`str`/:class:`bytes`, or a file-like object.\n\n:param fields:\n    Data to encode and send in the URL or request body, depending on ``method``.\n\n:param headers:\n    Dictionary of custom headers to send, such as User-Agent,\n    If-None-Match, etc. If None, pool headers are used. If provided,\n    these headers completely replace any pool-specific headers.\n\n:param json:\n    Data to encode and send as JSON with UTF-encoded in the request body.\n    The ``\"Content-Type\"`` header will be set to ``\"application/json\"``\n    unless specified otherwise."
    },
    {
      "name": "request_encode_url",
      "docstring": "Make a request using :meth:`urlopen` with the ``fields`` encoded in\nthe url. This is useful for request methods like GET, HEAD, DELETE, etc.\n\n:param method:\n    HTTP request method (such as GET, POST, PUT, etc.)\n\n:param url:\n    The URL to perform the request on.\n\n:param fields:\n    Data to encode and send in the URL.\n\n:param headers:\n    Dictionary of custom headers to send, such as User-Agent,\n    If-None-Match, etc. If None, pool headers are used. If provided,\n    these headers completely replace any pool-specific headers."
    },
    {
      "name": "request_encode_body",
      "docstring": "Make a request using :meth:`urlopen` with the ``fields`` encoded in\nthe body. This is useful for request methods like POST, PUT, PATCH, etc.\n\nWhen ``encode_multipart=True`` (default), then\n:func:`urllib3.encode_multipart_formdata` is used to encode\nthe payload with the appropriate content type. Otherwise\n:func:`urllib.parse.urlencode` is used with the\n'application/x-www-form-urlencoded' content type.\n\nMultipart encoding must be used when posting files, and it's reasonably\nsafe to use it in other times too. However, it may break request\nsigning, such as with OAuth.\n\nSupports an optional ``fields`` parameter of key/value strings AND\nkey/filetuple. A filetuple is a (filename, data, MIME type) tuple where\nthe MIME type is optional. For example::\n\n    fields = {\n        'foo': 'bar',\n        'fakefile': ('foofile.txt', 'contents of foofile'),\n        'realfile': ('barfile.txt', open('realfile').read()),\n        'typedfile': ('bazfile.bin', open('bazfile').read(),\n                      'image/jpeg'),\n        'nonamefile': 'contents of nonamefile field',\n    }\n\nWhen uploading a file, providing a filename (the first parameter of the\ntuple) is optional but recommended to best mimic behavior of browsers.\n\nNote that if ``headers`` are supplied, the 'Content-Type' header will\nbe overwritten because it depends on the dynamic random boundary string\nwhich is used to compose the body of the request. The random boundary\nstring can be explicitly set with the ``multipart_boundary`` parameter.\n\n:param method:\n    HTTP request method (such as GET, POST, PUT, etc.)\n\n:param url:\n    The URL to perform the request on.\n\n:param fields:\n    Data to encode and send in the request body.\n\n:param headers:\n    Dictionary of custom headers to send, such as User-Agent,\n    If-None-Match, etc. If None, pool headers are used. If provided,\n    these headers completely replace any pool-specific headers.\n\n:param encode_multipart:\n    If True, encode the ``fields`` using the multipart/form-data MIME\n    format.\n\n:param multipart_boundary:\n    If not specified, then a random boundary will be generated using\n    :func:`urllib3.filepost.choose_boundary`."
    }
  ],
  "innovations": []
}