{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\imageio\\plugins\\_bsdf.py",
  "classes": [
    {
      "name": "BsdfSerializer",
      "docstring": "Instances of this class represent a BSDF encoder/decoder.\n\nIt acts as a placeholder for a set of extensions and encoding/decoding\noptions. Use this to predefine extensions and options for high\nperformance encoding/decoding. For general use, see the functions\n`save()`, `encode()`, `load()`, and `decode()`.\n\nThis implementation of BSDF supports streaming lists (keep adding\nto a list after writing the main file), lazy loading of blobs, and\nin-place editing of blobs (for streams opened with a+).\n\nOptions for encoding:\n\n* compression (int or str): ``0`` or \"no\" for no compression (default),\n  ``1`` or \"zlib\" for Zlib compression (same as zip files and PNG), and\n  ``2`` or \"bz2\" for Bz2 compression (more compact but slower writing).\n  Note that some BSDF implementations (e.g. JavaScript) may not support\n  compression.\n* use_checksum (bool): whether to include a checksum with binary blobs.\n* float64 (bool): Whether to write floats as 64 bit (default) or 32 bit.\n\nOptions for decoding:\n\n* load_streaming (bool): if True, and the final object in the structure was\n  a stream, will make it available as a stream in the decoded object.\n* lazy_blob (bool): if True, bytes are represented as Blob objects that can\n  be used to lazily access the data, and also overwrite the data if the\n  file is open in a+ mode.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "add_extension",
          "docstring": "Add an extension to this serializer instance, which must be\na subclass of Extension. Can be used as a decorator."
        },
        {
          "name": "remove_extension",
          "docstring": "Remove a converted by its unique name."
        },
        {
          "name": "encode",
          "docstring": "Save the given object to bytes."
        },
        {
          "name": "save",
          "docstring": "Write the given object to the given file object."
        },
        {
          "name": "decode",
          "docstring": "Load the data structure that is BSDF-encoded in the given bytes."
        },
        {
          "name": "load",
          "docstring": "Load a BSDF-encoded object from the given file object."
        }
      ]
    },
    {
      "name": "BaseStream",
      "docstring": "Base class for streams.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "mode",
          "docstring": "The mode of this stream: 'r' or 'w'."
        }
      ]
    },
    {
      "name": "ListStream",
      "docstring": "A streamable list object used for writing or reading.\nIn read mode, it can also be iterated over.",
      "methods": [
        {
          "name": "count",
          "docstring": "The number of elements in the stream (can be -1 for unclosed\nstreams in read-mode)."
        },
        {
          "name": "index",
          "docstring": "The current index of the element to read/write."
        },
        {
          "name": "append",
          "docstring": "Append an item to the streaming list. The object is immediately\nserialized and written to the underlying file."
        },
        {
          "name": "close",
          "docstring": "Close the stream, marking the number of written elements. New\nelements may still be appended, but they won't be read during decoding.\nIf ``unstream`` is False, the stream is turned into a regular list\n(not streaming)."
        },
        {
          "name": "next",
          "docstring": "Read and return the next element in the streaming list.\nRaises StopIteration if the stream is exhausted."
        }
      ]
    },
    {
      "name": "Blob",
      "docstring": "Object to represent a blob of bytes. When used to write a BSDF file,\nit's a wrapper for bytes plus properties such as what compression to apply.\nWhen used to read a BSDF file, it can be used to read the data lazily, and\nalso modify the data if reading in 'r+' mode and the blob isn't compressed.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "seek",
          "docstring": "Seek to the given position (relative to the blob start)."
        },
        {
          "name": "tell",
          "docstring": "Get the current file pointer position (relative to the blob start)."
        },
        {
          "name": "write",
          "docstring": "Write bytes to the blob."
        },
        {
          "name": "read",
          "docstring": "Read n bytes from the blob."
        },
        {
          "name": "get_bytes",
          "docstring": "Get the contents of the blob as bytes."
        },
        {
          "name": "update_checksum",
          "docstring": "Reset the blob's checksum if present. Call this after modifying\nthe data."
        }
      ]
    },
    {
      "name": "Extension",
      "docstring": "Base class to implement BSDF extensions for special data types.\n\nExtension classes are provided to the BSDF serializer, which\ninstantiates the class. That way, the extension can be somewhat dynamic:\ne.g. the NDArrayExtension exposes the ndarray class only when numpy\nis imported.\n\nA extension instance must have two attributes. These can be attributes of\nthe class, or of the instance set in ``__init__()``:\n\n* name (str): the name by which encoded values will be identified.\n* cls (type): the type (or list of types) to match values with.\n  This is optional, but it makes the encoder select extensions faster.\n\nFurther, it needs 3 methods:\n\n* `match(serializer, value) -> bool`: return whether the extension can\n  convert the given value. The default is ``isinstance(value, self.cls)``.\n* `encode(serializer, value) -> encoded_value`: the function to encode a\n  value to more basic data types.\n* `decode(serializer, encoded_value) -> value`: the function to decode an\n  encoded value back to its intended representation.",
      "methods": [
        {
          "name": "match",
          "docstring": null
        },
        {
          "name": "encode",
          "docstring": null
        },
        {
          "name": "decode",
          "docstring": null
        }
      ]
    },
    {
      "name": "ComplexExtension",
      "docstring": null,
      "methods": [
        {
          "name": "encode",
          "docstring": null
        },
        {
          "name": "decode",
          "docstring": null
        }
      ]
    },
    {
      "name": "NDArrayExtension",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "match",
          "docstring": null
        },
        {
          "name": "encode",
          "docstring": null
        },
        {
          "name": "decode",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "lencode",
      "docstring": "Encode an unsigned integer into a variable sized blob of bytes."
    },
    {
      "name": "lendecode",
      "docstring": "Decode an unsigned integer from a file."
    },
    {
      "name": "encode_type_id",
      "docstring": "Encode the type identifier, with or without extension id."
    },
    {
      "name": "encode",
      "docstring": "Save (BSDF-encode) the given object to bytes.\nSee `BSDFSerializer` for details on extensions and options."
    },
    {
      "name": "save",
      "docstring": "Save (BSDF-encode) the given object to the given filename or\nfile object. See` BSDFSerializer` for details on extensions and options."
    },
    {
      "name": "decode",
      "docstring": "Load a (BSDF-encoded) structure from bytes.\nSee `BSDFSerializer` for details on extensions and options."
    },
    {
      "name": "load",
      "docstring": "Load a (BSDF-encoded) structure from the given filename or file object.\nSee `BSDFSerializer` for details on extensions and options."
    },
    {
      "name": "add_extension",
      "docstring": "Add an extension to this serializer instance, which must be\na subclass of Extension. Can be used as a decorator."
    },
    {
      "name": "remove_extension",
      "docstring": "Remove a converted by its unique name."
    },
    {
      "name": "encode",
      "docstring": "Save the given object to bytes."
    },
    {
      "name": "save",
      "docstring": "Write the given object to the given file object."
    },
    {
      "name": "decode",
      "docstring": "Load the data structure that is BSDF-encoded in the given bytes."
    },
    {
      "name": "load",
      "docstring": "Load a BSDF-encoded object from the given file object."
    },
    {
      "name": "mode",
      "docstring": "The mode of this stream: 'r' or 'w'."
    },
    {
      "name": "count",
      "docstring": "The number of elements in the stream (can be -1 for unclosed\nstreams in read-mode)."
    },
    {
      "name": "index",
      "docstring": "The current index of the element to read/write."
    },
    {
      "name": "append",
      "docstring": "Append an item to the streaming list. The object is immediately\nserialized and written to the underlying file."
    },
    {
      "name": "close",
      "docstring": "Close the stream, marking the number of written elements. New\nelements may still be appended, but they won't be read during decoding.\nIf ``unstream`` is False, the stream is turned into a regular list\n(not streaming)."
    },
    {
      "name": "next",
      "docstring": "Read and return the next element in the streaming list.\nRaises StopIteration if the stream is exhausted."
    },
    {
      "name": "seek",
      "docstring": "Seek to the given position (relative to the blob start)."
    },
    {
      "name": "tell",
      "docstring": "Get the current file pointer position (relative to the blob start)."
    },
    {
      "name": "write",
      "docstring": "Write bytes to the blob."
    },
    {
      "name": "read",
      "docstring": "Read n bytes from the blob."
    },
    {
      "name": "get_bytes",
      "docstring": "Get the contents of the blob as bytes."
    },
    {
      "name": "update_checksum",
      "docstring": "Reset the blob's checksum if present. Call this after modifying\nthe data."
    },
    {
      "name": "match",
      "docstring": null
    },
    {
      "name": "encode",
      "docstring": null
    },
    {
      "name": "decode",
      "docstring": null
    },
    {
      "name": "encode",
      "docstring": null
    },
    {
      "name": "decode",
      "docstring": null
    },
    {
      "name": "match",
      "docstring": null
    },
    {
      "name": "encode",
      "docstring": null
    },
    {
      "name": "decode",
      "docstring": null
    }
  ],
  "innovations": []
}