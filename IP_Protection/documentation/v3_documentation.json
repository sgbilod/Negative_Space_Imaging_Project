{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\imageio\\v3.py",
  "classes": [],
  "functions": [
    {
      "name": "imread",
      "docstring": "Read an ndimage from a URI.\n\nOpens the given URI and reads an ndimage from it. The exact behavior\ndepends on both the file type and plugin used to open the file. To learn\nabout the exact behavior, check the documentation of the relevant plugin.\nTypically, imread attempts to read all data stored in the URI.\n\nParameters\n----------\nuri : {str, pathlib.Path, bytes, file}\n    The resource to load the image from, e.g. a filename, pathlib.Path,\n    http address or file object, see the docs for more info.\nindex : {int, Ellipsis, None}\n    If the ImageResource contains multiple ndimages, and index is an\n    integer, select the index-th ndimage from among them and return it. If\n    index is an ellipsis (...), read all ndimages in the file and stack them\n    along a new batch dimension. If index is None, let the plugin decide.\nplugin : {str, None}\n    The plugin to use. If set to None (default) imread will perform a\n    search for a matching plugin. If not None, this takes priority over\n    the provided format hint  (if present).\nextension : str\n    If not None, treat the provided ImageResource as if it had the given\n    extension. This affects the order in which backends are considered.\nformat_hint : str\n    Deprecated. Use `extension` instead.\n**kwargs :\n    Additional keyword arguments will be passed to the plugin's read call.\n\nReturns\n-------\nimage : ndimage\n    The ndimage located at the given URI."
    },
    {
      "name": "imiter",
      "docstring": "Read a sequence of ndimages from a URI.\n\nReturns an iterable that yields ndimages from the given URI. The exact\nbehavior depends on both, the file type and plugin used to open the file.\nTo learn about the exact behavior, check the documentation of the relevant\nplugin.\n\nParameters\n----------\nuri : {str, pathlib.Path, bytes, file}\n    The resource to load the image from, e.g. a filename, pathlib.Path,\n    http address or file object, see the docs for more info.\nplugin : {str, None}\n    The plugin to use. If set to None (default) imiter will perform a\n    search for a matching plugin. If not None, this takes priority over\n    the provided format hint (if present).\nextension : str\n    If not None, treat the provided ImageResource as if it had the given\n    extension. This affects the order in which backends are considered.\nformat_hint : str\n    Deprecated. Use `extension` instead.\n**kwargs :\n    Additional keyword arguments will be passed to the plugin's ``iter``\n    call.\n\nYields\n------\nimage : ndimage\n    The next ndimage located at the given URI."
    },
    {
      "name": "imwrite",
      "docstring": "Write an ndimage to the given URI.\n\nThe exact behavior depends on the file type and plugin used. To learn about\nthe exact behavior, check the documentation of the relevant plugin.\n\nParameters\n----------\nuri : {str, pathlib.Path, bytes, file}\n    The resource to save the image to, e.g. a filename, pathlib.Path,\n    http address or file object, check the docs for more info.\nimage : np.ndarray\n    The image to write to disk.\nplugin : {str, None}\n    The plugin to use. If set to None (default) imwrite will perform a\n    search for a matching plugin. If not None, this takes priority over\n    the provided format hint (if present).\nextension : str\n    If not None, treat the provided ImageResource as if it had the given\n    extension. This affects the order in which backends are considered, and\n    may also influence the format used when encoding.\nformat_hint : str\n    Deprecated. Use `extension` instead.\n**kwargs :\n    Additional keyword arguments will be passed to the plugin's ``write``\n    call.\n\nReturns\n-------\nencoded_image : None or Bytes\n    Returns ``None`` in all cases, except when ``uri`` is set to ``<bytes>``.\n    In this case it returns the encoded ndimage as a bytes string."
    },
    {
      "name": "improps",
      "docstring": "Read standardized metadata.\n\nOpens the given URI and reads the properties of an ndimage from it. The\nproperties represent standardized metadata. This means that they will have\nthe same name regardless of the format being read or plugin/backend being\nused. Further, any field will be, where possible, populated with a sensible\ndefault (may be `None`) if the ImageResource does not declare a value in its\nmetadata.\n\nParameters\n----------\nindex : int\n    If the ImageResource contains multiple ndimages, and index is an\n    integer, select the index-th ndimage from among them and return its\n    properties. If index is an ellipsis (...), read all ndimages in the file\n    and stack them along a new batch dimension and return their properties.\n    If index is None, let the plugin decide.\nplugin : {str, None}\n    The plugin to be used. If None, performs a search for a matching\n    plugin.\nextension : str\n    If not None, treat the provided ImageResource as if it had the given\n    extension. This affects the order in which backends are considered.\n**kwargs :\n    Additional keyword arguments will be passed to the plugin's ``properties``\n    call.\n\nReturns\n-------\nproperties : ImageProperties\n    A dataclass filled with standardized image metadata.\n\nNotes\n-----\nWhere possible, this will avoid loading pixel data.\n\nSee Also\n--------\nimageio.core.v3_plugin_api.ImageProperties"
    },
    {
      "name": "immeta",
      "docstring": "Read format-specific metadata.\n\nOpens the given URI and reads metadata for an ndimage from it. The contents\nof the returned metadata dictionary is specific to both the image format and\nplugin used to open the ImageResource. To learn about the exact behavior,\ncheck the documentation of the relevant plugin. Typically, immeta returns a\ndictionary specific to the image format, where keys match metadata field\nnames and values are a field's contents.\n\nParameters\n----------\nuri : {str, pathlib.Path, bytes, file}\n    The resource to load the image from, e.g. a filename, pathlib.Path, http\n    address or file object, see the docs for more info.\nindex : {int, None}\n    If the ImageResource contains multiple ndimages, and index is an\n    integer, select the index-th ndimage from among them and return its\n    metadata. If index is an ellipsis (...), return global metadata. If\n    index is None, let the plugin decide the default.\nplugin : {str, None}\n    The plugin to be used. If None (default), performs a search for a\n    matching plugin.\nextension : str\n    If not None, treat the provided ImageResource as if it had the given\n    extension. This affects the order in which backends are considered.\n**kwargs :\n    Additional keyword arguments will be passed to the plugin's metadata\n    method.\n\nReturns\n-------\nimage : ndimage\n    The ndimage located at the given URI."
    }
  ],
  "innovations": []
}