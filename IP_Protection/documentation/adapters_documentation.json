{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\requests\\adapters.py",
  "classes": [
    {
      "name": "BaseAdapter",
      "docstring": "The Base Transport Adapter",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "send",
          "docstring": "Sends PreparedRequest object. Returns Response object.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param stream: (optional) Whether to stream the request content.\n:param timeout: (optional) How long to wait for the server to send\n    data before giving up, as a float, or a :ref:`(connect timeout,\n    read timeout) <timeouts>` tuple.\n:type timeout: float or tuple\n:param verify: (optional) Either a boolean, in which case it controls whether we verify\n    the server's TLS certificate, or a string, in which case it must be a path\n    to a CA bundle to use\n:param cert: (optional) Any user-provided SSL certificate to be trusted.\n:param proxies: (optional) The proxies dictionary to apply to the request."
        },
        {
          "name": "close",
          "docstring": "Cleans up adapter specific items."
        }
      ]
    },
    {
      "name": "HTTPAdapter",
      "docstring": "The built-in HTTP Adapter for urllib3.\n\nProvides a general-case interface for Requests sessions to contact HTTP and\nHTTPS urls by implementing the Transport Adapter interface. This class will\nusually be created by the :class:`Session <Session>` class under the\ncovers.\n\n:param pool_connections: The number of urllib3 connection pools to cache.\n:param pool_maxsize: The maximum number of connections to save in the pool.\n:param max_retries: The maximum number of retries each connection\n    should attempt. Note, this applies only to failed DNS lookups, socket\n    connections and connection timeouts, never to requests where data has\n    made it to the server. By default, Requests does not retry failed\n    connections. If you need granular control over the conditions under\n    which we retry a request, import urllib3's ``Retry`` class and pass\n    that instead.\n:param pool_block: Whether the connection pool should block for connections.\n\nUsage::\n\n  >>> import requests\n  >>> s = requests.Session()\n  >>> a = requests.adapters.HTTPAdapter(max_retries=3)\n  >>> s.mount('http://', a)",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "init_poolmanager",
          "docstring": "Initializes a urllib3 PoolManager.\n\nThis method should not be called from user code, and is only\nexposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param connections: The number of urllib3 connection pools to cache.\n:param maxsize: The maximum number of connections to save in the pool.\n:param block: Block when no free connections are available.\n:param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager."
        },
        {
          "name": "proxy_manager_for",
          "docstring": "Return urllib3 ProxyManager for the given proxy.\n\nThis method should not be called from user code, and is only\nexposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param proxy: The proxy to return a urllib3 ProxyManager for.\n:param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n:returns: ProxyManager\n:rtype: urllib3.ProxyManager"
        },
        {
          "name": "cert_verify",
          "docstring": "Verify a SSL certificate. This method should not be called from user\ncode, and is only exposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param conn: The urllib3 connection object associated with the cert.\n:param url: The requested URL.\n:param verify: Either a boolean, in which case it controls whether we verify\n    the server's TLS certificate, or a string, in which case it must be a path\n    to a CA bundle to use\n:param cert: The SSL certificate to verify."
        },
        {
          "name": "build_response",
          "docstring": "Builds a :class:`Response <requests.Response>` object from a urllib3\nresponse. This should not be called from user code, and is only exposed\nfor use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`\n\n:param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n:param resp: The urllib3 response object.\n:rtype: requests.Response"
        },
        {
          "name": "build_connection_pool_key_attributes",
          "docstring": "Build the PoolKey attributes used by urllib3 to return a connection.\n\nThis looks at the PreparedRequest, the user-specified verify value,\nand the value of the cert parameter to determine what PoolKey values\nto use to select a connection from a given urllib3 Connection Pool.\n\nThe SSL related pool key arguments are not consistently set. As of\nthis writing, use the following to determine what keys may be in that\ndictionary:\n\n* If ``verify`` is ``True``, ``\"ssl_context\"`` will be set and will be the\n  default Requests SSL Context\n* If ``verify`` is ``False``, ``\"ssl_context\"`` will not be set but\n  ``\"cert_reqs\"`` will be set\n* If ``verify`` is a string, (i.e., it is a user-specified trust bundle)\n  ``\"ca_certs\"`` will be set if the string is not a directory recognized\n  by :py:func:`os.path.isdir`, otherwise ``\"ca_certs_dir\"`` will be\n  set.\n* If ``\"cert\"`` is specified, ``\"cert_file\"`` will always be set. If\n  ``\"cert\"`` is a tuple with a second item, ``\"key_file\"`` will also\n  be present\n\nTo override these settings, one may subclass this class, call this\nmethod and use the above logic to change parameters as desired. For\nexample, if one wishes to use a custom :py:class:`ssl.SSLContext` one\nmust both set ``\"ssl_context\"`` and based on what else they require,\nalter the other keys to ensure the desired behaviour.\n\n:param request:\n    The PreparedReqest being sent over the connection.\n:type request:\n    :class:`~requests.models.PreparedRequest`\n:param verify:\n    Either a boolean, in which case it controls whether\n    we verify the server's TLS certificate, or a string, in which case it\n    must be a path to a CA bundle to use.\n:param cert:\n    (optional) Any user-provided SSL certificate for client\n    authentication (a.k.a., mTLS). This may be a string (i.e., just\n    the path to a file which holds both certificate and key) or a\n    tuple of length 2 with the certificate file path and key file\n    path.\n:returns:\n    A tuple of two dictionaries. The first is the \"host parameters\"\n    portion of the Pool Key including scheme, hostname, and port. The\n    second is a dictionary of SSLContext related parameters."
        },
        {
          "name": "get_connection_with_tls_context",
          "docstring": "Returns a urllib3 connection for the given request and TLS settings.\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request:\n    The :class:`PreparedRequest <PreparedRequest>` object to be sent\n    over the connection.\n:param verify:\n    Either a boolean, in which case it controls whether we verify the\n    server's TLS certificate, or a string, in which case it must be a\n    path to a CA bundle to use.\n:param proxies:\n    (optional) The proxies dictionary to apply to the request.\n:param cert:\n    (optional) Any user-provided SSL certificate to be used for client\n    authentication (a.k.a., mTLS).\n:rtype:\n    urllib3.ConnectionPool"
        },
        {
          "name": "get_connection",
          "docstring": "DEPRECATED: Users should move to `get_connection_with_tls_context`\nfor all subclasses of HTTPAdapter using Requests>=2.32.2.\n\nReturns a urllib3 connection for the given URL. This should not be\ncalled from user code, and is only exposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param url: The URL to connect to.\n:param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n:rtype: urllib3.ConnectionPool"
        },
        {
          "name": "close",
          "docstring": "Disposes of any internal state.\n\nCurrently, this closes the PoolManager and any active ProxyManager,\nwhich closes any pooled connections."
        },
        {
          "name": "request_url",
          "docstring": "Obtain the url to use when making the final request.\n\nIf the message is being sent through a HTTP proxy, the full URL has to\nbe used. Otherwise, we should only use the path portion of the URL.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.\n:rtype: str"
        },
        {
          "name": "add_headers",
          "docstring": "Add any headers needed by the connection. As of v2.0 this does\nnothing by default, but is left for overriding by users that subclass\nthe :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n:param kwargs: The keyword arguments from the call to send()."
        },
        {
          "name": "proxy_headers",
          "docstring": "Returns a dictionary of the headers to add to any request sent\nthrough a proxy. This works with urllib3 magic to ensure that they are\ncorrectly sent to the proxy, rather than in a tunnelled request if\nCONNECT is being used.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param proxy: The url of the proxy being used for this request.\n:rtype: dict"
        },
        {
          "name": "send",
          "docstring": "Sends PreparedRequest object. Returns Response object.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param stream: (optional) Whether to stream the request content.\n:param timeout: (optional) How long to wait for the server to send\n    data before giving up, as a float, or a :ref:`(connect timeout,\n    read timeout) <timeouts>` tuple.\n:type timeout: float or tuple or urllib3 Timeout object\n:param verify: (optional) Either a boolean, in which case it controls whether\n    we verify the server's TLS certificate, or a string, in which case it\n    must be a path to a CA bundle to use\n:param cert: (optional) Any user-provided SSL certificate to be trusted.\n:param proxies: (optional) The proxies dictionary to apply to the request.\n:rtype: requests.Response"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "send",
      "docstring": "Sends PreparedRequest object. Returns Response object.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param stream: (optional) Whether to stream the request content.\n:param timeout: (optional) How long to wait for the server to send\n    data before giving up, as a float, or a :ref:`(connect timeout,\n    read timeout) <timeouts>` tuple.\n:type timeout: float or tuple\n:param verify: (optional) Either a boolean, in which case it controls whether we verify\n    the server's TLS certificate, or a string, in which case it must be a path\n    to a CA bundle to use\n:param cert: (optional) Any user-provided SSL certificate to be trusted.\n:param proxies: (optional) The proxies dictionary to apply to the request."
    },
    {
      "name": "close",
      "docstring": "Cleans up adapter specific items."
    },
    {
      "name": "init_poolmanager",
      "docstring": "Initializes a urllib3 PoolManager.\n\nThis method should not be called from user code, and is only\nexposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param connections: The number of urllib3 connection pools to cache.\n:param maxsize: The maximum number of connections to save in the pool.\n:param block: Block when no free connections are available.\n:param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager."
    },
    {
      "name": "proxy_manager_for",
      "docstring": "Return urllib3 ProxyManager for the given proxy.\n\nThis method should not be called from user code, and is only\nexposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param proxy: The proxy to return a urllib3 ProxyManager for.\n:param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n:returns: ProxyManager\n:rtype: urllib3.ProxyManager"
    },
    {
      "name": "cert_verify",
      "docstring": "Verify a SSL certificate. This method should not be called from user\ncode, and is only exposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param conn: The urllib3 connection object associated with the cert.\n:param url: The requested URL.\n:param verify: Either a boolean, in which case it controls whether we verify\n    the server's TLS certificate, or a string, in which case it must be a path\n    to a CA bundle to use\n:param cert: The SSL certificate to verify."
    },
    {
      "name": "build_response",
      "docstring": "Builds a :class:`Response <requests.Response>` object from a urllib3\nresponse. This should not be called from user code, and is only exposed\nfor use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`\n\n:param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n:param resp: The urllib3 response object.\n:rtype: requests.Response"
    },
    {
      "name": "build_connection_pool_key_attributes",
      "docstring": "Build the PoolKey attributes used by urllib3 to return a connection.\n\nThis looks at the PreparedRequest, the user-specified verify value,\nand the value of the cert parameter to determine what PoolKey values\nto use to select a connection from a given urllib3 Connection Pool.\n\nThe SSL related pool key arguments are not consistently set. As of\nthis writing, use the following to determine what keys may be in that\ndictionary:\n\n* If ``verify`` is ``True``, ``\"ssl_context\"`` will be set and will be the\n  default Requests SSL Context\n* If ``verify`` is ``False``, ``\"ssl_context\"`` will not be set but\n  ``\"cert_reqs\"`` will be set\n* If ``verify`` is a string, (i.e., it is a user-specified trust bundle)\n  ``\"ca_certs\"`` will be set if the string is not a directory recognized\n  by :py:func:`os.path.isdir`, otherwise ``\"ca_certs_dir\"`` will be\n  set.\n* If ``\"cert\"`` is specified, ``\"cert_file\"`` will always be set. If\n  ``\"cert\"`` is a tuple with a second item, ``\"key_file\"`` will also\n  be present\n\nTo override these settings, one may subclass this class, call this\nmethod and use the above logic to change parameters as desired. For\nexample, if one wishes to use a custom :py:class:`ssl.SSLContext` one\nmust both set ``\"ssl_context\"`` and based on what else they require,\nalter the other keys to ensure the desired behaviour.\n\n:param request:\n    The PreparedReqest being sent over the connection.\n:type request:\n    :class:`~requests.models.PreparedRequest`\n:param verify:\n    Either a boolean, in which case it controls whether\n    we verify the server's TLS certificate, or a string, in which case it\n    must be a path to a CA bundle to use.\n:param cert:\n    (optional) Any user-provided SSL certificate for client\n    authentication (a.k.a., mTLS). This may be a string (i.e., just\n    the path to a file which holds both certificate and key) or a\n    tuple of length 2 with the certificate file path and key file\n    path.\n:returns:\n    A tuple of two dictionaries. The first is the \"host parameters\"\n    portion of the Pool Key including scheme, hostname, and port. The\n    second is a dictionary of SSLContext related parameters."
    },
    {
      "name": "get_connection_with_tls_context",
      "docstring": "Returns a urllib3 connection for the given request and TLS settings.\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request:\n    The :class:`PreparedRequest <PreparedRequest>` object to be sent\n    over the connection.\n:param verify:\n    Either a boolean, in which case it controls whether we verify the\n    server's TLS certificate, or a string, in which case it must be a\n    path to a CA bundle to use.\n:param proxies:\n    (optional) The proxies dictionary to apply to the request.\n:param cert:\n    (optional) Any user-provided SSL certificate to be used for client\n    authentication (a.k.a., mTLS).\n:rtype:\n    urllib3.ConnectionPool"
    },
    {
      "name": "get_connection",
      "docstring": "DEPRECATED: Users should move to `get_connection_with_tls_context`\nfor all subclasses of HTTPAdapter using Requests>=2.32.2.\n\nReturns a urllib3 connection for the given URL. This should not be\ncalled from user code, and is only exposed for use when subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param url: The URL to connect to.\n:param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n:rtype: urllib3.ConnectionPool"
    },
    {
      "name": "close",
      "docstring": "Disposes of any internal state.\n\nCurrently, this closes the PoolManager and any active ProxyManager,\nwhich closes any pooled connections."
    },
    {
      "name": "request_url",
      "docstring": "Obtain the url to use when making the final request.\n\nIf the message is being sent through a HTTP proxy, the full URL has to\nbe used. Otherwise, we should only use the path portion of the URL.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.\n:rtype: str"
    },
    {
      "name": "add_headers",
      "docstring": "Add any headers needed by the connection. As of v2.0 this does\nnothing by default, but is left for overriding by users that subclass\nthe :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n:param kwargs: The keyword arguments from the call to send()."
    },
    {
      "name": "proxy_headers",
      "docstring": "Returns a dictionary of the headers to add to any request sent\nthrough a proxy. This works with urllib3 magic to ensure that they are\ncorrectly sent to the proxy, rather than in a tunnelled request if\nCONNECT is being used.\n\nThis should not be called from user code, and is only exposed for use\nwhen subclassing the\n:class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n:param proxy: The url of the proxy being used for this request.\n:rtype: dict"
    },
    {
      "name": "send",
      "docstring": "Sends PreparedRequest object. Returns Response object.\n\n:param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n:param stream: (optional) Whether to stream the request content.\n:param timeout: (optional) How long to wait for the server to send\n    data before giving up, as a float, or a :ref:`(connect timeout,\n    read timeout) <timeouts>` tuple.\n:type timeout: float or tuple or urllib3 Timeout object\n:param verify: (optional) Either a boolean, in which case it controls whether\n    we verify the server's TLS certificate, or a string, in which case it\n    must be a path to a CA bundle to use\n:param cert: (optional) Any user-provided SSL certificate to be trusted.\n:param proxies: (optional) The proxies dictionary to apply to the request.\n:rtype: requests.Response"
    },
    {
      "name": "SOCKSProxyManager",
      "docstring": null
    }
  ],
  "innovations": []
}