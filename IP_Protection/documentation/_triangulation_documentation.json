{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\tri\\_triangulation.py",
  "classes": [
    {
      "name": "Triangulation",
      "docstring": "An unstructured triangular grid consisting of npoints points and\nntri triangles.  The triangles can either be specified by the user\nor automatically generated using a Delaunay triangulation.\n\nParameters\n----------\nx, y : (npoints,) array-like\n    Coordinates of grid points.\ntriangles : (ntri, 3) array-like of int, optional\n    For each triangle, the indices of the three points that make\n    up the triangle, ordered in an anticlockwise manner.  If not\n    specified, the Delaunay triangulation is calculated.\nmask : (ntri,) array-like of bool, optional\n    Which triangles are masked out.\n\nAttributes\n----------\ntriangles : (ntri, 3) array of int\n    For each triangle, the indices of the three points that make\n    up the triangle, ordered in an anticlockwise manner. If you want to\n    take the *mask* into account, use `get_masked_triangles` instead.\nmask : (ntri, 3) array of bool or None\n    Masked out triangles.\nis_delaunay : bool\n    Whether the Triangulation is a calculated Delaunay\n    triangulation (where *triangles* was not specified) or not.\n\nNotes\n-----\nFor a Triangulation to be valid it must not have duplicate points,\ntriangles formed from colinear points, or overlapping triangles.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "calculate_plane_coefficients",
          "docstring": "Calculate plane equation coefficients for all unmasked triangles from\nthe point (x, y) coordinates and specified z-array of shape (npoints).\nThe returned array has shape (npoints, 3) and allows z-value at (x, y)\nposition in triangle tri to be calculated using\n``z = array[tri, 0] * x  + array[tri, 1] * y + array[tri, 2]``."
        },
        {
          "name": "edges",
          "docstring": "Return integer array of shape (nedges, 2) containing all edges of\nnon-masked triangles.\n\nEach row defines an edge by its start point index and end point\nindex.  Each edge appears only once, i.e. for an edge between points\n*i*  and *j*, there will only be either *(i, j)* or *(j, i)*."
        },
        {
          "name": "get_cpp_triangulation",
          "docstring": "Return the underlying C++ Triangulation object, creating it\nif necessary."
        },
        {
          "name": "get_masked_triangles",
          "docstring": "Return an array of triangles taking the mask into account."
        },
        {
          "name": "get_from_args_and_kwargs",
          "docstring": "Return a Triangulation object from the args and kwargs, and\nthe remaining args and kwargs with the consumed values removed.\n\nThere are two alternatives: either the first argument is a\nTriangulation object, in which case it is returned, or the args\nand kwargs are sufficient to create a new Triangulation to\nreturn.  In the latter case, see Triangulation.__init__ for\nthe possible args and kwargs."
        },
        {
          "name": "get_trifinder",
          "docstring": "Return the default `matplotlib.tri.TriFinder` of this\ntriangulation, creating it if necessary.  This allows the same\nTriFinder object to be easily shared."
        },
        {
          "name": "neighbors",
          "docstring": "Return integer array of shape (ntri, 3) containing neighbor triangles.\n\nFor each triangle, the indices of the three triangles that\nshare the same edges, or -1 if there is no such neighboring\ntriangle.  ``neighbors[i, j]`` is the triangle that is the neighbor\nto the edge from point index ``triangles[i, j]`` to point index\n``triangles[i, (j+1)%3]``."
        },
        {
          "name": "set_mask",
          "docstring": "Set or clear the mask array.\n\nParameters\n----------\nmask : None or bool array of length ntri"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "calculate_plane_coefficients",
      "docstring": "Calculate plane equation coefficients for all unmasked triangles from\nthe point (x, y) coordinates and specified z-array of shape (npoints).\nThe returned array has shape (npoints, 3) and allows z-value at (x, y)\nposition in triangle tri to be calculated using\n``z = array[tri, 0] * x  + array[tri, 1] * y + array[tri, 2]``."
    },
    {
      "name": "edges",
      "docstring": "Return integer array of shape (nedges, 2) containing all edges of\nnon-masked triangles.\n\nEach row defines an edge by its start point index and end point\nindex.  Each edge appears only once, i.e. for an edge between points\n*i*  and *j*, there will only be either *(i, j)* or *(j, i)*."
    },
    {
      "name": "get_cpp_triangulation",
      "docstring": "Return the underlying C++ Triangulation object, creating it\nif necessary."
    },
    {
      "name": "get_masked_triangles",
      "docstring": "Return an array of triangles taking the mask into account."
    },
    {
      "name": "get_from_args_and_kwargs",
      "docstring": "Return a Triangulation object from the args and kwargs, and\nthe remaining args and kwargs with the consumed values removed.\n\nThere are two alternatives: either the first argument is a\nTriangulation object, in which case it is returned, or the args\nand kwargs are sufficient to create a new Triangulation to\nreturn.  In the latter case, see Triangulation.__init__ for\nthe possible args and kwargs."
    },
    {
      "name": "get_trifinder",
      "docstring": "Return the default `matplotlib.tri.TriFinder` of this\ntriangulation, creating it if necessary.  This allows the same\nTriFinder object to be easily shared."
    },
    {
      "name": "neighbors",
      "docstring": "Return integer array of shape (ntri, 3) containing neighbor triangles.\n\nFor each triangle, the indices of the three triangles that\nshare the same edges, or -1 if there is no such neighboring\ntriangle.  ``neighbors[i, j]`` is the triangle that is the neighbor\nto the edge from point index ``triangles[i, j]`` to point index\n``triangles[i, (j+1)%3]``."
    },
    {
      "name": "set_mask",
      "docstring": "Set or clear the mask array.\n\nParameters\n----------\nmask : None or bool array of length ntri"
    }
  ],
  "innovations": []
}