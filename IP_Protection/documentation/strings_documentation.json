{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\_core\\strings.py",
  "classes": [],
  "functions": [
    {
      "name": "multiply",
      "docstring": "Return (a * i), that is string multiple concatenation,\nelement-wise.\n\nValues in ``i`` of less than 0 are treated as 0 (which yields an\nempty string).\n\nParameters\n----------\na : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\ni : array_like, with any integer dtype\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([\"a\", \"b\", \"c\"])\n>>> np.strings.multiply(a, 3)\narray(['aaa', 'bbb', 'ccc'], dtype='<U3')\n>>> i = np.array([1, 2, 3])\n>>> np.strings.multiply(a, i)\narray(['a', 'bb', 'ccc'], dtype='<U3')\n>>> np.strings.multiply(np.array(['a']), i)\narray(['a', 'aa', 'aaa'], dtype='<U3')\n>>> a = np.array(['a', 'b', 'c', 'd', 'e', 'f']).reshape((2, 3))\n>>> np.strings.multiply(a, 3)\narray([['aaa', 'bbb', 'ccc'],\n       ['ddd', 'eee', 'fff']], dtype='<U3')\n>>> np.strings.multiply(a, i)\narray([['a', 'bb', 'ccc'],\n       ['d', 'ee', 'fff']], dtype='<U3')"
    },
    {
      "name": "mod",
      "docstring": "Return (a % i), that is pre-Python 2.6 string formatting\n(interpolation), element-wise for a pair of array_likes of str\nor unicode.\n\nParameters\n----------\na : array_like, with `np.bytes_` or `np.str_` dtype\n\nvalues : array_like of values\n   These values will be element-wise interpolated into the string.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([\"NumPy is a %s library\"])\n>>> np.strings.mod(a, values=[\"Python\"])\narray(['NumPy is a Python library'], dtype='<U25')\n\n>>> a = np.array([b'%d bytes', b'%d bits'])\n>>> values = np.array([8, 64])\n>>> np.strings.mod(a, values)\narray([b'8 bytes', b'64 bits'], dtype='|S7')"
    },
    {
      "name": "find",
      "docstring": "For each element, return the lowest index in the string where\nsubstring ``sub`` is found, such that ``sub`` is contained in the\nrange [``start``, ``end``).\n\nParameters\n----------\na : array_like, with ``StringDType``, ``bytes_`` or ``str_`` dtype\n\nsub : array_like, with `np.bytes_` or `np.str_` dtype\n    The substring to search for.\n\nstart, end : array_like, with any integer dtype\n    The range to look in, interpreted as in slice notation.\n\nReturns\n-------\ny : ndarray\n    Output array of ints\n\nSee Also\n--------\nstr.find\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([\"NumPy is a Python library\"])\n>>> np.strings.find(a, \"Python\")\narray([11])"
    },
    {
      "name": "rfind",
      "docstring": "For each element, return the highest index in the string where\nsubstring ``sub`` is found, such that ``sub`` is contained in the\nrange [``start``, ``end``).\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nsub : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    The substring to search for.\n\nstart, end : array_like, with any integer dtype\n    The range to look in, interpreted as in slice notation.\n\nReturns\n-------\ny : ndarray\n    Output array of ints\n\nSee Also\n--------\nstr.rfind\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([\"Computer Science\"])\n>>> np.strings.rfind(a, \"Science\", start=0, end=None)\narray([9])\n>>> np.strings.rfind(a, \"Science\", start=0, end=8)\narray([-1])\n>>> b = np.array([\"Computer Science\", \"Science\"])\n>>> np.strings.rfind(b, \"Science\", start=0, end=None)\narray([9, 0])"
    },
    {
      "name": "index",
      "docstring": "Like `find`, but raises :exc:`ValueError` when the substring is not found.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nsub : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nstart, end : array_like, with any integer dtype, optional\n\nReturns\n-------\nout : ndarray\n    Output array of ints.\n\nSee Also\n--------\nfind, str.index\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([\"Computer Science\"])\n>>> np.strings.index(a, \"Science\", start=0, end=None)\narray([9])"
    },
    {
      "name": "rindex",
      "docstring": "Like `rfind`, but raises :exc:`ValueError` when the substring `sub` is\nnot found.\n\nParameters\n----------\na : array-like, with `np.bytes_` or `np.str_` dtype\n\nsub : array-like, with `np.bytes_` or `np.str_` dtype\n\nstart, end : array-like, with any integer dtype, optional\n\nReturns\n-------\nout : ndarray\n    Output array of ints.\n\nSee Also\n--------\nrfind, str.rindex\n\nExamples\n--------\n>>> a = np.array([\"Computer Science\"])\n>>> np.strings.rindex(a, \"Science\", start=0, end=None)\narray([9])"
    },
    {
      "name": "count",
      "docstring": "Returns an array with the number of non-overlapping occurrences of\nsubstring ``sub`` in the range [``start``, ``end``).\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nsub : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n   The substring to search for.\n\nstart, end : array_like, with any integer dtype\n    The range to look in, interpreted as in slice notation.\n\nReturns\n-------\ny : ndarray\n    Output array of ints\n\nSee Also\n--------\nstr.count\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n>>> c\narray(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')\n>>> np.strings.count(c, 'A')\narray([3, 1, 1])\n>>> np.strings.count(c, 'aA')\narray([3, 1, 0])\n>>> np.strings.count(c, 'A', start=1, end=4)\narray([2, 1, 1])\n>>> np.strings.count(c, 'A', start=1, end=3)\narray([1, 0, 0])"
    },
    {
      "name": "startswith",
      "docstring": "Returns a boolean array which is `True` where the string element\nin ``a`` starts with ``prefix``, otherwise `False`.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nprefix : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nstart, end : array_like, with any integer dtype\n    With ``start``, test beginning at that position. With ``end``,\n    stop comparing at that position.\n\nReturns\n-------\nout : ndarray\n    Output array of bools\n\nSee Also\n--------\nstr.startswith\n\nExamples\n--------\n>>> import numpy as np\n>>> s = np.array(['foo', 'bar'])\n>>> s\narray(['foo', 'bar'], dtype='<U3')\n>>> np.strings.startswith(s, 'fo')\narray([True,  False])\n>>> np.strings.startswith(s, 'o', start=1, end=2)\narray([True,  False])"
    },
    {
      "name": "endswith",
      "docstring": "Returns a boolean array which is `True` where the string element\nin ``a`` ends with ``suffix``, otherwise `False`.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nsuffix : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nstart, end : array_like, with any integer dtype\n    With ``start``, test beginning at that position. With ``end``,\n    stop comparing at that position.\n\nReturns\n-------\nout : ndarray\n    Output array of bools\n\nSee Also\n--------\nstr.endswith\n\nExamples\n--------\n>>> import numpy as np\n>>> s = np.array(['foo', 'bar'])\n>>> s\narray(['foo', 'bar'], dtype='<U3')\n>>> np.strings.endswith(s, 'ar')\narray([False,  True])\n>>> np.strings.endswith(s, 'a', start=1, end=2)\narray([False,  True])"
    },
    {
      "name": "decode",
      "docstring": "Calls :meth:`bytes.decode` element-wise.\n\nThe set of available codecs comes from the Python standard library,\nand may be extended at runtime.  For more information, see the\n:mod:`codecs` module.\n\nParameters\n----------\na : array_like, with ``bytes_`` dtype\n\nencoding : str, optional\n   The name of an encoding\n\nerrors : str, optional\n   Specifies how to handle encoding errors\n\nReturns\n-------\nout : ndarray\n\nSee Also\n--------\n:py:meth:`bytes.decode`\n\nNotes\n-----\nThe type of the result will depend on the encoding specified.\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array([b'\\x81\\xc1\\x81\\xc1\\x81\\xc1', b'@@\\x81\\xc1@@',\n...               b'\\x81\\x82\\xc2\\xc1\\xc2\\x82\\x81'])\n>>> c\narray([b'\\x81\\xc1\\x81\\xc1\\x81\\xc1', b'@@\\x81\\xc1@@',\n       b'\\x81\\x82\\xc2\\xc1\\xc2\\x82\\x81'], dtype='|S7')\n>>> np.strings.decode(c, encoding='cp037')\narray(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')"
    },
    {
      "name": "encode",
      "docstring": "Calls :meth:`str.encode` element-wise.\n\nThe set of available codecs comes from the Python standard library,\nand may be extended at runtime. For more information, see the\n:mod:`codecs` module.\n\nParameters\n----------\na : array_like, with ``StringDType`` or ``str_`` dtype\n\nencoding : str, optional\n   The name of an encoding\n\nerrors : str, optional\n   Specifies how to handle encoding errors\n\nReturns\n-------\nout : ndarray\n\nSee Also\n--------\nstr.encode\n\nNotes\n-----\nThe type of the result will depend on the encoding specified.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n>>> np.strings.encode(a, encoding='cp037')\narray([b'\u0081\u00c1\u0081\u00c1\u0081\u00c1', b'@@\u0081\u00c1@@',\n   b'\u0081\u0082\u00c2\u00c1\u00c2\u0082\u0081'], dtype='|S7')"
    },
    {
      "name": "expandtabs",
      "docstring": "Return a copy of each string element where all tab characters are\nreplaced by one or more spaces.\n\nCalls :meth:`str.expandtabs` element-wise.\n\nReturn a copy of each string element where all tab characters are\nreplaced by one or more spaces, depending on the current column\nand the given `tabsize`. The column number is reset to zero after\neach newline occurring in the string. This doesn't understand other\nnon-printing characters or escape sequences.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Input array\ntabsize : int, optional\n    Replace tabs with `tabsize` number of spaces.  If not given defaults\n    to 8 spaces.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input type\n\nSee Also\n--------\nstr.expandtabs\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array(['         Hello   world'])\n>>> np.strings.expandtabs(a, tabsize=4)  # doctest: +SKIP\narray(['        Hello   world'], dtype='<U21')  # doctest: +SKIP"
    },
    {
      "name": "center",
      "docstring": "Return a copy of `a` with its elements centered in a string of\nlength `width`.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nwidth : array_like, with any integer dtype\n    The length of the resulting strings, unless ``width < str_len(a)``.\nfillchar : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Optional padding character to use (default is space).\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.center\n\nNotes\n-----\nWhile it is possible for ``a`` and ``fillchar`` to have different dtypes,\npassing a non-ASCII character in ``fillchar`` when ``a`` is of dtype \"S\"\nis not allowed, and a ``ValueError`` is raised.\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array(['a1b2','1b2a','b2a1','2a1b']); c\narray(['a1b2', '1b2a', 'b2a1', '2a1b'], dtype='<U4')\n>>> np.strings.center(c, width=9)\narray(['   a1b2  ', '   1b2a  ', '   b2a1  ', '   2a1b  '], dtype='<U9')\n>>> np.strings.center(c, width=9, fillchar='*')\narray(['***a1b2**', '***1b2a**', '***b2a1**', '***2a1b**'], dtype='<U9')\n>>> np.strings.center(c, width=1)\narray(['a1b2', '1b2a', 'b2a1', '2a1b'], dtype='<U4')"
    },
    {
      "name": "ljust",
      "docstring": "Return an array with the elements of `a` left-justified in a\nstring of length `width`.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nwidth : array_like, with any integer dtype\n    The length of the resulting strings, unless ``width < str_len(a)``.\nfillchar : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Optional character to use for padding (default is space).\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.ljust\n\nNotes\n-----\nWhile it is possible for ``a`` and ``fillchar`` to have different dtypes,\npassing a non-ASCII character in ``fillchar`` when ``a`` is of dtype \"S\"\nis not allowed, and a ``ValueError`` is raised.\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n>>> np.strings.ljust(c, width=3)\narray(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')\n>>> np.strings.ljust(c, width=9)\narray(['aAaAaA   ', '  aA     ', 'abBABba  '], dtype='<U9')"
    },
    {
      "name": "rjust",
      "docstring": "Return an array with the elements of `a` right-justified in a\nstring of length `width`.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nwidth : array_like, with any integer dtype\n    The length of the resulting strings, unless ``width < str_len(a)``.\nfillchar : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Optional padding character to use (default is space).\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.rjust\n\nNotes\n-----\nWhile it is possible for ``a`` and ``fillchar`` to have different dtypes,\npassing a non-ASCII character in ``fillchar`` when ``a`` is of dtype \"S\"\nis not allowed, and a ``ValueError`` is raised.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n>>> np.strings.rjust(a, width=3)\narray(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')\n>>> np.strings.rjust(a, width=9)\narray(['   aAaAaA', '     aA  ', '  abBABba'], dtype='<U9')"
    },
    {
      "name": "zfill",
      "docstring": "Return the numeric string left-filled with zeros. A leading\nsign prefix (``+``/``-``) is handled by inserting the padding\nafter the sign character rather than before.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n\nwidth : array_like, with any integer dtype\n    Width of string to left-fill elements in `a`.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input type\n\nSee Also\n--------\nstr.zfill\n\nExamples\n--------\n>>> import numpy as np\n>>> np.strings.zfill(['1', '-1', '+1'], 3)\narray(['001', '-01', '+01'], dtype='<U3')"
    },
    {
      "name": "lstrip",
      "docstring": "For each element in `a`, return a copy with the leading characters\nremoved.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\nchars : scalar with the same dtype as ``a``, optional\n   The ``chars`` argument is a string specifying the set of\n   characters to be removed. If ``None``, the ``chars``\n   argument defaults to removing whitespace. The ``chars`` argument\n   is not a prefix or suffix; rather, all combinations of its\n   values are stripped.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.lstrip\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n>>> c\narray(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')\n# The 'a' variable is unstripped from c[1] because of leading whitespace.\n>>> np.strings.lstrip(c, 'a')\narray(['AaAaA', '  aA  ', 'bBABba'], dtype='<U7')\n>>> np.strings.lstrip(c, 'A') # leaves c unchanged\narray(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')\n>>> (np.strings.lstrip(c, ' ') == np.strings.lstrip(c, '')).all()\nnp.False_\n>>> (np.strings.lstrip(c, ' ') == np.strings.lstrip(c)).all()\nnp.True_"
    },
    {
      "name": "rstrip",
      "docstring": "For each element in `a`, return a copy with the trailing characters\nremoved.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\nchars : scalar with the same dtype as ``a``, optional\n   The ``chars`` argument is a string specifying the set of\n   characters to be removed. If ``None``, the ``chars``\n   argument defaults to removing whitespace. The ``chars`` argument\n   is not a prefix or suffix; rather, all combinations of its\n   values are stripped.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.rstrip\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array(['aAaAaA', 'abBABba'])\n>>> c\narray(['aAaAaA', 'abBABba'], dtype='<U7')\n>>> np.strings.rstrip(c, 'a')\narray(['aAaAaA', 'abBABb'], dtype='<U7')\n>>> np.strings.rstrip(c, 'A')\narray(['aAaAa', 'abBABba'], dtype='<U7')"
    },
    {
      "name": "strip",
      "docstring": "For each element in `a`, return a copy with the leading and\ntrailing characters removed.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\nchars : scalar with the same dtype as ``a``, optional\n   The ``chars`` argument is a string specifying the set of\n   characters to be removed. If ``None``, the ``chars``\n   argument defaults to removing whitespace. The ``chars`` argument\n   is not a prefix or suffix; rather, all combinations of its\n   values are stripped.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.strip\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n>>> c\narray(['aAaAaA', '  aA  ', 'abBABba'], dtype='<U7')\n>>> np.strings.strip(c)\narray(['aAaAaA', 'aA', 'abBABba'], dtype='<U7')\n# 'a' unstripped from c[1] because of leading whitespace.\n>>> np.strings.strip(c, 'a')\narray(['AaAaA', '  aA  ', 'bBABb'], dtype='<U7')\n# 'A' unstripped from c[1] because of trailing whitespace.\n>>> np.strings.strip(c, 'A')\narray(['aAaAa', '  aA  ', 'abBABba'], dtype='<U7')"
    },
    {
      "name": "upper",
      "docstring": "Return an array with the elements converted to uppercase.\n\nCalls :meth:`str.upper` element-wise.\n\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Input array.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.upper\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array(['a1b c', '1bca', 'bca1']); c\narray(['a1b c', '1bca', 'bca1'], dtype='<U5')\n>>> np.strings.upper(c)\narray(['A1B C', '1BCA', 'BCA1'], dtype='<U5')"
    },
    {
      "name": "lower",
      "docstring": "Return an array with the elements converted to lowercase.\n\nCall :meth:`str.lower` element-wise.\n\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Input array.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.lower\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array(['A1B C', '1BCA', 'BCA1']); c\narray(['A1B C', '1BCA', 'BCA1'], dtype='<U5')\n>>> np.strings.lower(c)\narray(['a1b c', '1bca', 'bca1'], dtype='<U5')"
    },
    {
      "name": "swapcase",
      "docstring": "Return element-wise a copy of the string with\nuppercase characters converted to lowercase and vice versa.\n\nCalls :meth:`str.swapcase` element-wise.\n\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Input array.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.swapcase\n\nExamples\n--------\n>>> import numpy as np\n>>> c=np.array(['a1B c','1b Ca','b Ca1','cA1b'],'S5'); c\narray(['a1B c', '1b Ca', 'b Ca1', 'cA1b'],\n    dtype='|S5')\n>>> np.strings.swapcase(c)\narray(['A1b C', '1B cA', 'B cA1', 'Ca1B'],\n    dtype='|S5')"
    },
    {
      "name": "capitalize",
      "docstring": "Return a copy of ``a`` with only the first character of each element\ncapitalized.\n\nCalls :meth:`str.capitalize` element-wise.\n\nFor byte strings, this method is locale-dependent.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Input array of strings to capitalize.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.capitalize\n\nExamples\n--------\n>>> import numpy as np\n>>> c = np.array(['a1b2','1b2a','b2a1','2a1b'],'S4'); c\narray(['a1b2', '1b2a', 'b2a1', '2a1b'],\n    dtype='|S4')\n>>> np.strings.capitalize(c)\narray(['A1b2', '1b2a', 'B2a1', '2a1b'],\n    dtype='|S4')"
    },
    {
      "name": "title",
      "docstring": "Return element-wise title cased version of string or unicode.\n\nTitle case words start with uppercase characters, all remaining cased\ncharacters are lowercase.\n\nCalls :meth:`str.title` element-wise.\n\nFor 8-bit strings, this method is locale-dependent.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Input array.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.title\n\nExamples\n--------\n>>> import numpy as np\n>>> c=np.array(['a1b c','1b ca','b ca1','ca1b'],'S5'); c\narray(['a1b c', '1b ca', 'b ca1', 'ca1b'],\n    dtype='|S5')\n>>> np.strings.title(c)\narray(['A1B C', '1B Ca', 'B Ca1', 'Ca1B'],\n    dtype='|S5')"
    },
    {
      "name": "replace",
      "docstring": "For each element in ``a``, return a copy of the string with\noccurrences of substring ``old`` replaced by ``new``.\n\nParameters\n----------\na : array_like, with ``bytes_`` or ``str_`` dtype\n\nold, new : array_like, with ``bytes_`` or ``str_`` dtype\n\ncount : array_like, with ``int_`` dtype\n    If the optional argument ``count`` is given, only the first\n    ``count`` occurrences are replaced.\n\nReturns\n-------\nout : ndarray\n    Output array of ``StringDType``, ``bytes_`` or ``str_`` dtype,\n    depending on input types\n\nSee Also\n--------\nstr.replace\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([\"That is a mango\", \"Monkeys eat mangos\"])\n>>> np.strings.replace(a, 'mango', 'banana')\narray(['That is a banana', 'Monkeys eat bananas'], dtype='<U19')\n\n>>> a = np.array([\"The dish is fresh\", \"This is it\"])\n>>> np.strings.replace(a, 'is', 'was')\narray(['The dwash was fresh', 'Thwas was it'], dtype='<U19')"
    },
    {
      "name": "partition",
      "docstring": "Partition each element in ``a`` around ``sep``.\n\nFor each element in ``a``, split the element at the first\noccurrence of ``sep``, and return a 3-tuple containing the part\nbefore the separator, the separator itself, and the part after\nthe separator. If the separator is not found, the first item of\nthe tuple will contain the whole string, and the second and third\nones will be the empty string.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Input array\nsep : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Separator to split each string element in ``a``.\n\nReturns\n-------\nout : 3-tuple:\n    - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n      part before the separator\n    - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n      separator\n    - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n      part after the separator\n\nSee Also\n--------\nstr.partition\n\nExamples\n--------\n>>> import numpy as np\n>>> x = np.array([\"Numpy is nice!\"])\n>>> np.strings.partition(x, \" \")\n(array(['Numpy'], dtype='<U5'),\n array([' '], dtype='<U1'),\n array(['is nice!'], dtype='<U8'))"
    },
    {
      "name": "rpartition",
      "docstring": "Partition (split) each element around the right-most separator.\n\nFor each element in ``a``, split the element at the last\noccurrence of ``sep``, and return a 3-tuple containing the part\nbefore the separator, the separator itself, and the part after\nthe separator. If the separator is not found, the third item of\nthe tuple will contain the whole string, and the first and second\nones will be the empty string.\n\nParameters\n----------\na : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Input array\nsep : array-like, with ``StringDType``, ``bytes_``, or ``str_`` dtype\n    Separator to split each string element in ``a``.\n\nReturns\n-------\nout : 3-tuple:\n    - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n      part before the separator\n    - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n      separator\n    - array with ``StringDType``, ``bytes_`` or ``str_`` dtype with the\n      part after the separator\n\nSee Also\n--------\nstr.rpartition\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array(['aAaAaA', '  aA  ', 'abBABba'])\n>>> np.strings.rpartition(a, 'A')\n(array(['aAaAa', '  a', 'abB'], dtype='<U5'),\n array(['A', 'A', 'A'], dtype='<U1'),\n array(['', '  ', 'Bba'], dtype='<U3'))"
    },
    {
      "name": "translate",
      "docstring": "For each element in `a`, return a copy of the string where all\ncharacters occurring in the optional argument `deletechars` are\nremoved, and the remaining characters have been mapped through the\ngiven translation table.\n\nCalls :meth:`str.translate` element-wise.\n\nParameters\n----------\na : array-like, with `np.bytes_` or `np.str_` dtype\n\ntable : str of length 256\n\ndeletechars : str\n\nReturns\n-------\nout : ndarray\n    Output array of str or unicode, depending on input type\n\nSee Also\n--------\nstr.translate\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array(['a1b c', '1bca', 'bca1'])\n>>> table = a[0].maketrans('abc', '123')\n>>> deletechars = ' '\n>>> np.char.translate(a, table, deletechars)\narray(['112 3', '1231', '2311'], dtype='<U5')"
    }
  ],
  "innovations": []
}