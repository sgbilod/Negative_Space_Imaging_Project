{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pyparsing\\common.py",
  "classes": [
    {
      "name": "pyparsing_common",
      "docstring": "Here are some common low-level expressions that may be useful in\njump-starting parser development:\n\n- numeric forms (:class:`integers<integer>`, :class:`reals<real>`,\n  :class:`scientific notation<sci_real>`)\n- common :class:`programming identifiers<identifier>`\n- network addresses (:class:`MAC<mac_address>`,\n  :class:`IPv4<ipv4_address>`, :class:`IPv6<ipv6_address>`)\n- ISO8601 :class:`dates<iso8601_date>` and\n  :class:`datetime<iso8601_datetime>`\n- :class:`UUID<uuid>`\n- :class:`comma-separated list<comma_separated_list>`\n- :class:`url`\n\nParse actions:\n\n- :class:`convert_to_integer`\n- :class:`convert_to_float`\n- :class:`convert_to_date`\n- :class:`convert_to_datetime`\n- :class:`strip_html_tags`\n- :class:`upcase_tokens`\n- :class:`downcase_tokens`\n\nExample::\n\n    pyparsing_common.number.run_tests('''\n        # any int or real number, returned as the appropriate type\n        100\n        -100\n        +100\n        3.14159\n        6.02e23\n        1e-12\n        ''')\n\n    pyparsing_common.fnumber.run_tests('''\n        # any int or real number, returned as float\n        100\n        -100\n        +100\n        3.14159\n        6.02e23\n        1e-12\n        ''')\n\n    pyparsing_common.hex_integer.run_tests('''\n        # hex numbers\n        100\n        FF\n        ''')\n\n    pyparsing_common.fraction.run_tests('''\n        # fractions\n        1/2\n        -3/4\n        ''')\n\n    pyparsing_common.mixed_integer.run_tests('''\n        # mixed fractions\n        1\n        1/2\n        -3/4\n        1-3/4\n        ''')\n\n    import uuid\n    pyparsing_common.uuid.set_parse_action(token_map(uuid.UUID))\n    pyparsing_common.uuid.run_tests('''\n        # uuid\n        12345678-1234-5678-1234-567812345678\n        ''')\n\nprints::\n\n    # any int or real number, returned as the appropriate type\n    100\n    [100]\n\n    -100\n    [-100]\n\n    +100\n    [100]\n\n    3.14159\n    [3.14159]\n\n    6.02e23\n    [6.02e+23]\n\n    1e-12\n    [1e-12]\n\n    # any int or real number, returned as float\n    100\n    [100.0]\n\n    -100\n    [-100.0]\n\n    +100\n    [100.0]\n\n    3.14159\n    [3.14159]\n\n    6.02e23\n    [6.02e+23]\n\n    1e-12\n    [1e-12]\n\n    # hex numbers\n    100\n    [256]\n\n    FF\n    [255]\n\n    # fractions\n    1/2\n    [0.5]\n\n    -3/4\n    [-0.75]\n\n    # mixed fractions\n    1\n    [1]\n\n    1/2\n    [0.5]\n\n    -3/4\n    [-0.75]\n\n    1-3/4\n    [1.75]\n\n    # uuid\n    12345678-1234-5678-1234-567812345678\n    [UUID('12345678-1234-5678-1234-567812345678')]",
      "methods": [
        {
          "name": "convert_to_date",
          "docstring": "Helper to create a parse action for converting parsed date string to Python datetime.date\n\nParams -\n- fmt - format to be passed to datetime.strptime (default= ``\"%Y-%m-%d\"``)\n\nExample::\n\n    date_expr = pyparsing_common.iso8601_date.copy()\n    date_expr.set_parse_action(pyparsing_common.convert_to_date())\n    print(date_expr.parse_string(\"1999-12-31\"))\n\nprints::\n\n    [datetime.date(1999, 12, 31)]"
        },
        {
          "name": "convert_to_datetime",
          "docstring": "Helper to create a parse action for converting parsed\ndatetime string to Python datetime.datetime\n\nParams -\n- fmt - format to be passed to datetime.strptime (default= ``\"%Y-%m-%dT%H:%M:%S.%f\"``)\n\nExample::\n\n    dt_expr = pyparsing_common.iso8601_datetime.copy()\n    dt_expr.set_parse_action(pyparsing_common.convert_to_datetime())\n    print(dt_expr.parse_string(\"1999-12-31T23:59:59.999\"))\n\nprints::\n\n    [datetime.datetime(1999, 12, 31, 23, 59, 59, 999000)]"
        },
        {
          "name": "strip_html_tags",
          "docstring": "Parse action to remove HTML tags from web page HTML source\n\nExample::\n\n    # strip HTML links from normal text\n    text = '<td>More info at the <a href=\"https://github.com/pyparsing/pyparsing/wiki\">pyparsing</a> wiki page</td>'\n    td, td_end = make_html_tags(\"TD\")\n    table_text = td + SkipTo(td_end).set_parse_action(pyparsing_common.strip_html_tags)(\"body\") + td_end\n    print(table_text.parse_string(text).body)\n\nPrints::\n\n    More info at the pyparsing wiki page"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "convert_to_date",
      "docstring": "Helper to create a parse action for converting parsed date string to Python datetime.date\n\nParams -\n- fmt - format to be passed to datetime.strptime (default= ``\"%Y-%m-%d\"``)\n\nExample::\n\n    date_expr = pyparsing_common.iso8601_date.copy()\n    date_expr.set_parse_action(pyparsing_common.convert_to_date())\n    print(date_expr.parse_string(\"1999-12-31\"))\n\nprints::\n\n    [datetime.date(1999, 12, 31)]"
    },
    {
      "name": "convert_to_datetime",
      "docstring": "Helper to create a parse action for converting parsed\ndatetime string to Python datetime.datetime\n\nParams -\n- fmt - format to be passed to datetime.strptime (default= ``\"%Y-%m-%dT%H:%M:%S.%f\"``)\n\nExample::\n\n    dt_expr = pyparsing_common.iso8601_datetime.copy()\n    dt_expr.set_parse_action(pyparsing_common.convert_to_datetime())\n    print(dt_expr.parse_string(\"1999-12-31T23:59:59.999\"))\n\nprints::\n\n    [datetime.datetime(1999, 12, 31, 23, 59, 59, 999000)]"
    },
    {
      "name": "strip_html_tags",
      "docstring": "Parse action to remove HTML tags from web page HTML source\n\nExample::\n\n    # strip HTML links from normal text\n    text = '<td>More info at the <a href=\"https://github.com/pyparsing/pyparsing/wiki\">pyparsing</a> wiki page</td>'\n    td, td_end = make_html_tags(\"TD\")\n    table_text = td + SkipTo(td_end).set_parse_action(pyparsing_common.strip_html_tags)(\"body\") + td_end\n    print(table_text.parse_string(text).body)\n\nPrints::\n\n    More info at the pyparsing wiki page"
    },
    {
      "name": "cvt_fn",
      "docstring": null
    },
    {
      "name": "cvt_fn",
      "docstring": null
    }
  ],
  "innovations": []
}