{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\rich\\table.py",
  "classes": [
    {
      "name": "Column",
      "docstring": "Defines a column within a ~Table.\n\nArgs:\n    title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.\n    caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.\n    width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.\n    min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.\n    box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.\n    safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.\n    padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).\n    collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.\n    pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.\n    expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n    show_header (bool, optional): Show a header row. Defaults to True.\n    show_footer (bool, optional): Show a footer row. Defaults to False.\n    show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.\n    show_lines (bool, optional): Draw lines between every row. Defaults to False.\n    leading (int, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.\n    style (Union[str, Style], optional): Default style for the table. Defaults to \"none\".\n    row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.\n    header_style (Union[str, Style], optional): Style of the header. Defaults to \"table.header\".\n    footer_style (Union[str, Style], optional): Style of the footer. Defaults to \"table.footer\".\n    border_style (Union[str, Style], optional): Style of the border. Defaults to None.\n    title_style (Union[str, Style], optional): Style of the title. Defaults to None.\n    caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.\n    title_justify (str, optional): Justify method for title. Defaults to \"center\".\n    caption_justify (str, optional): Justify method for caption. Defaults to \"center\".\n    highlight (bool, optional): Highlight cell contents (if str). Defaults to False.",
      "methods": [
        {
          "name": "copy",
          "docstring": "Return a copy of this Column."
        },
        {
          "name": "cells",
          "docstring": "Get all cells in the column, not including header."
        },
        {
          "name": "flexible",
          "docstring": "Check if this column is flexible."
        }
      ]
    },
    {
      "name": "Row",
      "docstring": "Information regarding a row.",
      "methods": []
    },
    {
      "name": "_Cell",
      "docstring": "A single cell in a table.",
      "methods": []
    },
    {
      "name": "Table",
      "docstring": "A console renderable to draw a table.\n\nArgs:\n    *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.\n    title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.\n    caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.\n    width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.\n    min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.\n    box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.\n    safe_box (Optional[bool], optional): Disable box characters that don't display on windows legacy terminal with *raster* fonts. Defaults to True.\n    padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).\n    collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.\n    pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.\n    expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n    show_header (bool, optional): Show a header row. Defaults to True.\n    show_footer (bool, optional): Show a footer row. Defaults to False.\n    show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.\n    show_lines (bool, optional): Draw lines between every row. Defaults to False.\n    leading (int, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.\n    style (Union[str, Style], optional): Default style for the table. Defaults to \"none\".\n    row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.\n    header_style (Union[str, Style], optional): Style of the header. Defaults to \"table.header\".\n    footer_style (Union[str, Style], optional): Style of the footer. Defaults to \"table.footer\".\n    border_style (Union[str, Style], optional): Style of the border. Defaults to None.\n    title_style (Union[str, Style], optional): Style of the title. Defaults to None.\n    caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.\n    title_justify (str, optional): Justify method for title. Defaults to \"center\".\n    caption_justify (str, optional): Justify method for caption. Defaults to \"center\".\n    highlight (bool, optional): Highlight cell contents (if str). Defaults to False.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "grid",
          "docstring": "Get a table with no lines, headers, or footer.\n\nArgs:\n    *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.\n    padding (PaddingDimensions, optional): Get padding around cells. Defaults to 0.\n    collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to True.\n    pad_edge (bool, optional): Enable padding around edges of table. Defaults to False.\n    expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n\nReturns:\n    Table: A table instance."
        },
        {
          "name": "expand",
          "docstring": "Setting a non-None self.width implies expand."
        },
        {
          "name": "expand",
          "docstring": "Set expand."
        },
        {
          "name": "row_count",
          "docstring": "Get the current number of rows."
        },
        {
          "name": "get_row_style",
          "docstring": "Get the current row style."
        },
        {
          "name": "padding",
          "docstring": "Get cell padding."
        },
        {
          "name": "padding",
          "docstring": "Set cell padding."
        },
        {
          "name": "add_column",
          "docstring": "Add a column to the table.\n\nArgs:\n    header (RenderableType, optional): Text or renderable for the header.\n        Defaults to \"\".\n    footer (RenderableType, optional): Text or renderable for the footer.\n        Defaults to \"\".\n    header_style (Union[str, Style], optional): Style for the header, or None for default. Defaults to None.\n    highlight (bool, optional): Whether to highlight the text. The default of None uses the value of the table (self) object.\n    footer_style (Union[str, Style], optional): Style for the footer, or None for default. Defaults to None.\n    style (Union[str, Style], optional): Style for the column cells, or None for default. Defaults to None.\n    justify (JustifyMethod, optional): Alignment for cells. Defaults to \"left\".\n    vertical (VerticalAlignMethod, optional): Vertical alignment, one of \"top\", \"middle\", or \"bottom\". Defaults to \"top\".\n    overflow (OverflowMethod): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to \"ellipsis\".\n    width (int, optional): Desired width of column in characters, or None to fit to contents. Defaults to None.\n    min_width (Optional[int], optional): Minimum width of column, or ``None`` for no minimum. Defaults to None.\n    max_width (Optional[int], optional): Maximum width of column, or ``None`` for no maximum. Defaults to None.\n    ratio (int, optional): Flexible ratio for the column (requires ``Table.expand`` or ``Table.width``). Defaults to None.\n    no_wrap (bool, optional): Set to ``True`` to disable wrapping of this column."
        },
        {
          "name": "add_row",
          "docstring": "Add a row of renderables.\n\nArgs:\n    *renderables (None or renderable): Each cell in a row must be a renderable object (including str),\n        or ``None`` for a blank cell.\n    style (StyleType, optional): An optional style to apply to the entire row. Defaults to None.\n    end_section (bool, optional): End a section and draw a line. Defaults to False.\n\nRaises:\n    errors.NotRenderableError: If you add something that can't be rendered."
        },
        {
          "name": "add_section",
          "docstring": "Add a new section (draw a line after current row)."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "copy",
      "docstring": "Return a copy of this Column."
    },
    {
      "name": "cells",
      "docstring": "Get all cells in the column, not including header."
    },
    {
      "name": "flexible",
      "docstring": "Check if this column is flexible."
    },
    {
      "name": "grid",
      "docstring": "Get a table with no lines, headers, or footer.\n\nArgs:\n    *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.\n    padding (PaddingDimensions, optional): Get padding around cells. Defaults to 0.\n    collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to True.\n    pad_edge (bool, optional): Enable padding around edges of table. Defaults to False.\n    expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n\nReturns:\n    Table: A table instance."
    },
    {
      "name": "expand",
      "docstring": "Setting a non-None self.width implies expand."
    },
    {
      "name": "expand",
      "docstring": "Set expand."
    },
    {
      "name": "row_count",
      "docstring": "Get the current number of rows."
    },
    {
      "name": "get_row_style",
      "docstring": "Get the current row style."
    },
    {
      "name": "padding",
      "docstring": "Get cell padding."
    },
    {
      "name": "padding",
      "docstring": "Set cell padding."
    },
    {
      "name": "add_column",
      "docstring": "Add a column to the table.\n\nArgs:\n    header (RenderableType, optional): Text or renderable for the header.\n        Defaults to \"\".\n    footer (RenderableType, optional): Text or renderable for the footer.\n        Defaults to \"\".\n    header_style (Union[str, Style], optional): Style for the header, or None for default. Defaults to None.\n    highlight (bool, optional): Whether to highlight the text. The default of None uses the value of the table (self) object.\n    footer_style (Union[str, Style], optional): Style for the footer, or None for default. Defaults to None.\n    style (Union[str, Style], optional): Style for the column cells, or None for default. Defaults to None.\n    justify (JustifyMethod, optional): Alignment for cells. Defaults to \"left\".\n    vertical (VerticalAlignMethod, optional): Vertical alignment, one of \"top\", \"middle\", or \"bottom\". Defaults to \"top\".\n    overflow (OverflowMethod): Overflow method: \"crop\", \"fold\", \"ellipsis\". Defaults to \"ellipsis\".\n    width (int, optional): Desired width of column in characters, or None to fit to contents. Defaults to None.\n    min_width (Optional[int], optional): Minimum width of column, or ``None`` for no minimum. Defaults to None.\n    max_width (Optional[int], optional): Maximum width of column, or ``None`` for no maximum. Defaults to None.\n    ratio (int, optional): Flexible ratio for the column (requires ``Table.expand`` or ``Table.width``). Defaults to None.\n    no_wrap (bool, optional): Set to ``True`` to disable wrapping of this column."
    },
    {
      "name": "add_row",
      "docstring": "Add a row of renderables.\n\nArgs:\n    *renderables (None or renderable): Each cell in a row must be a renderable object (including str),\n        or ``None`` for a blank cell.\n    style (StyleType, optional): An optional style to apply to the entire row. Defaults to None.\n    end_section (bool, optional): End a section and draw a line. Defaults to False.\n\nRaises:\n    errors.NotRenderableError: If you add something that can't be rendered."
    },
    {
      "name": "add_section",
      "docstring": "Add a new section (draw a line after current row)."
    },
    {
      "name": "add_cell",
      "docstring": null
    },
    {
      "name": "render_annotation",
      "docstring": null
    },
    {
      "name": "get_padding",
      "docstring": null
    },
    {
      "name": "header",
      "docstring": null
    },
    {
      "name": "align_cell",
      "docstring": null
    }
  ],
  "innovations": []
}