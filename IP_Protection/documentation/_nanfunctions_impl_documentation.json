{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\lib\\_nanfunctions_impl.py",
  "classes": [],
  "functions": [
    {
      "name": "nanmin",
      "docstring": "Return minimum of an array or minimum along an axis, ignoring any NaNs.\nWhen all-NaN slices are encountered a ``RuntimeWarning`` is raised and\nNan is returned for that slice.\n\nParameters\n----------\na : array_like\n    Array containing numbers whose minimum is desired. If `a` is not an\n    array, a conversion is attempted.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the minimum is computed. The default is to compute\n    the minimum of the flattened array.\nout : ndarray, optional\n    Alternate output array in which to place the result.  The default\n    is ``None``; if provided, it must have the same shape as the\n    expected output, but the type will be cast if necessary. See\n    :ref:`ufuncs-output-type` for more details.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the original `a`.\n\n    If the value is anything but the default, then\n    `keepdims` will be passed through to the `min` method\n    of sub-classes of `ndarray`.  If the sub-classes methods\n    does not implement `keepdims` any exceptions will be raised.\ninitial : scalar, optional\n    The maximum value of an output element. Must be present to allow\n    computation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n    .. versionadded:: 1.22.0\nwhere : array_like of bool, optional\n    Elements to compare for the minimum. See `~numpy.ufunc.reduce`\n    for details.\n\n    .. versionadded:: 1.22.0\n\nReturns\n-------\nnanmin : ndarray\n    An array with the same shape as `a`, with the specified axis\n    removed.  If `a` is a 0-d array, or if axis is None, an ndarray\n    scalar is returned.  The same dtype as `a` is returned.\n\nSee Also\n--------\nnanmax :\n    The maximum value of an array along a given axis, ignoring any NaNs.\namin :\n    The minimum value of an array along a given axis, propagating any NaNs.\nfmin :\n    Element-wise minimum of two arrays, ignoring any NaNs.\nminimum :\n    Element-wise minimum of two arrays, propagating any NaNs.\nisnan :\n    Shows which elements are Not a Number (NaN).\nisfinite:\n    Shows which elements are neither NaN nor infinity.\n\namax, fmax, maximum\n\nNotes\n-----\nNumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n(IEEE 754). This means that Not a Number is not equivalent to infinity.\nPositive infinity is treated as a very large number and negative\ninfinity is treated as a very small (i.e. negative) number.\n\nIf the input has a integer type the function is equivalent to np.min.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[1, 2], [3, np.nan]])\n>>> np.nanmin(a)\n1.0\n>>> np.nanmin(a, axis=0)\narray([1.,  2.])\n>>> np.nanmin(a, axis=1)\narray([1.,  3.])\n\nWhen positive infinity and negative infinity are present:\n\n>>> np.nanmin([1, 2, np.nan, np.inf])\n1.0\n>>> np.nanmin([1, 2, np.nan, -np.inf])\n-inf"
    },
    {
      "name": "nanmax",
      "docstring": "Return the maximum of an array or maximum along an axis, ignoring any\nNaNs.  When all-NaN slices are encountered a ``RuntimeWarning`` is\nraised and NaN is returned for that slice.\n\nParameters\n----------\na : array_like\n    Array containing numbers whose maximum is desired. If `a` is not an\n    array, a conversion is attempted.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the maximum is computed. The default is to compute\n    the maximum of the flattened array.\nout : ndarray, optional\n    Alternate output array in which to place the result.  The default\n    is ``None``; if provided, it must have the same shape as the\n    expected output, but the type will be cast if necessary. See\n    :ref:`ufuncs-output-type` for more details.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the original `a`.\n    If the value is anything but the default, then\n    `keepdims` will be passed through to the `max` method\n    of sub-classes of `ndarray`.  If the sub-classes methods\n    does not implement `keepdims` any exceptions will be raised.\ninitial : scalar, optional\n    The minimum value of an output element. Must be present to allow\n    computation on empty slice. See `~numpy.ufunc.reduce` for details.\n\n    .. versionadded:: 1.22.0\nwhere : array_like of bool, optional\n    Elements to compare for the maximum. See `~numpy.ufunc.reduce`\n    for details.\n\n    .. versionadded:: 1.22.0\n\nReturns\n-------\nnanmax : ndarray\n    An array with the same shape as `a`, with the specified axis removed.\n    If `a` is a 0-d array, or if axis is None, an ndarray scalar is\n    returned.  The same dtype as `a` is returned.\n\nSee Also\n--------\nnanmin :\n    The minimum value of an array along a given axis, ignoring any NaNs.\namax :\n    The maximum value of an array along a given axis, propagating any NaNs.\nfmax :\n    Element-wise maximum of two arrays, ignoring any NaNs.\nmaximum :\n    Element-wise maximum of two arrays, propagating any NaNs.\nisnan :\n    Shows which elements are Not a Number (NaN).\nisfinite:\n    Shows which elements are neither NaN nor infinity.\n\namin, fmin, minimum\n\nNotes\n-----\nNumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n(IEEE 754). This means that Not a Number is not equivalent to infinity.\nPositive infinity is treated as a very large number and negative\ninfinity is treated as a very small (i.e. negative) number.\n\nIf the input has a integer type the function is equivalent to np.max.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[1, 2], [3, np.nan]])\n>>> np.nanmax(a)\n3.0\n>>> np.nanmax(a, axis=0)\narray([3.,  2.])\n>>> np.nanmax(a, axis=1)\narray([2.,  3.])\n\nWhen positive infinity and negative infinity are present:\n\n>>> np.nanmax([1, 2, np.nan, -np.inf])\n2.0\n>>> np.nanmax([1, 2, np.nan, np.inf])\ninf"
    },
    {
      "name": "nanargmin",
      "docstring": "Return the indices of the minimum values in the specified axis ignoring\nNaNs. For all-NaN slices ``ValueError`` is raised. Warning: the results\ncannot be trusted if a slice contains only NaNs and Infs.\n\nParameters\n----------\na : array_like\n    Input data.\naxis : int, optional\n    Axis along which to operate.  By default flattened input is used.\nout : array, optional\n    If provided, the result will be inserted into this array. It should\n    be of the appropriate shape and dtype.\n\n    .. versionadded:: 1.22.0\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the array.\n\n    .. versionadded:: 1.22.0\n\nReturns\n-------\nindex_array : ndarray\n    An array of indices or a single index value.\n\nSee Also\n--------\nargmin, nanargmax\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[np.nan, 4], [2, 3]])\n>>> np.argmin(a)\n0\n>>> np.nanargmin(a)\n2\n>>> np.nanargmin(a, axis=0)\narray([1, 1])\n>>> np.nanargmin(a, axis=1)\narray([1, 0])"
    },
    {
      "name": "nanargmax",
      "docstring": "Return the indices of the maximum values in the specified axis ignoring\nNaNs. For all-NaN slices ``ValueError`` is raised. Warning: the\nresults cannot be trusted if a slice contains only NaNs and -Infs.\n\n\nParameters\n----------\na : array_like\n    Input data.\naxis : int, optional\n    Axis along which to operate.  By default flattened input is used.\nout : array, optional\n    If provided, the result will be inserted into this array. It should\n    be of the appropriate shape and dtype.\n\n    .. versionadded:: 1.22.0\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the array.\n\n    .. versionadded:: 1.22.0\n\nReturns\n-------\nindex_array : ndarray\n    An array of indices or a single index value.\n\nSee Also\n--------\nargmax, nanargmin\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[np.nan, 4], [2, 3]])\n>>> np.argmax(a)\n0\n>>> np.nanargmax(a)\n1\n>>> np.nanargmax(a, axis=0)\narray([1, 0])\n>>> np.nanargmax(a, axis=1)\narray([1, 1])"
    },
    {
      "name": "nansum",
      "docstring": "Return the sum of array elements over a given axis treating Not a\nNumbers (NaNs) as zero.\n\nIn NumPy versions <= 1.9.0 Nan is returned for slices that are all-NaN or\nempty. In later versions zero is returned.\n\nParameters\n----------\na : array_like\n    Array containing numbers whose sum is desired. If `a` is not an\n    array, a conversion is attempted.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the sum is computed. The default is to compute the\n    sum of the flattened array.\ndtype : data-type, optional\n    The type of the returned array and of the accumulator in which the\n    elements are summed.  By default, the dtype of `a` is used.  An\n    exception is when `a` has an integer type with less precision than\n    the platform (u)intp. In that case, the default will be either\n    (u)int32 or (u)int64 depending on whether the platform is 32 or 64\n    bits. For inexact inputs, dtype must be inexact.\nout : ndarray, optional\n    Alternate output array in which to place the result.  The default\n    is ``None``. If provided, it must have the same shape as the\n    expected output, but the type will be cast if necessary.  See\n    :ref:`ufuncs-output-type` for more details. The casting of NaN to integer\n    can yield unexpected results.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the original `a`.\n\n    If the value is anything but the default, then\n    `keepdims` will be passed through to the `mean` or `sum` methods\n    of sub-classes of `ndarray`.  If the sub-classes methods\n    does not implement `keepdims` any exceptions will be raised.\ninitial : scalar, optional\n    Starting value for the sum. See `~numpy.ufunc.reduce` for details.\n\n    .. versionadded:: 1.22.0\nwhere : array_like of bool, optional\n    Elements to include in the sum. See `~numpy.ufunc.reduce` for details.\n\n    .. versionadded:: 1.22.0\n\nReturns\n-------\nnansum : ndarray.\n    A new array holding the result is returned unless `out` is\n    specified, in which it is returned. The result has the same\n    size as `a`, and the same shape as `a` if `axis` is not None\n    or `a` is a 1-d array.\n\nSee Also\n--------\nnumpy.sum : Sum across array propagating NaNs.\nisnan : Show which elements are NaN.\nisfinite : Show which elements are not NaN or +/-inf.\n\nNotes\n-----\nIf both positive and negative infinity are present, the sum will be Not\nA Number (NaN).\n\nExamples\n--------\n>>> import numpy as np\n>>> np.nansum(1)\n1\n>>> np.nansum([1])\n1\n>>> np.nansum([1, np.nan])\n1.0\n>>> a = np.array([[1, 1], [1, np.nan]])\n>>> np.nansum(a)\n3.0\n>>> np.nansum(a, axis=0)\narray([2.,  1.])\n>>> np.nansum([1, np.nan, np.inf])\ninf\n>>> np.nansum([1, np.nan, -np.inf])\n-inf\n>>> from numpy.testing import suppress_warnings\n>>> with np.errstate(invalid=\"ignore\"):\n...     np.nansum([1, np.nan, np.inf, -np.inf]) # both +/- infinity present\nnp.float64(nan)"
    },
    {
      "name": "nanprod",
      "docstring": "Return the product of array elements over a given axis treating Not a\nNumbers (NaNs) as ones.\n\nOne is returned for slices that are all-NaN or empty.\n\nParameters\n----------\na : array_like\n    Array containing numbers whose product is desired. If `a` is not an\n    array, a conversion is attempted.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the product is computed. The default is to compute\n    the product of the flattened array.\ndtype : data-type, optional\n    The type of the returned array and of the accumulator in which the\n    elements are summed.  By default, the dtype of `a` is used.  An\n    exception is when `a` has an integer type with less precision than\n    the platform (u)intp. In that case, the default will be either\n    (u)int32 or (u)int64 depending on whether the platform is 32 or 64\n    bits. For inexact inputs, dtype must be inexact.\nout : ndarray, optional\n    Alternate output array in which to place the result.  The default\n    is ``None``. If provided, it must have the same shape as the\n    expected output, but the type will be cast if necessary. See\n    :ref:`ufuncs-output-type` for more details. The casting of NaN to integer\n    can yield unexpected results.\nkeepdims : bool, optional\n    If True, the axes which are reduced are left in the result as\n    dimensions with size one. With this option, the result will\n    broadcast correctly against the original `arr`.\ninitial : scalar, optional\n    The starting value for this product. See `~numpy.ufunc.reduce`\n    for details.\n\n    .. versionadded:: 1.22.0\nwhere : array_like of bool, optional\n    Elements to include in the product. See `~numpy.ufunc.reduce`\n    for details.\n\n    .. versionadded:: 1.22.0\n\nReturns\n-------\nnanprod : ndarray\n    A new array holding the result is returned unless `out` is\n    specified, in which case it is returned.\n\nSee Also\n--------\nnumpy.prod : Product across array propagating NaNs.\nisnan : Show which elements are NaN.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.nanprod(1)\n1\n>>> np.nanprod([1])\n1\n>>> np.nanprod([1, np.nan])\n1.0\n>>> a = np.array([[1, 2], [3, np.nan]])\n>>> np.nanprod(a)\n6.0\n>>> np.nanprod(a, axis=0)\narray([3., 2.])"
    },
    {
      "name": "nancumsum",
      "docstring": "Return the cumulative sum of array elements over a given axis treating Not a\nNumbers (NaNs) as zero.  The cumulative sum does not change when NaNs are\nencountered and leading NaNs are replaced by zeros.\n\nZeros are returned for slices that are all-NaN or empty.\n\nParameters\n----------\na : array_like\n    Input array.\naxis : int, optional\n    Axis along which the cumulative sum is computed. The default\n    (None) is to compute the cumsum over the flattened array.\ndtype : dtype, optional\n    Type of the returned array and of the accumulator in which the\n    elements are summed.  If `dtype` is not specified, it defaults\n    to the dtype of `a`, unless `a` has an integer dtype with a\n    precision less than that of the default platform integer.  In\n    that case, the default platform integer is used.\nout : ndarray, optional\n    Alternative output array in which to place the result. It must\n    have the same shape and buffer length as the expected output\n    but the type will be cast if necessary. See :ref:`ufuncs-output-type` for\n    more details.\n\nReturns\n-------\nnancumsum : ndarray.\n    A new array holding the result is returned unless `out` is\n    specified, in which it is returned. The result has the same\n    size as `a`, and the same shape as `a` if `axis` is not None\n    or `a` is a 1-d array.\n\nSee Also\n--------\nnumpy.cumsum : Cumulative sum across array propagating NaNs.\nisnan : Show which elements are NaN.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.nancumsum(1)\narray([1])\n>>> np.nancumsum([1])\narray([1])\n>>> np.nancumsum([1, np.nan])\narray([1.,  1.])\n>>> a = np.array([[1, 2], [3, np.nan]])\n>>> np.nancumsum(a)\narray([1.,  3.,  6.,  6.])\n>>> np.nancumsum(a, axis=0)\narray([[1.,  2.],\n       [4.,  2.]])\n>>> np.nancumsum(a, axis=1)\narray([[1.,  3.],\n       [3.,  3.]])"
    },
    {
      "name": "nancumprod",
      "docstring": "Return the cumulative product of array elements over a given axis treating Not a\nNumbers (NaNs) as one.  The cumulative product does not change when NaNs are\nencountered and leading NaNs are replaced by ones.\n\nOnes are returned for slices that are all-NaN or empty.\n\nParameters\n----------\na : array_like\n    Input array.\naxis : int, optional\n    Axis along which the cumulative product is computed.  By default\n    the input is flattened.\ndtype : dtype, optional\n    Type of the returned array, as well as of the accumulator in which\n    the elements are multiplied.  If *dtype* is not specified, it\n    defaults to the dtype of `a`, unless `a` has an integer dtype with\n    a precision less than that of the default platform integer.  In\n    that case, the default platform integer is used instead.\nout : ndarray, optional\n    Alternative output array in which to place the result. It must\n    have the same shape and buffer length as the expected output\n    but the type of the resulting values will be cast if necessary.\n\nReturns\n-------\nnancumprod : ndarray\n    A new array holding the result is returned unless `out` is\n    specified, in which case it is returned.\n\nSee Also\n--------\nnumpy.cumprod : Cumulative product across array propagating NaNs.\nisnan : Show which elements are NaN.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.nancumprod(1)\narray([1])\n>>> np.nancumprod([1])\narray([1])\n>>> np.nancumprod([1, np.nan])\narray([1.,  1.])\n>>> a = np.array([[1, 2], [3, np.nan]])\n>>> np.nancumprod(a)\narray([1.,  2.,  6.,  6.])\n>>> np.nancumprod(a, axis=0)\narray([[1.,  2.],\n       [3.,  2.]])\n>>> np.nancumprod(a, axis=1)\narray([[1.,  2.],\n       [3.,  3.]])"
    },
    {
      "name": "nanmean",
      "docstring": "Compute the arithmetic mean along the specified axis, ignoring NaNs.\n\nReturns the average of the array elements.  The average is taken over\nthe flattened array by default, otherwise over the specified axis.\n`float64` intermediate and return values are used for integer inputs.\n\nFor all-NaN slices, NaN is returned and a `RuntimeWarning` is raised.\n\nParameters\n----------\na : array_like\n    Array containing numbers whose mean is desired. If `a` is not an\n    array, a conversion is attempted.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the means are computed. The default is to compute\n    the mean of the flattened array.\ndtype : data-type, optional\n    Type to use in computing the mean.  For integer inputs, the default\n    is `float64`; for inexact inputs, it is the same as the input\n    dtype.\nout : ndarray, optional\n    Alternate output array in which to place the result.  The default\n    is ``None``; if provided, it must have the same shape as the\n    expected output, but the type will be cast if necessary.\n    See :ref:`ufuncs-output-type` for more details.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the original `a`.\n\n    If the value is anything but the default, then\n    `keepdims` will be passed through to the `mean` or `sum` methods\n    of sub-classes of `ndarray`.  If the sub-classes methods\n    does not implement `keepdims` any exceptions will be raised.\nwhere : array_like of bool, optional\n    Elements to include in the mean. See `~numpy.ufunc.reduce` for details.\n\n    .. versionadded:: 1.22.0\n\nReturns\n-------\nm : ndarray, see dtype parameter above\n    If `out=None`, returns a new array containing the mean values,\n    otherwise a reference to the output array is returned. Nan is\n    returned for slices that contain only NaNs.\n\nSee Also\n--------\naverage : Weighted average\nmean : Arithmetic mean taken while not ignoring NaNs\nvar, nanvar\n\nNotes\n-----\nThe arithmetic mean is the sum of the non-NaN elements along the axis\ndivided by the number of non-NaN elements.\n\nNote that for floating-point input, the mean is computed using the same\nprecision the input has.  Depending on the input data, this can cause\nthe results to be inaccurate, especially for `float32`.  Specifying a\nhigher-precision accumulator using the `dtype` keyword can alleviate\nthis issue.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[1, np.nan], [3, 4]])\n>>> np.nanmean(a)\n2.6666666666666665\n>>> np.nanmean(a, axis=0)\narray([2.,  4.])\n>>> np.nanmean(a, axis=1)\narray([1.,  3.5]) # may vary"
    },
    {
      "name": "nanmedian",
      "docstring": "Compute the median along the specified axis, while ignoring NaNs.\n\nReturns the median of the array elements.\n\nParameters\n----------\na : array_like\n    Input array or object that can be converted to an array.\naxis : {int, sequence of int, None}, optional\n    Axis or axes along which the medians are computed. The default\n    is to compute the median along a flattened version of the array.\n    A sequence of axes is supported since version 1.9.0.\nout : ndarray, optional\n    Alternative output array in which to place the result. It must\n    have the same shape and buffer length as the expected output,\n    but the type (of the output) will be cast if necessary.\noverwrite_input : bool, optional\n   If True, then allow use of memory of input array `a` for\n   calculations. The input array will be modified by the call to\n   `median`. This will save memory when you do not need to preserve\n   the contents of the input array. Treat the input as undefined,\n   but it will probably be fully or partially sorted. Default is\n   False. If `overwrite_input` is ``True`` and `a` is not already an\n   `ndarray`, an error will be raised.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the original `a`.\n\n    If this is anything but the default value it will be passed\n    through (in the special case of an empty array) to the\n    `mean` function of the underlying array.  If the array is\n    a sub-class and `mean` does not have the kwarg `keepdims` this\n    will raise a RuntimeError.\n\nReturns\n-------\nmedian : ndarray\n    A new array holding the result. If the input contains integers\n    or floats smaller than ``float64``, then the output data-type is\n    ``np.float64``.  Otherwise, the data-type of the output is the\n    same as that of the input. If `out` is specified, that array is\n    returned instead.\n\nSee Also\n--------\nmean, median, percentile\n\nNotes\n-----\nGiven a vector ``V`` of length ``N``, the median of ``V`` is the\nmiddle value of a sorted copy of ``V``, ``V_sorted`` - i.e.,\n``V_sorted[(N-1)/2]``, when ``N`` is odd and the average of the two\nmiddle values of ``V_sorted`` when ``N`` is even.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[10.0, 7, 4], [3, 2, 1]])\n>>> a[0, 1] = np.nan\n>>> a\narray([[10., nan,  4.],\n       [ 3.,  2.,  1.]])\n>>> np.median(a)\nnp.float64(nan)\n>>> np.nanmedian(a)\n3.0\n>>> np.nanmedian(a, axis=0)\narray([6.5, 2. , 2.5])\n>>> np.median(a, axis=1)\narray([nan,  2.])\n>>> b = a.copy()\n>>> np.nanmedian(b, axis=1, overwrite_input=True)\narray([7.,  2.])\n>>> assert not np.all(a==b)\n>>> b = a.copy()\n>>> np.nanmedian(b, axis=None, overwrite_input=True)\n3.0\n>>> assert not np.all(a==b)"
    },
    {
      "name": "nanpercentile",
      "docstring": "Compute the qth percentile of the data along the specified axis,\nwhile ignoring nan values.\n\nReturns the qth percentile(s) of the array elements.\n\nParameters\n----------\na : array_like\n    Input array or object that can be converted to an array, containing\n    nan values to be ignored.\nq : array_like of float\n    Percentile or sequence of percentiles to compute, which must be\n    between 0 and 100 inclusive.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the percentiles are computed. The default\n    is to compute the percentile(s) along a flattened version of the\n    array.\nout : ndarray, optional\n    Alternative output array in which to place the result. It must have\n    the same shape and buffer length as the expected output, but the\n    type (of the output) will be cast if necessary.\noverwrite_input : bool, optional\n    If True, then allow the input array `a` to be modified by\n    intermediate calculations, to save memory. In this case, the\n    contents of the input `a` after this function completes is\n    undefined.\nmethod : str, optional\n    This parameter specifies the method to use for estimating the\n    percentile.  There are many different methods, some unique to NumPy.\n    See the notes for explanation.  The options sorted by their R type\n    as summarized in the H&F paper [1]_ are:\n\n    1. 'inverted_cdf'\n    2. 'averaged_inverted_cdf'\n    3. 'closest_observation'\n    4. 'interpolated_inverted_cdf'\n    5. 'hazen'\n    6. 'weibull'\n    7. 'linear'  (default)\n    8. 'median_unbiased'\n    9. 'normal_unbiased'\n\n    The first three methods are discontinuous.  NumPy further defines the\n    following discontinuous variations of the default 'linear' (7.) option:\n\n    * 'lower'\n    * 'higher',\n    * 'midpoint'\n    * 'nearest'\n\n    .. versionchanged:: 1.22.0\n        This argument was previously called \"interpolation\" and only\n        offered the \"linear\" default and last four options.\n\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left in\n    the result as dimensions with size one. With this option, the\n    result will broadcast correctly against the original array `a`.\n\n    If this is anything but the default value it will be passed\n    through (in the special case of an empty array) to the\n    `mean` function of the underlying array.  If the array is\n    a sub-class and `mean` does not have the kwarg `keepdims` this\n    will raise a RuntimeError.\n\nweights : array_like, optional\n    An array of weights associated with the values in `a`. Each value in\n    `a` contributes to the percentile according to its associated weight.\n    The weights array can either be 1-D (in which case its length must be\n    the size of `a` along the given axis) or of the same shape as `a`.\n    If `weights=None`, then all data in `a` are assumed to have a\n    weight equal to one.\n    Only `method=\"inverted_cdf\"` supports weights.\n\n    .. versionadded:: 2.0.0\n\ninterpolation : str, optional\n    Deprecated name for the method keyword argument.\n\n    .. deprecated:: 1.22.0\n\nReturns\n-------\npercentile : scalar or ndarray\n    If `q` is a single percentile and `axis=None`, then the result\n    is a scalar. If multiple percentiles are given, first axis of\n    the result corresponds to the percentiles. The other axes are\n    the axes that remain after the reduction of `a`. If the input\n    contains integers or floats smaller than ``float64``, the output\n    data-type is ``float64``. Otherwise, the output data-type is the\n    same as that of the input. If `out` is specified, that array is\n    returned instead.\n\nSee Also\n--------\nnanmean\nnanmedian : equivalent to ``nanpercentile(..., 50)``\npercentile, median, mean\nnanquantile : equivalent to nanpercentile, except q in range [0, 1].\n\nNotes\n-----\nThe behavior of `numpy.nanpercentile` with percentage `q` is that of\n`numpy.quantile` with argument ``q/100`` (ignoring nan values).\nFor more information, please see `numpy.quantile`.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[10., 7., 4.], [3., 2., 1.]])\n>>> a[0][1] = np.nan\n>>> a\narray([[10.,  nan,   4.],\n      [ 3.,   2.,   1.]])\n>>> np.percentile(a, 50)\nnp.float64(nan)\n>>> np.nanpercentile(a, 50)\n3.0\n>>> np.nanpercentile(a, 50, axis=0)\narray([6.5, 2. , 2.5])\n>>> np.nanpercentile(a, 50, axis=1, keepdims=True)\narray([[7.],\n       [2.]])\n>>> m = np.nanpercentile(a, 50, axis=0)\n>>> out = np.zeros_like(m)\n>>> np.nanpercentile(a, 50, axis=0, out=out)\narray([6.5, 2. , 2.5])\n>>> m\narray([6.5,  2. ,  2.5])\n\n>>> b = a.copy()\n>>> np.nanpercentile(b, 50, axis=1, overwrite_input=True)\narray([7., 2.])\n>>> assert not np.all(a==b)\n\nReferences\n----------\n.. [1] R. J. Hyndman and Y. Fan,\n   \"Sample quantiles in statistical packages,\"\n   The American Statistician, 50(4), pp. 361-365, 1996"
    },
    {
      "name": "nanquantile",
      "docstring": "Compute the qth quantile of the data along the specified axis,\nwhile ignoring nan values.\nReturns the qth quantile(s) of the array elements.\n\nParameters\n----------\na : array_like\n    Input array or object that can be converted to an array, containing\n    nan values to be ignored\nq : array_like of float\n    Probability or sequence of probabilities for the quantiles to compute.\n    Values must be between 0 and 1 inclusive.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the quantiles are computed. The\n    default is to compute the quantile(s) along a flattened\n    version of the array.\nout : ndarray, optional\n    Alternative output array in which to place the result. It must\n    have the same shape and buffer length as the expected output,\n    but the type (of the output) will be cast if necessary.\noverwrite_input : bool, optional\n    If True, then allow the input array `a` to be modified by intermediate\n    calculations, to save memory. In this case, the contents of the input\n    `a` after this function completes is undefined.\nmethod : str, optional\n    This parameter specifies the method to use for estimating the\n    quantile.  There are many different methods, some unique to NumPy.\n    See the notes for explanation.  The options sorted by their R type\n    as summarized in the H&F paper [1]_ are:\n\n    1. 'inverted_cdf'\n    2. 'averaged_inverted_cdf'\n    3. 'closest_observation'\n    4. 'interpolated_inverted_cdf'\n    5. 'hazen'\n    6. 'weibull'\n    7. 'linear'  (default)\n    8. 'median_unbiased'\n    9. 'normal_unbiased'\n\n    The first three methods are discontinuous.  NumPy further defines the\n    following discontinuous variations of the default 'linear' (7.) option:\n\n    * 'lower'\n    * 'higher',\n    * 'midpoint'\n    * 'nearest'\n\n    .. versionchanged:: 1.22.0\n        This argument was previously called \"interpolation\" and only\n        offered the \"linear\" default and last four options.\n\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left in\n    the result as dimensions with size one. With this option, the\n    result will broadcast correctly against the original array `a`.\n\n    If this is anything but the default value it will be passed\n    through (in the special case of an empty array) to the\n    `mean` function of the underlying array.  If the array is\n    a sub-class and `mean` does not have the kwarg `keepdims` this\n    will raise a RuntimeError.\n\nweights : array_like, optional\n    An array of weights associated with the values in `a`. Each value in\n    `a` contributes to the quantile according to its associated weight.\n    The weights array can either be 1-D (in which case its length must be\n    the size of `a` along the given axis) or of the same shape as `a`.\n    If `weights=None`, then all data in `a` are assumed to have a\n    weight equal to one.\n    Only `method=\"inverted_cdf\"` supports weights.\n\n    .. versionadded:: 2.0.0\n\ninterpolation : str, optional\n    Deprecated name for the method keyword argument.\n\n    .. deprecated:: 1.22.0\n\nReturns\n-------\nquantile : scalar or ndarray\n    If `q` is a single probability and `axis=None`, then the result\n    is a scalar. If multiple probability levels are given, first axis of\n    the result corresponds to the quantiles. The other axes are\n    the axes that remain after the reduction of `a`. If the input\n    contains integers or floats smaller than ``float64``, the output\n    data-type is ``float64``. Otherwise, the output data-type is the\n    same as that of the input. If `out` is specified, that array is\n    returned instead.\n\nSee Also\n--------\nquantile\nnanmean, nanmedian\nnanmedian : equivalent to ``nanquantile(..., 0.5)``\nnanpercentile : same as nanquantile, but with q in the range [0, 100].\n\nNotes\n-----\nThe behavior of `numpy.nanquantile` is the same as that of\n`numpy.quantile` (ignoring nan values).\nFor more information, please see `numpy.quantile`.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[10., 7., 4.], [3., 2., 1.]])\n>>> a[0][1] = np.nan\n>>> a\narray([[10.,  nan,   4.],\n      [ 3.,   2.,   1.]])\n>>> np.quantile(a, 0.5)\nnp.float64(nan)\n>>> np.nanquantile(a, 0.5)\n3.0\n>>> np.nanquantile(a, 0.5, axis=0)\narray([6.5, 2. , 2.5])\n>>> np.nanquantile(a, 0.5, axis=1, keepdims=True)\narray([[7.],\n       [2.]])\n>>> m = np.nanquantile(a, 0.5, axis=0)\n>>> out = np.zeros_like(m)\n>>> np.nanquantile(a, 0.5, axis=0, out=out)\narray([6.5, 2. , 2.5])\n>>> m\narray([6.5,  2. ,  2.5])\n>>> b = a.copy()\n>>> np.nanquantile(b, 0.5, axis=1, overwrite_input=True)\narray([7., 2.])\n>>> assert not np.all(a==b)\n\nReferences\n----------\n.. [1] R. J. Hyndman and Y. Fan,\n   \"Sample quantiles in statistical packages,\"\n   The American Statistician, 50(4), pp. 361-365, 1996"
    },
    {
      "name": "nanvar",
      "docstring": "Compute the variance along the specified axis, while ignoring NaNs.\n\nReturns the variance of the array elements, a measure of the spread of\na distribution.  The variance is computed for the flattened array by\ndefault, otherwise over the specified axis.\n\nFor all-NaN slices or slices with zero degrees of freedom, NaN is\nreturned and a `RuntimeWarning` is raised.\n\nParameters\n----------\na : array_like\n    Array containing numbers whose variance is desired.  If `a` is not an\n    array, a conversion is attempted.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the variance is computed.  The default is to compute\n    the variance of the flattened array.\ndtype : data-type, optional\n    Type to use in computing the variance.  For arrays of integer type\n    the default is `float64`; for arrays of float types it is the same as\n    the array type.\nout : ndarray, optional\n    Alternate output array in which to place the result.  It must have\n    the same shape as the expected output, but the type is cast if\n    necessary.\nddof : {int, float}, optional\n    \"Delta Degrees of Freedom\": the divisor used in the calculation is\n    ``N - ddof``, where ``N`` represents the number of non-NaN\n    elements. By default `ddof` is zero.\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the original `a`.\nwhere : array_like of bool, optional\n    Elements to include in the variance. See `~numpy.ufunc.reduce` for\n    details.\n\n    .. versionadded:: 1.22.0\n\nmean : array_like, optional\n    Provide the mean to prevent its recalculation. The mean should have\n    a shape as if it was calculated with ``keepdims=True``.\n    The axis for the calculation of the mean should be the same as used in\n    the call to this var function.\n\n    .. versionadded:: 2.0.0\n\ncorrection : {int, float}, optional\n    Array API compatible name for the ``ddof`` parameter. Only one of them\n    can be provided at the same time.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nvariance : ndarray, see dtype parameter above\n    If `out` is None, return a new array containing the variance,\n    otherwise return a reference to the output array. If ddof is >= the\n    number of non-NaN elements in a slice or the slice contains only\n    NaNs, then the result for that slice is NaN.\n\nSee Also\n--------\nstd : Standard deviation\nmean : Average\nvar : Variance while not ignoring NaNs\nnanstd, nanmean\n:ref:`ufuncs-output-type`\n\nNotes\n-----\nThe variance is the average of the squared deviations from the mean,\ni.e.,  ``var = mean(abs(x - x.mean())**2)``.\n\nThe mean is normally calculated as ``x.sum() / N``, where ``N = len(x)``.\nIf, however, `ddof` is specified, the divisor ``N - ddof`` is used\ninstead.  In standard statistical practice, ``ddof=1`` provides an\nunbiased estimator of the variance of a hypothetical infinite\npopulation.  ``ddof=0`` provides a maximum likelihood estimate of the\nvariance for normally distributed variables.\n\nNote that for complex numbers, the absolute value is taken before\nsquaring, so that the result is always real and nonnegative.\n\nFor floating-point input, the variance is computed using the same\nprecision the input has.  Depending on the input data, this can cause\nthe results to be inaccurate, especially for `float32` (see example\nbelow).  Specifying a higher-accuracy accumulator using the ``dtype``\nkeyword can alleviate this issue.\n\nFor this function to work on sub-classes of ndarray, they must define\n`sum` with the kwarg `keepdims`\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[1, np.nan], [3, 4]])\n>>> np.nanvar(a)\n1.5555555555555554\n>>> np.nanvar(a, axis=0)\narray([1.,  0.])\n>>> np.nanvar(a, axis=1)\narray([0.,  0.25])  # may vary"
    },
    {
      "name": "nanstd",
      "docstring": "Compute the standard deviation along the specified axis, while\nignoring NaNs.\n\nReturns the standard deviation, a measure of the spread of a\ndistribution, of the non-NaN array elements. The standard deviation is\ncomputed for the flattened array by default, otherwise over the\nspecified axis.\n\nFor all-NaN slices or slices with zero degrees of freedom, NaN is\nreturned and a `RuntimeWarning` is raised.\n\nParameters\n----------\na : array_like\n    Calculate the standard deviation of the non-NaN values.\naxis : {int, tuple of int, None}, optional\n    Axis or axes along which the standard deviation is computed. The default is\n    to compute the standard deviation of the flattened array.\ndtype : dtype, optional\n    Type to use in computing the standard deviation. For arrays of\n    integer type the default is float64, for arrays of float types it\n    is the same as the array type.\nout : ndarray, optional\n    Alternative output array in which to place the result. It must have\n    the same shape as the expected output but the type (of the\n    calculated values) will be cast if necessary.\nddof : {int, float}, optional\n    Means Delta Degrees of Freedom.  The divisor used in calculations\n    is ``N - ddof``, where ``N`` represents the number of non-NaN\n    elements.  By default `ddof` is zero.\n\nkeepdims : bool, optional\n    If this is set to True, the axes which are reduced are left\n    in the result as dimensions with size one. With this option,\n    the result will broadcast correctly against the original `a`.\n\n    If this value is anything but the default it is passed through\n    as-is to the relevant functions of the sub-classes.  If these\n    functions do not have a `keepdims` kwarg, a RuntimeError will\n    be raised.\nwhere : array_like of bool, optional\n    Elements to include in the standard deviation.\n    See `~numpy.ufunc.reduce` for details.\n\n    .. versionadded:: 1.22.0\n\nmean : array_like, optional\n    Provide the mean to prevent its recalculation. The mean should have\n    a shape as if it was calculated with ``keepdims=True``.\n    The axis for the calculation of the mean should be the same as used in\n    the call to this std function.\n\n    .. versionadded:: 2.0.0\n\ncorrection : {int, float}, optional\n    Array API compatible name for the ``ddof`` parameter. Only one of them\n    can be provided at the same time.\n\n    .. versionadded:: 2.0.0\n\nReturns\n-------\nstandard_deviation : ndarray, see dtype parameter above.\n    If `out` is None, return a new array containing the standard\n    deviation, otherwise return a reference to the output array. If\n    ddof is >= the number of non-NaN elements in a slice or the slice\n    contains only NaNs, then the result for that slice is NaN.\n\nSee Also\n--------\nvar, mean, std\nnanvar, nanmean\n:ref:`ufuncs-output-type`\n\nNotes\n-----\nThe standard deviation is the square root of the average of the squared\ndeviations from the mean: ``std = sqrt(mean(abs(x - x.mean())**2))``.\n\nThe average squared deviation is normally calculated as\n``x.sum() / N``, where ``N = len(x)``.  If, however, `ddof` is\nspecified, the divisor ``N - ddof`` is used instead. In standard\nstatistical practice, ``ddof=1`` provides an unbiased estimator of the\nvariance of the infinite population. ``ddof=0`` provides a maximum\nlikelihood estimate of the variance for normally distributed variables.\nThe standard deviation computed in this function is the square root of\nthe estimated variance, so even with ``ddof=1``, it will not be an\nunbiased estimate of the standard deviation per se.\n\nNote that, for complex numbers, `std` takes the absolute value before\nsquaring, so that the result is always real and nonnegative.\n\nFor floating-point input, the *std* is computed using the same\nprecision the input has. Depending on the input data, this can cause\nthe results to be inaccurate, especially for float32 (see example\nbelow).  Specifying a higher-accuracy accumulator using the `dtype`\nkeyword can alleviate this issue.\n\nExamples\n--------\n>>> import numpy as np\n>>> a = np.array([[1, np.nan], [3, 4]])\n>>> np.nanstd(a)\n1.247219128924647\n>>> np.nanstd(a, axis=0)\narray([1., 0.])\n>>> np.nanstd(a, axis=1)\narray([0.,  0.5]) # may vary"
    }
  ],
  "innovations": []
}