{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pyparsing\\actions.py",
  "classes": [
    {
      "name": "OnlyOnce",
      "docstring": "Wrapper for parse actions, to ensure they are only called once.\nNote: parse action signature must include all 3 arguments.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "reset",
          "docstring": "Allow the associated parse action to be called once more."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "match_only_at_col",
      "docstring": "Helper method for defining parse actions that require matching at\na specific column in the input text."
    },
    {
      "name": "replace_with",
      "docstring": "Helper method for common parse actions that simply return\na literal value.  Especially useful when used with\n:class:`transform_string<ParserElement.transform_string>` ().\n\nExample::\n\n    num = Word(nums).set_parse_action(lambda toks: int(toks[0]))\n    na = one_of(\"N/A NA\").set_parse_action(replace_with(math.nan))\n    term = na | num\n\n    term[1, ...].parse_string(\"324 234 N/A 234\") # -> [324, 234, nan, 234]"
    },
    {
      "name": "remove_quotes",
      "docstring": "Helper parse action for removing quotation marks from parsed\nquoted strings.\n\nExample::\n\n    # by default, quotation marks are included in parsed results\n    quoted_string.parse_string(\"'Now is the Winter of our Discontent'\") # -> [\"'Now is the Winter of our Discontent'\"]\n\n    # use remove_quotes to strip quotation marks from parsed results\n    quoted_string.set_parse_action(remove_quotes)\n    quoted_string.parse_string(\"'Now is the Winter of our Discontent'\") # -> [\"Now is the Winter of our Discontent\"]"
    },
    {
      "name": "with_attribute",
      "docstring": "Helper to create a validating parse action to be used with start\ntags created with :class:`make_xml_tags` or\n:class:`make_html_tags`. Use ``with_attribute`` to qualify\na starting tag with a required attribute value, to avoid false\nmatches on common tags such as ``<TD>`` or ``<DIV>``.\n\nCall ``with_attribute`` with a series of attribute names and\nvalues. Specify the list of filter attributes names and values as:\n\n- keyword arguments, as in ``(align=\"right\")``, or\n- as an explicit dict with ``**`` operator, when an attribute\n  name is also a Python reserved word, as in ``**{\"class\":\"Customer\", \"align\":\"right\"}``\n- a list of name-value tuples, as in ``((\"ns1:class\", \"Customer\"), (\"ns2:align\", \"right\"))``\n\nFor attribute names with a namespace prefix, you must use the second\nform.  Attribute names are matched insensitive to upper/lower case.\n\nIf just testing for ``class`` (with or without a namespace), use\n:class:`with_class`.\n\nTo verify that the attribute exists, but without specifying a value,\npass ``with_attribute.ANY_VALUE`` as the value.\n\nExample::\n\n    html = '''\n        <div>\n        Some text\n        <div type=\"grid\">1 4 0 1 0</div>\n        <div type=\"graph\">1,3 2,3 1,1</div>\n        <div>this has no type</div>\n        </div>\n    '''\n    div,div_end = make_html_tags(\"div\")\n\n    # only match div tag having a type attribute with value \"grid\"\n    div_grid = div().set_parse_action(with_attribute(type=\"grid\"))\n    grid_expr = div_grid + SkipTo(div | div_end)(\"body\")\n    for grid_header in grid_expr.search_string(html):\n        print(grid_header.body)\n\n    # construct a match with any div tag having a type attribute, regardless of the value\n    div_any_type = div().set_parse_action(with_attribute(type=with_attribute.ANY_VALUE))\n    div_expr = div_any_type + SkipTo(div | div_end)(\"body\")\n    for div_header in div_expr.search_string(html):\n        print(div_header.body)\n\nprints::\n\n    1 4 0 1 0\n\n    1 4 0 1 0\n    1,3 2,3 1,1"
    },
    {
      "name": "with_class",
      "docstring": "Simplified version of :class:`with_attribute` when\nmatching on a div class - made difficult because ``class`` is\na reserved word in Python.\n\nExample::\n\n    html = '''\n        <div>\n        Some text\n        <div class=\"grid\">1 4 0 1 0</div>\n        <div class=\"graph\">1,3 2,3 1,1</div>\n        <div>this &lt;div&gt; has no class</div>\n        </div>\n\n    '''\n    div,div_end = make_html_tags(\"div\")\n    div_grid = div().set_parse_action(with_class(\"grid\"))\n\n    grid_expr = div_grid + SkipTo(div | div_end)(\"body\")\n    for grid_header in grid_expr.search_string(html):\n        print(grid_header.body)\n\n    div_any_type = div().set_parse_action(with_class(withAttribute.ANY_VALUE))\n    div_expr = div_any_type + SkipTo(div | div_end)(\"body\")\n    for div_header in div_expr.search_string(html):\n        print(div_header.body)\n\nprints::\n\n    1 4 0 1 0\n\n    1 4 0 1 0\n    1,3 2,3 1,1"
    },
    {
      "name": "reset",
      "docstring": "Allow the associated parse action to be called once more."
    },
    {
      "name": "verify_col",
      "docstring": null
    },
    {
      "name": "pa",
      "docstring": null
    }
  ],
  "innovations": []
}