{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\_utils\\_inspect.py",
  "classes": [],
  "functions": [
    {
      "name": "ismethod",
      "docstring": "Return true if the object is an instance method.\n\nInstance method objects provide these attributes:\n    __doc__         documentation string\n    __name__        name with which this method was defined\n    im_class        class object in which this method belongs\n    im_func         function object containing implementation of method\n    im_self         instance to which this method is bound, or None"
    },
    {
      "name": "isfunction",
      "docstring": "Return true if the object is a user-defined function.\n\nFunction objects provide these attributes:\n    __doc__         documentation string\n    __name__        name with which this function was defined\n    func_code       code object containing compiled function bytecode\n    func_defaults   tuple of any default values for arguments\n    func_doc        (same as __doc__)\n    func_globals    global namespace in which this function was defined\n    func_name       (same as __name__)"
    },
    {
      "name": "iscode",
      "docstring": "Return true if the object is a code object.\n\nCode objects provide these attributes:\n    co_argcount     number of arguments (not including * or ** args)\n    co_code         string of raw compiled bytecode\n    co_consts       tuple of constants used in the bytecode\n    co_filename     name of file in which this code object was created\n    co_firstlineno  number of first line in Python source code\n    co_flags        bitmap: 1=optimized | 2=newlocals | 4=*arg | 8=**arg\n    co_lnotab       encoded mapping of line numbers to bytecode indices\n    co_name         name with which this code object was defined\n    co_names        tuple of names of local variables\n    co_nlocals      number of local variables\n    co_stacksize    virtual machine stack space required\n    co_varnames     tuple of names of arguments and local variables"
    },
    {
      "name": "getargs",
      "docstring": "Get information about the arguments accepted by a code object.\n\nThree things are returned: (args, varargs, varkw), where 'args' is\na list of argument names (possibly containing nested lists), and\n'varargs' and 'varkw' are the names of the * and ** arguments or None."
    },
    {
      "name": "getargspec",
      "docstring": "Get the names and default values of a function's arguments.\n\nA tuple of four things is returned: (args, varargs, varkw, defaults).\n'args' is a list of the argument names (it may contain nested lists).\n'varargs' and 'varkw' are the names of the * and ** arguments or None.\n'defaults' is an n-tuple of the default values of the last n arguments."
    },
    {
      "name": "getargvalues",
      "docstring": "Get information about arguments passed into a particular frame.\n\nA tuple of four things is returned: (args, varargs, varkw, locals).\n'args' is a list of the argument names (it may contain nested lists).\n'varargs' and 'varkw' are the names of the * and ** arguments or None.\n'locals' is the locals dictionary of the given frame."
    },
    {
      "name": "joinseq",
      "docstring": null
    },
    {
      "name": "strseq",
      "docstring": "Recursively walk a sequence, stringifying each element.\n\n    "
    },
    {
      "name": "formatargspec",
      "docstring": "Format an argument spec from the 4 values returned by getargspec.\n\nThe first four arguments are (args, varargs, varkw, defaults).  The\nother four arguments are the corresponding optional formatting functions\nthat are called to turn names and values into strings.  The ninth\nargument is an optional function to format the sequence of arguments."
    },
    {
      "name": "formatargvalues",
      "docstring": "Format an argument spec from the 4 values returned by getargvalues.\n\nThe first four arguments are (args, varargs, varkw, locals).  The\nnext four arguments are the corresponding optional formatting functions\nthat are called to turn names and values into strings.  The ninth\nargument is an optional function to format the sequence of arguments."
    },
    {
      "name": "convert",
      "docstring": null
    }
  ],
  "innovations": []
}