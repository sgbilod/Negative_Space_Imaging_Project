{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\numpy\\lib\\_ufunclike_impl.py",
  "classes": [],
  "functions": [
    {
      "name": "fix",
      "docstring": "Round to nearest integer towards zero.\n\nRound an array of floats element-wise to nearest integer towards zero.\nThe rounded values have the same data-type as the input.\n\nParameters\n----------\nx : array_like\n    An array to be rounded\nout : ndarray, optional\n    A location into which the result is stored. If provided, it must have\n    a shape that the input broadcasts to. If not provided or None, a\n    freshly-allocated array is returned.\n\nReturns\n-------\nout : ndarray of floats\n    An array with the same dimensions and data-type as the input.\n    If second argument is not supplied then a new array is returned\n    with the rounded values.\n\n    If a second argument is supplied the result is stored there.\n    The return value ``out`` is then a reference to that array.\n\nSee Also\n--------\nrint, trunc, floor, ceil\naround : Round to given number of decimals\n\nExamples\n--------\n>>> import numpy as np\n>>> np.fix(3.14)\n3.0\n>>> np.fix(3)\n3\n>>> np.fix([2.1, 2.9, -2.1, -2.9])\narray([ 2.,  2., -2., -2.])"
    },
    {
      "name": "isposinf",
      "docstring": "Test element-wise for positive infinity, return result as bool array.\n\nParameters\n----------\nx : array_like\n    The input array.\nout : array_like, optional\n    A location into which the result is stored. If provided, it must have a\n    shape that the input broadcasts to. If not provided or None, a\n    freshly-allocated boolean array is returned.\n\nReturns\n-------\nout : ndarray\n    A boolean array with the same dimensions as the input.\n    If second argument is not supplied then a boolean array is returned\n    with values True where the corresponding element of the input is\n    positive infinity and values False where the element of the input is\n    not positive infinity.\n\n    If a second argument is supplied the result is stored there. If the\n    type of that array is a numeric type the result is represented as zeros\n    and ones, if the type is boolean then as False and True.\n    The return value `out` is then a reference to that array.\n\nSee Also\n--------\nisinf, isneginf, isfinite, isnan\n\nNotes\n-----\nNumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n(IEEE 754).\n\nErrors result if the second argument is also supplied when x is a scalar\ninput, if first and second arguments have different shapes, or if the\nfirst argument has complex values\n\nExamples\n--------\n>>> import numpy as np\n>>> np.isposinf(np.inf)\nTrue\n>>> np.isposinf(-np.inf)\nFalse\n>>> np.isposinf([-np.inf, 0., np.inf])\narray([False, False,  True])\n\n>>> x = np.array([-np.inf, 0., np.inf])\n>>> y = np.array([2, 2, 2])\n>>> np.isposinf(x, y)\narray([0, 0, 1])\n>>> y\narray([0, 0, 1])"
    },
    {
      "name": "isneginf",
      "docstring": "Test element-wise for negative infinity, return result as bool array.\n\nParameters\n----------\nx : array_like\n    The input array.\nout : array_like, optional\n    A location into which the result is stored. If provided, it must have a\n    shape that the input broadcasts to. If not provided or None, a\n    freshly-allocated boolean array is returned.\n\nReturns\n-------\nout : ndarray\n    A boolean array with the same dimensions as the input.\n    If second argument is not supplied then a numpy boolean array is\n    returned with values True where the corresponding element of the\n    input is negative infinity and values False where the element of\n    the input is not negative infinity.\n\n    If a second argument is supplied the result is stored there. If the\n    type of that array is a numeric type the result is represented as\n    zeros and ones, if the type is boolean then as False and True. The\n    return value `out` is then a reference to that array.\n\nSee Also\n--------\nisinf, isposinf, isnan, isfinite\n\nNotes\n-----\nNumPy uses the IEEE Standard for Binary Floating-Point for Arithmetic\n(IEEE 754).\n\nErrors result if the second argument is also supplied when x is a scalar\ninput, if first and second arguments have different shapes, or if the\nfirst argument has complex values.\n\nExamples\n--------\n>>> import numpy as np\n>>> np.isneginf(-np.inf)\nTrue\n>>> np.isneginf(np.inf)\nFalse\n>>> np.isneginf([-np.inf, 0., np.inf])\narray([ True, False, False])\n\n>>> x = np.array([-np.inf, 0., np.inf])\n>>> y = np.array([2, 2, 2])\n>>> np.isneginf(x, y)\narray([1, 0, 0])\n>>> y\narray([1, 0, 0])"
    }
  ],
  "innovations": []
}