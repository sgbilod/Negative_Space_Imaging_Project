{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_vendor\\platformdirs\\unix.py",
  "classes": [
    {
      "name": "Unix",
      "docstring": "On Unix/Linux, we follow the `XDG Basedir Spec <https://specifications.freedesktop.org/basedir-spec/basedir-spec-\nlatest.html>`_.\n\nThe spec allows overriding directories with environment variables. The examples shown are the default values,\nalongside the name of the environment variable that overrides them. Makes use of the `appname\n<platformdirs.api.PlatformDirsABC.appname>`, `version <platformdirs.api.PlatformDirsABC.version>`, `multipath\n<platformdirs.api.PlatformDirsABC.multipath>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n<platformdirs.api.PlatformDirsABC.ensure_exists>`.",
      "methods": [
        {
          "name": "user_data_dir",
          "docstring": ":return: data directory tied to the user, e.g. ``~/.local/share/$appname/$version`` or\n ``$XDG_DATA_HOME/$appname/$version``"
        },
        {
          "name": "site_data_dir",
          "docstring": ":return: data directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>` is\n enabled and ``XDG_DATA_DIRS`` is set and a multi path the response is also a multi path separated by the\n OS path separator), e.g. ``/usr/local/share/$appname/$version`` or ``/usr/share/$appname/$version``"
        },
        {
          "name": "user_config_dir",
          "docstring": ":return: config directory tied to the user, e.g. ``~/.config/$appname/$version`` or\n ``$XDG_CONFIG_HOME/$appname/$version``"
        },
        {
          "name": "site_config_dir",
          "docstring": ":return: config directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>`\n is enabled and ``XDG_CONFIG_DIRS`` is set and a multi path the response is also a multi path separated by\n the OS path separator), e.g. ``/etc/xdg/$appname/$version``"
        },
        {
          "name": "user_cache_dir",
          "docstring": ":return: cache directory tied to the user, e.g. ``~/.cache/$appname/$version`` or\n ``~/$XDG_CACHE_HOME/$appname/$version``"
        },
        {
          "name": "site_cache_dir",
          "docstring": ":return: cache directory shared by users, e.g. ``/var/cache/$appname/$version``"
        },
        {
          "name": "user_state_dir",
          "docstring": ":return: state directory tied to the user, e.g. ``~/.local/state/$appname/$version`` or\n ``$XDG_STATE_HOME/$appname/$version``"
        },
        {
          "name": "user_log_dir",
          "docstring": ":return: log directory tied to the user, same as `user_state_dir` if not opinionated else ``log`` in it"
        },
        {
          "name": "user_documents_dir",
          "docstring": ":return: documents directory tied to the user, e.g. ``~/Documents``"
        },
        {
          "name": "user_downloads_dir",
          "docstring": ":return: downloads directory tied to the user, e.g. ``~/Downloads``"
        },
        {
          "name": "user_pictures_dir",
          "docstring": ":return: pictures directory tied to the user, e.g. ``~/Pictures``"
        },
        {
          "name": "user_videos_dir",
          "docstring": ":return: videos directory tied to the user, e.g. ``~/Videos``"
        },
        {
          "name": "user_music_dir",
          "docstring": ":return: music directory tied to the user, e.g. ``~/Music``"
        },
        {
          "name": "user_desktop_dir",
          "docstring": ":return: desktop directory tied to the user, e.g. ``~/Desktop``"
        },
        {
          "name": "user_runtime_dir",
          "docstring": ":return: runtime directory tied to the user, e.g. ``/run/user/$(id -u)/$appname/$version`` or\n ``$XDG_RUNTIME_DIR/$appname/$version``.\n\n For FreeBSD/OpenBSD/NetBSD, it would return ``/var/run/user/$(id -u)/$appname/$version`` if\n exists, otherwise ``/tmp/runtime-$(id -u)/$appname/$version``, if``$XDG_RUNTIME_DIR``\n is not set."
        },
        {
          "name": "site_runtime_dir",
          "docstring": ":return: runtime directory shared by users, e.g. ``/run/$appname/$version`` or         ``$XDG_RUNTIME_DIR/$appname/$version``.\n\nNote that this behaves almost exactly like `user_runtime_dir` if ``$XDG_RUNTIME_DIR`` is set, but will\nfall back to paths associated to the root user instead of a regular logged-in user if it's not set.\n\nIf you wish to ensure that a logged-in root user path is returned e.g. ``/run/user/0``, use `user_runtime_dir`\ninstead.\n\nFor FreeBSD/OpenBSD/NetBSD, it would return ``/var/run/$appname/$version`` if ``$XDG_RUNTIME_DIR`` is not set."
        },
        {
          "name": "site_data_path",
          "docstring": ":return: data path shared by users. Only return the first item, even if ``multipath`` is set to ``True``"
        },
        {
          "name": "site_config_path",
          "docstring": ":return: config path shared by the users, returns the first item, even if ``multipath`` is set to ``True``"
        },
        {
          "name": "site_cache_path",
          "docstring": ":return: cache path shared by users. Only return the first item, even if ``multipath`` is set to ``True``"
        },
        {
          "name": "iter_config_dirs",
          "docstring": ":yield: all user and site configuration directories."
        },
        {
          "name": "iter_data_dirs",
          "docstring": ":yield: all user and site data directories."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "getuid",
      "docstring": null
    },
    {
      "name": "user_data_dir",
      "docstring": ":return: data directory tied to the user, e.g. ``~/.local/share/$appname/$version`` or\n ``$XDG_DATA_HOME/$appname/$version``"
    },
    {
      "name": "site_data_dir",
      "docstring": ":return: data directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>` is\n enabled and ``XDG_DATA_DIRS`` is set and a multi path the response is also a multi path separated by the\n OS path separator), e.g. ``/usr/local/share/$appname/$version`` or ``/usr/share/$appname/$version``"
    },
    {
      "name": "user_config_dir",
      "docstring": ":return: config directory tied to the user, e.g. ``~/.config/$appname/$version`` or\n ``$XDG_CONFIG_HOME/$appname/$version``"
    },
    {
      "name": "site_config_dir",
      "docstring": ":return: config directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>`\n is enabled and ``XDG_CONFIG_DIRS`` is set and a multi path the response is also a multi path separated by\n the OS path separator), e.g. ``/etc/xdg/$appname/$version``"
    },
    {
      "name": "user_cache_dir",
      "docstring": ":return: cache directory tied to the user, e.g. ``~/.cache/$appname/$version`` or\n ``~/$XDG_CACHE_HOME/$appname/$version``"
    },
    {
      "name": "site_cache_dir",
      "docstring": ":return: cache directory shared by users, e.g. ``/var/cache/$appname/$version``"
    },
    {
      "name": "user_state_dir",
      "docstring": ":return: state directory tied to the user, e.g. ``~/.local/state/$appname/$version`` or\n ``$XDG_STATE_HOME/$appname/$version``"
    },
    {
      "name": "user_log_dir",
      "docstring": ":return: log directory tied to the user, same as `user_state_dir` if not opinionated else ``log`` in it"
    },
    {
      "name": "user_documents_dir",
      "docstring": ":return: documents directory tied to the user, e.g. ``~/Documents``"
    },
    {
      "name": "user_downloads_dir",
      "docstring": ":return: downloads directory tied to the user, e.g. ``~/Downloads``"
    },
    {
      "name": "user_pictures_dir",
      "docstring": ":return: pictures directory tied to the user, e.g. ``~/Pictures``"
    },
    {
      "name": "user_videos_dir",
      "docstring": ":return: videos directory tied to the user, e.g. ``~/Videos``"
    },
    {
      "name": "user_music_dir",
      "docstring": ":return: music directory tied to the user, e.g. ``~/Music``"
    },
    {
      "name": "user_desktop_dir",
      "docstring": ":return: desktop directory tied to the user, e.g. ``~/Desktop``"
    },
    {
      "name": "user_runtime_dir",
      "docstring": ":return: runtime directory tied to the user, e.g. ``/run/user/$(id -u)/$appname/$version`` or\n ``$XDG_RUNTIME_DIR/$appname/$version``.\n\n For FreeBSD/OpenBSD/NetBSD, it would return ``/var/run/user/$(id -u)/$appname/$version`` if\n exists, otherwise ``/tmp/runtime-$(id -u)/$appname/$version``, if``$XDG_RUNTIME_DIR``\n is not set."
    },
    {
      "name": "site_runtime_dir",
      "docstring": ":return: runtime directory shared by users, e.g. ``/run/$appname/$version`` or         ``$XDG_RUNTIME_DIR/$appname/$version``.\n\nNote that this behaves almost exactly like `user_runtime_dir` if ``$XDG_RUNTIME_DIR`` is set, but will\nfall back to paths associated to the root user instead of a regular logged-in user if it's not set.\n\nIf you wish to ensure that a logged-in root user path is returned e.g. ``/run/user/0``, use `user_runtime_dir`\ninstead.\n\nFor FreeBSD/OpenBSD/NetBSD, it would return ``/var/run/$appname/$version`` if ``$XDG_RUNTIME_DIR`` is not set."
    },
    {
      "name": "site_data_path",
      "docstring": ":return: data path shared by users. Only return the first item, even if ``multipath`` is set to ``True``"
    },
    {
      "name": "site_config_path",
      "docstring": ":return: config path shared by the users, returns the first item, even if ``multipath`` is set to ``True``"
    },
    {
      "name": "site_cache_path",
      "docstring": ":return: cache path shared by users. Only return the first item, even if ``multipath`` is set to ``True``"
    },
    {
      "name": "iter_config_dirs",
      "docstring": ":yield: all user and site configuration directories."
    },
    {
      "name": "iter_data_dirs",
      "docstring": ":yield: all user and site data directories."
    }
  ],
  "innovations": []
}