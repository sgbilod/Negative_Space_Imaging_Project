{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\PIL\\ImageCms.py",
  "classes": [
    {
      "name": "Intent",
      "docstring": null,
      "methods": []
    },
    {
      "name": "Direction",
      "docstring": null,
      "methods": []
    },
    {
      "name": "Flags",
      "docstring": "Flags and documentation are taken from ``lcms2.h``.",
      "methods": [
        {
          "name": "GRIDPOINTS",
          "docstring": "Fine-tune control over number of gridpoints\n\n:param n: :py:class:`int` in range ``0 <= n <= 255``"
        }
      ]
    },
    {
      "name": "ImageCmsProfile",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": ":param profile: Either a string representing a filename,\n    a file like object containing a profile or a\n    low-level profile object"
        },
        {
          "name": "tobytes",
          "docstring": "Returns the profile in a format suitable for embedding in\nsaved images.\n\n:returns: a bytes object containing the ICC profile."
        }
      ]
    },
    {
      "name": "ImageCmsTransform",
      "docstring": "Transform.  This can be used with the procedural API, or with the standard\n:py:func:`~PIL.Image.Image.point` method.\n\nWill return the output profile in the ``output.info['icc_profile']``.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "point",
          "docstring": null
        },
        {
          "name": "apply",
          "docstring": null
        },
        {
          "name": "apply_in_place",
          "docstring": null
        }
      ]
    },
    {
      "name": "PyCMSError",
      "docstring": "(pyCMS) Exception class.\nThis is used for all errors in the pyCMS API.",
      "methods": []
    }
  ],
  "functions": [
    {
      "name": "get_display_profile",
      "docstring": "(experimental) Fetches the profile for the current display device.\n\n:returns: ``None`` if the profile is not known."
    },
    {
      "name": "profileToProfile",
      "docstring": "(pyCMS) Applies an ICC transformation to a given image, mapping from\n``inputProfile`` to ``outputProfile``.\n\nIf the input or output profiles specified are not valid filenames, a\n:exc:`PyCMSError` will be raised.  If ``inPlace`` is ``True`` and\n``outputMode != im.mode``, a :exc:`PyCMSError` will be raised.\nIf an error occurs during application of the profiles,\na :exc:`PyCMSError` will be raised.\nIf ``outputMode`` is not a mode supported by the ``outputProfile`` (or by pyCMS),\na :exc:`PyCMSError` will be raised.\n\nThis function applies an ICC transformation to im from ``inputProfile``'s\ncolor space to ``outputProfile``'s color space using the specified rendering\nintent to decide how to handle out-of-gamut colors.\n\n``outputMode`` can be used to specify that a color mode conversion is to\nbe done using these profiles, but the specified profiles must be able\nto handle that mode.  I.e., if converting im from RGB to CMYK using\nprofiles, the input profile must handle RGB data, and the output\nprofile must handle CMYK data.\n\n:param im: An open :py:class:`~PIL.Image.Image` object (i.e. Image.new(...)\n    or Image.open(...), etc.)\n:param inputProfile: String, as a valid filename path to the ICC input\n    profile you wish to use for this image, or a profile object\n:param outputProfile: String, as a valid filename path to the ICC output\n    profile you wish to use for this image, or a profile object\n:param renderingIntent: Integer (0-3) specifying the rendering intent you\n    wish to use for the transform\n\n        ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)\n        ImageCms.Intent.RELATIVE_COLORIMETRIC = 1\n        ImageCms.Intent.SATURATION            = 2\n        ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3\n\n    see the pyCMS documentation for details on rendering intents and what\n    they do.\n:param outputMode: A valid PIL mode for the output image (i.e. \"RGB\",\n    \"CMYK\", etc.).  Note: if rendering the image \"inPlace\", outputMode\n    MUST be the same mode as the input, or omitted completely.  If\n    omitted, the outputMode will be the same as the mode of the input\n    image (im.mode)\n:param inPlace: Boolean.  If ``True``, the original image is modified in-place,\n    and ``None`` is returned.  If ``False`` (default), a new\n    :py:class:`~PIL.Image.Image` object is returned with the transform applied.\n:param flags: Integer (0-...) specifying additional flags\n:returns: Either None or a new :py:class:`~PIL.Image.Image` object, depending on\n    the value of ``inPlace``\n:exception PyCMSError:"
    },
    {
      "name": "getOpenProfile",
      "docstring": "(pyCMS) Opens an ICC profile file.\n\nThe PyCMSProfile object can be passed back into pyCMS for use in creating\ntransforms and such (as in ImageCms.buildTransformFromOpenProfiles()).\n\nIf ``profileFilename`` is not a valid filename for an ICC profile,\na :exc:`PyCMSError` will be raised.\n\n:param profileFilename: String, as a valid filename path to the ICC profile\n    you wish to open, or a file-like object.\n:returns: A CmsProfile class object.\n:exception PyCMSError:"
    },
    {
      "name": "buildTransform",
      "docstring": "(pyCMS) Builds an ICC transform mapping from the ``inputProfile`` to the\n``outputProfile``. Use applyTransform to apply the transform to a given\nimage.\n\nIf the input or output profiles specified are not valid filenames, a\n:exc:`PyCMSError` will be raised. If an error occurs during creation\nof the transform, a :exc:`PyCMSError` will be raised.\n\nIf ``inMode`` or ``outMode`` are not a mode supported by the ``outputProfile``\n(or by pyCMS), a :exc:`PyCMSError` will be raised.\n\nThis function builds and returns an ICC transform from the ``inputProfile``\nto the ``outputProfile`` using the ``renderingIntent`` to determine what to do\nwith out-of-gamut colors.  It will ONLY work for converting images that\nare in ``inMode`` to images that are in ``outMode`` color format (PIL mode,\ni.e. \"RGB\", \"RGBA\", \"CMYK\", etc.).\n\nBuilding the transform is a fair part of the overhead in\nImageCms.profileToProfile(), so if you're planning on converting multiple\nimages using the same input/output settings, this can save you time.\nOnce you have a transform object, it can be used with\nImageCms.applyProfile() to convert images without the need to re-compute\nthe lookup table for the transform.\n\nThe reason pyCMS returns a class object rather than a handle directly\nto the transform is that it needs to keep track of the PIL input/output\nmodes that the transform is meant for.  These attributes are stored in\nthe ``inMode`` and ``outMode`` attributes of the object (which can be\nmanually overridden if you really want to, but I don't know of any\ntime that would be of use, or would even work).\n\n:param inputProfile: String, as a valid filename path to the ICC input\n    profile you wish to use for this transform, or a profile object\n:param outputProfile: String, as a valid filename path to the ICC output\n    profile you wish to use for this transform, or a profile object\n:param inMode: String, as a valid PIL mode that the appropriate profile\n    also supports (i.e. \"RGB\", \"RGBA\", \"CMYK\", etc.)\n:param outMode: String, as a valid PIL mode that the appropriate profile\n    also supports (i.e. \"RGB\", \"RGBA\", \"CMYK\", etc.)\n:param renderingIntent: Integer (0-3) specifying the rendering intent you\n    wish to use for the transform\n\n        ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)\n        ImageCms.Intent.RELATIVE_COLORIMETRIC = 1\n        ImageCms.Intent.SATURATION            = 2\n        ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3\n\n    see the pyCMS documentation for details on rendering intents and what\n    they do.\n:param flags: Integer (0-...) specifying additional flags\n:returns: A CmsTransform class object.\n:exception PyCMSError:"
    },
    {
      "name": "buildProofTransform",
      "docstring": "(pyCMS) Builds an ICC transform mapping from the ``inputProfile`` to the\n``outputProfile``, but tries to simulate the result that would be\nobtained on the ``proofProfile`` device.\n\nIf the input, output, or proof profiles specified are not valid\nfilenames, a :exc:`PyCMSError` will be raised.\n\nIf an error occurs during creation of the transform,\na :exc:`PyCMSError` will be raised.\n\nIf ``inMode`` or ``outMode`` are not a mode supported by the ``outputProfile``\n(or by pyCMS), a :exc:`PyCMSError` will be raised.\n\nThis function builds and returns an ICC transform from the ``inputProfile``\nto the ``outputProfile``, but tries to simulate the result that would be\nobtained on the ``proofProfile`` device using ``renderingIntent`` and\n``proofRenderingIntent`` to determine what to do with out-of-gamut\ncolors.  This is known as \"soft-proofing\".  It will ONLY work for\nconverting images that are in ``inMode`` to images that are in outMode\ncolor format (PIL mode, i.e. \"RGB\", \"RGBA\", \"CMYK\", etc.).\n\nUsage of the resulting transform object is exactly the same as with\nImageCms.buildTransform().\n\nProof profiling is generally used when using an output device to get a\ngood idea of what the final printed/displayed image would look like on\nthe ``proofProfile`` device when it's quicker and easier to use the\noutput device for judging color.  Generally, this means that the\noutput device is a monitor, or a dye-sub printer (etc.), and the simulated\ndevice is something more expensive, complicated, or time consuming\n(making it difficult to make a real print for color judgement purposes).\n\nSoft-proofing basically functions by adjusting the colors on the\noutput device to match the colors of the device being simulated. However,\nwhen the simulated device has a much wider gamut than the output\ndevice, you may obtain marginal results.\n\n:param inputProfile: String, as a valid filename path to the ICC input\n    profile you wish to use for this transform, or a profile object\n:param outputProfile: String, as a valid filename path to the ICC output\n    (monitor, usually) profile you wish to use for this transform, or a\n    profile object\n:param proofProfile: String, as a valid filename path to the ICC proof\n    profile you wish to use for this transform, or a profile object\n:param inMode: String, as a valid PIL mode that the appropriate profile\n    also supports (i.e. \"RGB\", \"RGBA\", \"CMYK\", etc.)\n:param outMode: String, as a valid PIL mode that the appropriate profile\n    also supports (i.e. \"RGB\", \"RGBA\", \"CMYK\", etc.)\n:param renderingIntent: Integer (0-3) specifying the rendering intent you\n    wish to use for the input->proof (simulated) transform\n\n        ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)\n        ImageCms.Intent.RELATIVE_COLORIMETRIC = 1\n        ImageCms.Intent.SATURATION            = 2\n        ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3\n\n    see the pyCMS documentation for details on rendering intents and what\n    they do.\n:param proofRenderingIntent: Integer (0-3) specifying the rendering intent\n    you wish to use for proof->output transform\n\n        ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)\n        ImageCms.Intent.RELATIVE_COLORIMETRIC = 1\n        ImageCms.Intent.SATURATION            = 2\n        ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3\n\n    see the pyCMS documentation for details on rendering intents and what\n    they do.\n:param flags: Integer (0-...) specifying additional flags\n:returns: A CmsTransform class object.\n:exception PyCMSError:"
    },
    {
      "name": "applyTransform",
      "docstring": "(pyCMS) Applies a transform to a given image.\n\nIf ``im.mode != transform.input_mode``, a :exc:`PyCMSError` is raised.\n\nIf ``inPlace`` is ``True`` and ``transform.input_mode != transform.output_mode``, a\n:exc:`PyCMSError` is raised.\n\nIf ``im.mode``, ``transform.input_mode`` or ``transform.output_mode`` is not\nsupported by pyCMSdll or the profiles you used for the transform, a\n:exc:`PyCMSError` is raised.\n\nIf an error occurs while the transform is being applied,\na :exc:`PyCMSError` is raised.\n\nThis function applies a pre-calculated transform (from\nImageCms.buildTransform() or ImageCms.buildTransformFromOpenProfiles())\nto an image. The transform can be used for multiple images, saving\nconsiderable calculation time if doing the same conversion multiple times.\n\nIf you want to modify im in-place instead of receiving a new image as\nthe return value, set ``inPlace`` to ``True``.  This can only be done if\n``transform.input_mode`` and ``transform.output_mode`` are the same, because we\ncan't change the mode in-place (the buffer sizes for some modes are\ndifferent).  The default behavior is to return a new :py:class:`~PIL.Image.Image`\nobject of the same dimensions in mode ``transform.output_mode``.\n\n:param im: An :py:class:`~PIL.Image.Image` object, and ``im.mode`` must be the same\n    as the ``input_mode`` supported by the transform.\n:param transform: A valid CmsTransform class object\n:param inPlace: Bool.  If ``True``, ``im`` is modified in place and ``None`` is\n    returned, if ``False``, a new :py:class:`~PIL.Image.Image` object with the\n    transform applied is returned (and ``im`` is not changed). The default is\n    ``False``.\n:returns: Either ``None``, or a new :py:class:`~PIL.Image.Image` object,\n    depending on the value of ``inPlace``. The profile will be returned in\n    the image's ``info['icc_profile']``.\n:exception PyCMSError:"
    },
    {
      "name": "createProfile",
      "docstring": "(pyCMS) Creates a profile.\n\nIf colorSpace not in ``[\"LAB\", \"XYZ\", \"sRGB\"]``,\na :exc:`PyCMSError` is raised.\n\nIf using LAB and ``colorTemp`` is not a positive integer,\na :exc:`PyCMSError` is raised.\n\nIf an error occurs while creating the profile,\na :exc:`PyCMSError` is raised.\n\nUse this function to create common profiles on-the-fly instead of\nhaving to supply a profile on disk and knowing the path to it.  It\nreturns a normal CmsProfile object that can be passed to\nImageCms.buildTransformFromOpenProfiles() to create a transform to apply\nto images.\n\n:param colorSpace: String, the color space of the profile you wish to\n    create.\n    Currently only \"LAB\", \"XYZ\", and \"sRGB\" are supported.\n:param colorTemp: Positive number for the white point for the profile, in\n    degrees Kelvin (i.e. 5000, 6500, 9600, etc.).  The default is for D50\n    illuminant if omitted (5000k).  colorTemp is ONLY applied to LAB\n    profiles, and is ignored for XYZ and sRGB.\n:returns: A CmsProfile class object\n:exception PyCMSError:"
    },
    {
      "name": "getProfileName",
      "docstring": "(pyCMS) Gets the internal product name for the given profile.\n\nIf ``profile`` isn't a valid CmsProfile object or filename to a profile,\na :exc:`PyCMSError` is raised If an error occurs while trying\nto obtain the name tag, a :exc:`PyCMSError` is raised.\n\nUse this function to obtain the INTERNAL name of the profile (stored\nin an ICC tag in the profile itself), usually the one used when the\nprofile was originally created.  Sometimes this tag also contains\nadditional information supplied by the creator.\n\n:param profile: EITHER a valid CmsProfile object, OR a string of the\n    filename of an ICC profile.\n:returns: A string containing the internal name of the profile as stored\n    in an ICC tag.\n:exception PyCMSError:"
    },
    {
      "name": "getProfileInfo",
      "docstring": "(pyCMS) Gets the internal product information for the given profile.\n\nIf ``profile`` isn't a valid CmsProfile object or filename to a profile,\na :exc:`PyCMSError` is raised.\n\nIf an error occurs while trying to obtain the info tag,\na :exc:`PyCMSError` is raised.\n\nUse this function to obtain the information stored in the profile's\ninfo tag.  This often contains details about the profile, and how it\nwas created, as supplied by the creator.\n\n:param profile: EITHER a valid CmsProfile object, OR a string of the\n    filename of an ICC profile.\n:returns: A string containing the internal profile information stored in\n    an ICC tag.\n:exception PyCMSError:"
    },
    {
      "name": "getProfileCopyright",
      "docstring": "(pyCMS) Gets the copyright for the given profile.\n\nIf ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n:exc:`PyCMSError` is raised.\n\nIf an error occurs while trying to obtain the copyright tag,\na :exc:`PyCMSError` is raised.\n\nUse this function to obtain the information stored in the profile's\ncopyright tag.\n\n:param profile: EITHER a valid CmsProfile object, OR a string of the\n    filename of an ICC profile.\n:returns: A string containing the internal profile information stored in\n    an ICC tag.\n:exception PyCMSError:"
    },
    {
      "name": "getProfileManufacturer",
      "docstring": "(pyCMS) Gets the manufacturer for the given profile.\n\nIf ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n:exc:`PyCMSError` is raised.\n\nIf an error occurs while trying to obtain the manufacturer tag, a\n:exc:`PyCMSError` is raised.\n\nUse this function to obtain the information stored in the profile's\nmanufacturer tag.\n\n:param profile: EITHER a valid CmsProfile object, OR a string of the\n    filename of an ICC profile.\n:returns: A string containing the internal profile information stored in\n    an ICC tag.\n:exception PyCMSError:"
    },
    {
      "name": "getProfileModel",
      "docstring": "(pyCMS) Gets the model for the given profile.\n\nIf ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n:exc:`PyCMSError` is raised.\n\nIf an error occurs while trying to obtain the model tag,\na :exc:`PyCMSError` is raised.\n\nUse this function to obtain the information stored in the profile's\nmodel tag.\n\n:param profile: EITHER a valid CmsProfile object, OR a string of the\n    filename of an ICC profile.\n:returns: A string containing the internal profile information stored in\n    an ICC tag.\n:exception PyCMSError:"
    },
    {
      "name": "getProfileDescription",
      "docstring": "(pyCMS) Gets the description for the given profile.\n\nIf ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n:exc:`PyCMSError` is raised.\n\nIf an error occurs while trying to obtain the description tag,\na :exc:`PyCMSError` is raised.\n\nUse this function to obtain the information stored in the profile's\ndescription tag.\n\n:param profile: EITHER a valid CmsProfile object, OR a string of the\n    filename of an ICC profile.\n:returns: A string containing the internal profile information stored in an\n    ICC tag.\n:exception PyCMSError:"
    },
    {
      "name": "getDefaultIntent",
      "docstring": "(pyCMS) Gets the default intent name for the given profile.\n\nIf ``profile`` isn't a valid CmsProfile object or filename to a profile, a\n:exc:`PyCMSError` is raised.\n\nIf an error occurs while trying to obtain the default intent, a\n:exc:`PyCMSError` is raised.\n\nUse this function to determine the default (and usually best optimized)\nrendering intent for this profile.  Most profiles support multiple\nrendering intents, but are intended mostly for one type of conversion.\nIf you wish to use a different intent than returned, use\nImageCms.isIntentSupported() to verify it will work first.\n\n:param profile: EITHER a valid CmsProfile object, OR a string of the\n    filename of an ICC profile.\n:returns: Integer 0-3 specifying the default rendering intent for this\n    profile.\n\n        ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)\n        ImageCms.Intent.RELATIVE_COLORIMETRIC = 1\n        ImageCms.Intent.SATURATION            = 2\n        ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3\n\n    see the pyCMS documentation for details on rendering intents and what\n        they do.\n:exception PyCMSError:"
    },
    {
      "name": "isIntentSupported",
      "docstring": "(pyCMS) Checks if a given intent is supported.\n\nUse this function to verify that you can use your desired\n``intent`` with ``profile``, and that ``profile`` can be used for the\ninput/output/proof profile as you desire.\n\nSome profiles are created specifically for one \"direction\", can cannot\nbe used for others. Some profiles can only be used for certain\nrendering intents, so it's best to either verify this before trying\nto create a transform with them (using this function), or catch the\npotential :exc:`PyCMSError` that will occur if they don't\nsupport the modes you select.\n\n:param profile: EITHER a valid CmsProfile object, OR a string of the\n    filename of an ICC profile.\n:param intent: Integer (0-3) specifying the rendering intent you wish to\n    use with this profile\n\n        ImageCms.Intent.PERCEPTUAL            = 0 (DEFAULT)\n        ImageCms.Intent.RELATIVE_COLORIMETRIC = 1\n        ImageCms.Intent.SATURATION            = 2\n        ImageCms.Intent.ABSOLUTE_COLORIMETRIC = 3\n\n    see the pyCMS documentation for details on rendering intents and what\n        they do.\n:param direction: Integer specifying if the profile is to be used for\n    input, output, or proof\n\n        INPUT  = 0 (or use ImageCms.Direction.INPUT)\n        OUTPUT = 1 (or use ImageCms.Direction.OUTPUT)\n        PROOF  = 2 (or use ImageCms.Direction.PROOF)\n\n:returns: 1 if the intent/direction are supported, -1 if they are not.\n:exception PyCMSError:"
    },
    {
      "name": "versions",
      "docstring": "(pyCMS) Fetches versions."
    },
    {
      "name": "GRIDPOINTS",
      "docstring": "Fine-tune control over number of gridpoints\n\n:param n: :py:class:`int` in range ``0 <= n <= 255``"
    },
    {
      "name": "tobytes",
      "docstring": "Returns the profile in a format suitable for embedding in\nsaved images.\n\n:returns: a bytes object containing the ICC profile."
    },
    {
      "name": "point",
      "docstring": null
    },
    {
      "name": "apply",
      "docstring": null
    },
    {
      "name": "apply_in_place",
      "docstring": null
    }
  ],
  "innovations": [
    {
      "type": "potential_innovation",
      "marker": "optimization",
      "context": "    NOCACHE = 0x0040\n    \"\"\"Inhibit 1-pixel cache\"\"\"\n    NOOPTIMIZE = 0x0100\n    \"\"\"Inhibit optimizations\"\"\"\n    NULLTRANSFORM = 0x0200\n    \"\"\"Don't transform anyway\"\"\"\n    GAMUTCHECK = 0x1000"
    }
  ]
}