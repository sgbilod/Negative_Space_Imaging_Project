{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\matplotlib\\projections\\polar.py",
  "classes": [
    {
      "name": "PolarTransform",
      "docstring": "The base polar transform.\n\nThis transform maps polar coordinates :math:`\\theta, r` into Cartesian\ncoordinates :math:`x, y = r \\cos(\\theta), r \\sin(\\theta)`\n(but does not fully transform into Axes coordinates or\nhandle positioning in screen space).\n\nThis transformation is designed to be applied to data after any scaling\nalong the radial axis (e.g. log-scaling) has been applied to the input\ndata.\n\nPath segments at a fixed radius are automatically transformed to circular\narcs as long as ``path._interpolation_steps > 1``.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Parameters\n----------\naxis : `~matplotlib.axis.Axis`, optional\n    Axis associated with this transform. This is used to get the\n    minimum radial limit.\nuse_rmin : `bool`, optional\n    If ``True``, subtract the minimum radial axis limit before\n    transforming to Cartesian coordinates. *axis* must also be\n    specified for this to take effect."
        },
        {
          "name": "transform_non_affine",
          "docstring": null
        },
        {
          "name": "transform_path_non_affine",
          "docstring": null
        },
        {
          "name": "inverted",
          "docstring": null
        }
      ]
    },
    {
      "name": "PolarAffine",
      "docstring": "The affine part of the polar projection.\n\nScales the output so that maximum radius rests on the edge of the Axes\ncircle and the origin is mapped to (0.5, 0.5). The transform applied is\nthe same to x and y components and given by:\n\n.. math::\n\n    x_{1} = 0.5 \\left [ \\frac{x_{0}}{(r_{\\max} - r_{\\min})} + 1 \\right ]\n\n:math:`r_{\\min}, r_{\\max}` are the minimum and maximum radial limits after\nany scaling (e.g. log scaling) has been removed.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Parameters\n----------\nscale_transform : `~matplotlib.transforms.Transform`\n    Scaling transform for the data. This is used to remove any scaling\n    from the radial view limits.\nlimits : `~matplotlib.transforms.BboxBase`\n    View limits of the data. The only part of its bounds that is used\n    is the y limits (for the radius limits)."
        },
        {
          "name": "get_matrix",
          "docstring": null
        }
      ]
    },
    {
      "name": "InvertedPolarTransform",
      "docstring": "The inverse of the polar transform, mapping Cartesian\ncoordinate space *x* and *y* back to *theta* and *r*.",
      "methods": [
        {
          "name": "__init__",
          "docstring": "Parameters\n----------\naxis : `~matplotlib.axis.Axis`, optional\n    Axis associated with this transform. This is used to get the\n    minimum radial limit.\nuse_rmin : `bool`, optional\n    If ``True``, add the minimum radial axis limit after\n    transforming from Cartesian coordinates. *axis* must also be\n    specified for this to take effect."
        },
        {
          "name": "transform_non_affine",
          "docstring": null
        },
        {
          "name": "inverted",
          "docstring": null
        }
      ]
    },
    {
      "name": "ThetaFormatter",
      "docstring": "Used to format the *theta* tick labels.  Converts the native\nunit of radians into degrees and adds a degree symbol.",
      "methods": []
    },
    {
      "name": "_AxisWrapper",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_view_interval",
          "docstring": null
        },
        {
          "name": "set_view_interval",
          "docstring": null
        },
        {
          "name": "get_minpos",
          "docstring": null
        },
        {
          "name": "get_data_interval",
          "docstring": null
        },
        {
          "name": "set_data_interval",
          "docstring": null
        },
        {
          "name": "get_tick_space",
          "docstring": null
        }
      ]
    },
    {
      "name": "ThetaLocator",
      "docstring": "Used to locate theta ticks.\n\nThis will work the same as the base locator except in the case that the\nview spans the entire circle. In such cases, the previously used default\nlocations of every 45 degrees are returned.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "set_axis",
          "docstring": null
        },
        {
          "name": "view_limits",
          "docstring": null
        }
      ]
    },
    {
      "name": "ThetaTick",
      "docstring": "A theta-axis tick.\n\nThis subclass of `.XTick` provides angular ticks with some small\nmodification to their re-positioning such that ticks are rotated based on\ntick location. This results in ticks that are correctly perpendicular to\nthe arc spine.\n\nWhen 'auto' rotation is enabled, labels are also rotated to be parallel to\nthe spine. The label padding is also applied here since it's not possible\nto use a generic axes transform to produce tick-specific padding.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "update_position",
          "docstring": null
        }
      ]
    },
    {
      "name": "ThetaAxis",
      "docstring": "A theta Axis.\n\nThis overrides certain properties of an `.XAxis` to provide special-casing\nfor an angular axis.",
      "methods": [
        {
          "name": "clear",
          "docstring": null
        }
      ]
    },
    {
      "name": "RadialLocator",
      "docstring": "Used to locate radius ticks.\n\nEnsures that all ticks are strictly positive.  For all other tasks, it\ndelegates to the base `.Locator` (which may be different depending on the\nscale of the *r*-axis).",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "set_axis",
          "docstring": null
        },
        {
          "name": "nonsingular",
          "docstring": null
        },
        {
          "name": "view_limits",
          "docstring": null
        }
      ]
    },
    {
      "name": "_ThetaShift",
      "docstring": "Apply a padding shift based on axes theta limits.\n\nThis is used to create padding for radial ticks.\n\nParameters\n----------\naxes : `~matplotlib.axes.Axes`\n    The owning Axes; used to determine limits.\npad : float\n    The padding to apply, in points.\nmode : {'min', 'max', 'rlabel'}\n    Whether to shift away from the start (``'min'``) or the end (``'max'``)\n    of the axes, or using the rlabel position (``'rlabel'``).",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_matrix",
          "docstring": null
        }
      ]
    },
    {
      "name": "RadialTick",
      "docstring": "A radial-axis tick.\n\nThis subclass of `.YTick` provides radial ticks with some small\nmodification to their re-positioning such that ticks are rotated based on\naxes limits.  This results in ticks that are correctly perpendicular to\nthe spine. Labels are also rotated to be perpendicular to the spine, when\n'auto' rotation is enabled.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "update_position",
          "docstring": null
        }
      ]
    },
    {
      "name": "RadialAxis",
      "docstring": "A radial Axis.\n\nThis overrides certain properties of a `.YAxis` to provide special-casing\nfor a radial axis.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "clear",
          "docstring": null
        }
      ]
    },
    {
      "name": "_WedgeBbox",
      "docstring": "Transform (theta, r) wedge Bbox into Axes bounding box.\n\nParameters\n----------\ncenter : (float, float)\n    Center of the wedge\nviewLim : `~matplotlib.transforms.Bbox`\n    Bbox determining the boundaries of the wedge\noriginLim : `~matplotlib.transforms.Bbox`\n    Bbox determining the origin for the wedge, if different from *viewLim*",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "get_points",
          "docstring": null
        }
      ]
    },
    {
      "name": "PolarAxes",
      "docstring": "A polar graph projection, where the input dimensions are *theta*, *r*.\n\nTheta starts pointing east and goes anti-clockwise.",
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "clear",
          "docstring": null
        },
        {
          "name": "get_xaxis_transform",
          "docstring": null
        },
        {
          "name": "get_xaxis_text1_transform",
          "docstring": null
        },
        {
          "name": "get_xaxis_text2_transform",
          "docstring": null
        },
        {
          "name": "get_yaxis_transform",
          "docstring": null
        },
        {
          "name": "get_yaxis_text1_transform",
          "docstring": null
        },
        {
          "name": "get_yaxis_text2_transform",
          "docstring": null
        },
        {
          "name": "draw",
          "docstring": null
        },
        {
          "name": "set_thetamax",
          "docstring": "Set the maximum theta limit in degrees."
        },
        {
          "name": "get_thetamax",
          "docstring": "Return the maximum theta limit in degrees."
        },
        {
          "name": "set_thetamin",
          "docstring": "Set the minimum theta limit in degrees."
        },
        {
          "name": "get_thetamin",
          "docstring": "Get the minimum theta limit in degrees."
        },
        {
          "name": "set_thetalim",
          "docstring": "Set the minimum and maximum theta values.\n\nCan take the following signatures:\n\n- ``set_thetalim(minval, maxval)``: Set the limits in radians.\n- ``set_thetalim(thetamin=minval, thetamax=maxval)``: Set the limits\n  in degrees.\n\nwhere minval and maxval are the minimum and maximum limits. Values are\nwrapped in to the range :math:`[0, 2\\pi]` (in radians), so for example\nit is possible to do ``set_thetalim(-np.pi / 2, np.pi / 2)`` to have\nan axis symmetric around 0. A ValueError is raised if the absolute\nangle difference is larger than a full circle."
        },
        {
          "name": "set_theta_offset",
          "docstring": "Set the offset for the location of 0 in radians."
        },
        {
          "name": "get_theta_offset",
          "docstring": "Get the offset for the location of 0 in radians."
        },
        {
          "name": "set_theta_zero_location",
          "docstring": "Set the location of theta's zero.\n\nThis simply calls `set_theta_offset` with the correct value in radians.\n\nParameters\n----------\nloc : str\n    May be one of \"N\", \"NW\", \"W\", \"SW\", \"S\", \"SE\", \"E\", or \"NE\".\noffset : float, default: 0\n    An offset in degrees to apply from the specified *loc*. **Note:**\n    this offset is *always* applied counter-clockwise regardless of\n    the direction setting."
        },
        {
          "name": "set_theta_direction",
          "docstring": "Set the direction in which theta increases.\n\nclockwise, -1:\n   Theta increases in the clockwise direction\n\ncounterclockwise, anticlockwise, 1:\n   Theta increases in the counterclockwise direction"
        },
        {
          "name": "get_theta_direction",
          "docstring": "Get the direction in which theta increases.\n\n-1:\n   Theta increases in the clockwise direction\n\n1:\n   Theta increases in the counterclockwise direction"
        },
        {
          "name": "set_rmax",
          "docstring": "Set the outer radial limit.\n\nParameters\n----------\nrmax : float"
        },
        {
          "name": "get_rmax",
          "docstring": "Returns\n-------\nfloat\n    Outer radial limit."
        },
        {
          "name": "set_rmin",
          "docstring": "Set the inner radial limit.\n\nParameters\n----------\nrmin : float"
        },
        {
          "name": "get_rmin",
          "docstring": "Returns\n-------\nfloat\n    The inner radial limit."
        },
        {
          "name": "set_rorigin",
          "docstring": "Update the radial origin.\n\nParameters\n----------\nrorigin : float"
        },
        {
          "name": "get_rorigin",
          "docstring": "Returns\n-------\nfloat"
        },
        {
          "name": "get_rsign",
          "docstring": null
        },
        {
          "name": "set_rlim",
          "docstring": "Set the radial axis view limits.\n\nThis function behaves like `.Axes.set_ylim`, but additionally supports\n*rmin* and *rmax* as aliases for *bottom* and *top*.\n\nSee Also\n--------\n.Axes.set_ylim"
        },
        {
          "name": "get_rlabel_position",
          "docstring": "Returns\n-------\nfloat\n    The theta position of the radius labels in degrees."
        },
        {
          "name": "set_rlabel_position",
          "docstring": "Update the theta position of the radius labels.\n\nParameters\n----------\nvalue : number\n    The angular position of the radius labels in degrees."
        },
        {
          "name": "set_yscale",
          "docstring": null
        },
        {
          "name": "set_rscale",
          "docstring": null
        },
        {
          "name": "set_rticks",
          "docstring": null
        },
        {
          "name": "set_thetagrids",
          "docstring": "Set the theta gridlines in a polar plot.\n\nParameters\n----------\nangles : tuple with floats, degrees\n    The angles of the theta gridlines.\n\nlabels : tuple with strings or None\n    The labels to use at each theta gridline. The\n    `.projections.polar.ThetaFormatter` will be used if None.\n\nfmt : str or None\n    Format string used in `matplotlib.ticker.FormatStrFormatter`.\n    For example '%f'. Note that the angle that is used is in\n    radians.\n\nReturns\n-------\nlines : list of `.lines.Line2D`\n    The theta gridlines.\n\nlabels : list of `.text.Text`\n    The tick labels.\n\nOther Parameters\n----------------\n**kwargs\n    *kwargs* are optional `.Text` properties for the labels.\n\n    .. warning::\n\n        This only sets the properties of the current ticks.\n        Ticks are not guaranteed to be persistent. Various operations\n        can create, delete and modify the Tick instances. There is an\n        imminent risk that these settings can get lost if you work on\n        the figure further (including also panning/zooming on a\n        displayed figure).\n\n        Use `.set_tick_params` instead if possible.\n\nSee Also\n--------\n.PolarAxes.set_rgrids\n.Axis.get_gridlines\n.Axis.get_ticklabels"
        },
        {
          "name": "set_rgrids",
          "docstring": "Set the radial gridlines on a polar plot.\n\nParameters\n----------\nradii : tuple with floats\n    The radii for the radial gridlines\n\nlabels : tuple with strings or None\n    The labels to use at each radial gridline. The\n    `matplotlib.ticker.ScalarFormatter` will be used if None.\n\nangle : float\n    The angular position of the radius labels in degrees.\n\nfmt : str or None\n    Format string used in `matplotlib.ticker.FormatStrFormatter`.\n    For example '%f'.\n\nReturns\n-------\nlines : list of `.lines.Line2D`\n    The radial gridlines.\n\nlabels : list of `.text.Text`\n    The tick labels.\n\nOther Parameters\n----------------\n**kwargs\n    *kwargs* are optional `.Text` properties for the labels.\n\n    .. warning::\n\n        This only sets the properties of the current ticks.\n        Ticks are not guaranteed to be persistent. Various operations\n        can create, delete and modify the Tick instances. There is an\n        imminent risk that these settings can get lost if you work on\n        the figure further (including also panning/zooming on a\n        displayed figure).\n\n        Use `.set_tick_params` instead if possible.\n\nSee Also\n--------\n.PolarAxes.set_thetagrids\n.Axis.get_gridlines\n.Axis.get_ticklabels"
        },
        {
          "name": "format_coord",
          "docstring": null
        },
        {
          "name": "get_data_ratio",
          "docstring": "Return the aspect ratio of the data itself.  For a polar plot,\nthis should always be 1.0"
        },
        {
          "name": "can_zoom",
          "docstring": "Return whether this Axes supports the zoom box button functionality.\n\nA polar Axes does not support zoom boxes."
        },
        {
          "name": "can_pan",
          "docstring": "Return whether this Axes supports the pan/zoom button functionality.\n\nFor a polar Axes, this is slightly misleading. Both panning and\nzooming are performed by the same button. Panning is performed\nin azimuth while zooming is done along the radial."
        },
        {
          "name": "start_pan",
          "docstring": null
        },
        {
          "name": "end_pan",
          "docstring": null
        },
        {
          "name": "drag_pan",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "transform_non_affine",
      "docstring": null
    },
    {
      "name": "transform_path_non_affine",
      "docstring": null
    },
    {
      "name": "inverted",
      "docstring": null
    },
    {
      "name": "get_matrix",
      "docstring": null
    },
    {
      "name": "transform_non_affine",
      "docstring": null
    },
    {
      "name": "inverted",
      "docstring": null
    },
    {
      "name": "get_view_interval",
      "docstring": null
    },
    {
      "name": "set_view_interval",
      "docstring": null
    },
    {
      "name": "get_minpos",
      "docstring": null
    },
    {
      "name": "get_data_interval",
      "docstring": null
    },
    {
      "name": "set_data_interval",
      "docstring": null
    },
    {
      "name": "get_tick_space",
      "docstring": null
    },
    {
      "name": "set_axis",
      "docstring": null
    },
    {
      "name": "view_limits",
      "docstring": null
    },
    {
      "name": "update_position",
      "docstring": null
    },
    {
      "name": "clear",
      "docstring": null
    },
    {
      "name": "set_axis",
      "docstring": null
    },
    {
      "name": "nonsingular",
      "docstring": null
    },
    {
      "name": "view_limits",
      "docstring": null
    },
    {
      "name": "get_matrix",
      "docstring": null
    },
    {
      "name": "update_position",
      "docstring": null
    },
    {
      "name": "clear",
      "docstring": null
    },
    {
      "name": "get_points",
      "docstring": null
    },
    {
      "name": "clear",
      "docstring": null
    },
    {
      "name": "get_xaxis_transform",
      "docstring": null
    },
    {
      "name": "get_xaxis_text1_transform",
      "docstring": null
    },
    {
      "name": "get_xaxis_text2_transform",
      "docstring": null
    },
    {
      "name": "get_yaxis_transform",
      "docstring": null
    },
    {
      "name": "get_yaxis_text1_transform",
      "docstring": null
    },
    {
      "name": "get_yaxis_text2_transform",
      "docstring": null
    },
    {
      "name": "draw",
      "docstring": null
    },
    {
      "name": "set_thetamax",
      "docstring": "Set the maximum theta limit in degrees."
    },
    {
      "name": "get_thetamax",
      "docstring": "Return the maximum theta limit in degrees."
    },
    {
      "name": "set_thetamin",
      "docstring": "Set the minimum theta limit in degrees."
    },
    {
      "name": "get_thetamin",
      "docstring": "Get the minimum theta limit in degrees."
    },
    {
      "name": "set_thetalim",
      "docstring": "Set the minimum and maximum theta values.\n\nCan take the following signatures:\n\n- ``set_thetalim(minval, maxval)``: Set the limits in radians.\n- ``set_thetalim(thetamin=minval, thetamax=maxval)``: Set the limits\n  in degrees.\n\nwhere minval and maxval are the minimum and maximum limits. Values are\nwrapped in to the range :math:`[0, 2\\pi]` (in radians), so for example\nit is possible to do ``set_thetalim(-np.pi / 2, np.pi / 2)`` to have\nan axis symmetric around 0. A ValueError is raised if the absolute\nangle difference is larger than a full circle."
    },
    {
      "name": "set_theta_offset",
      "docstring": "Set the offset for the location of 0 in radians."
    },
    {
      "name": "get_theta_offset",
      "docstring": "Get the offset for the location of 0 in radians."
    },
    {
      "name": "set_theta_zero_location",
      "docstring": "Set the location of theta's zero.\n\nThis simply calls `set_theta_offset` with the correct value in radians.\n\nParameters\n----------\nloc : str\n    May be one of \"N\", \"NW\", \"W\", \"SW\", \"S\", \"SE\", \"E\", or \"NE\".\noffset : float, default: 0\n    An offset in degrees to apply from the specified *loc*. **Note:**\n    this offset is *always* applied counter-clockwise regardless of\n    the direction setting."
    },
    {
      "name": "set_theta_direction",
      "docstring": "Set the direction in which theta increases.\n\nclockwise, -1:\n   Theta increases in the clockwise direction\n\ncounterclockwise, anticlockwise, 1:\n   Theta increases in the counterclockwise direction"
    },
    {
      "name": "get_theta_direction",
      "docstring": "Get the direction in which theta increases.\n\n-1:\n   Theta increases in the clockwise direction\n\n1:\n   Theta increases in the counterclockwise direction"
    },
    {
      "name": "set_rmax",
      "docstring": "Set the outer radial limit.\n\nParameters\n----------\nrmax : float"
    },
    {
      "name": "get_rmax",
      "docstring": "Returns\n-------\nfloat\n    Outer radial limit."
    },
    {
      "name": "set_rmin",
      "docstring": "Set the inner radial limit.\n\nParameters\n----------\nrmin : float"
    },
    {
      "name": "get_rmin",
      "docstring": "Returns\n-------\nfloat\n    The inner radial limit."
    },
    {
      "name": "set_rorigin",
      "docstring": "Update the radial origin.\n\nParameters\n----------\nrorigin : float"
    },
    {
      "name": "get_rorigin",
      "docstring": "Returns\n-------\nfloat"
    },
    {
      "name": "get_rsign",
      "docstring": null
    },
    {
      "name": "set_rlim",
      "docstring": "Set the radial axis view limits.\n\nThis function behaves like `.Axes.set_ylim`, but additionally supports\n*rmin* and *rmax* as aliases for *bottom* and *top*.\n\nSee Also\n--------\n.Axes.set_ylim"
    },
    {
      "name": "get_rlabel_position",
      "docstring": "Returns\n-------\nfloat\n    The theta position of the radius labels in degrees."
    },
    {
      "name": "set_rlabel_position",
      "docstring": "Update the theta position of the radius labels.\n\nParameters\n----------\nvalue : number\n    The angular position of the radius labels in degrees."
    },
    {
      "name": "set_yscale",
      "docstring": null
    },
    {
      "name": "set_rscale",
      "docstring": null
    },
    {
      "name": "set_rticks",
      "docstring": null
    },
    {
      "name": "set_thetagrids",
      "docstring": "Set the theta gridlines in a polar plot.\n\nParameters\n----------\nangles : tuple with floats, degrees\n    The angles of the theta gridlines.\n\nlabels : tuple with strings or None\n    The labels to use at each theta gridline. The\n    `.projections.polar.ThetaFormatter` will be used if None.\n\nfmt : str or None\n    Format string used in `matplotlib.ticker.FormatStrFormatter`.\n    For example '%f'. Note that the angle that is used is in\n    radians.\n\nReturns\n-------\nlines : list of `.lines.Line2D`\n    The theta gridlines.\n\nlabels : list of `.text.Text`\n    The tick labels.\n\nOther Parameters\n----------------\n**kwargs\n    *kwargs* are optional `.Text` properties for the labels.\n\n    .. warning::\n\n        This only sets the properties of the current ticks.\n        Ticks are not guaranteed to be persistent. Various operations\n        can create, delete and modify the Tick instances. There is an\n        imminent risk that these settings can get lost if you work on\n        the figure further (including also panning/zooming on a\n        displayed figure).\n\n        Use `.set_tick_params` instead if possible.\n\nSee Also\n--------\n.PolarAxes.set_rgrids\n.Axis.get_gridlines\n.Axis.get_ticklabels"
    },
    {
      "name": "set_rgrids",
      "docstring": "Set the radial gridlines on a polar plot.\n\nParameters\n----------\nradii : tuple with floats\n    The radii for the radial gridlines\n\nlabels : tuple with strings or None\n    The labels to use at each radial gridline. The\n    `matplotlib.ticker.ScalarFormatter` will be used if None.\n\nangle : float\n    The angular position of the radius labels in degrees.\n\nfmt : str or None\n    Format string used in `matplotlib.ticker.FormatStrFormatter`.\n    For example '%f'.\n\nReturns\n-------\nlines : list of `.lines.Line2D`\n    The radial gridlines.\n\nlabels : list of `.text.Text`\n    The tick labels.\n\nOther Parameters\n----------------\n**kwargs\n    *kwargs* are optional `.Text` properties for the labels.\n\n    .. warning::\n\n        This only sets the properties of the current ticks.\n        Ticks are not guaranteed to be persistent. Various operations\n        can create, delete and modify the Tick instances. There is an\n        imminent risk that these settings can get lost if you work on\n        the figure further (including also panning/zooming on a\n        displayed figure).\n\n        Use `.set_tick_params` instead if possible.\n\nSee Also\n--------\n.PolarAxes.set_thetagrids\n.Axis.get_gridlines\n.Axis.get_ticklabels"
    },
    {
      "name": "format_coord",
      "docstring": null
    },
    {
      "name": "get_data_ratio",
      "docstring": "Return the aspect ratio of the data itself.  For a polar plot,\nthis should always be 1.0"
    },
    {
      "name": "can_zoom",
      "docstring": "Return whether this Axes supports the zoom box button functionality.\n\nA polar Axes does not support zoom boxes."
    },
    {
      "name": "can_pan",
      "docstring": "Return whether this Axes supports the pan/zoom button functionality.\n\nFor a polar Axes, this is slightly misleading. Both panning and\nzooming are performed by the same button. Panning is performed\nin azimuth while zooming is done along the radial."
    },
    {
      "name": "start_pan",
      "docstring": null
    },
    {
      "name": "end_pan",
      "docstring": null
    },
    {
      "name": "drag_pan",
      "docstring": null
    },
    {
      "name": "format_sig",
      "docstring": null
    }
  ],
  "innovations": []
}