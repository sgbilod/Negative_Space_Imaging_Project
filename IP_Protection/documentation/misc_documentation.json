{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\pip\\_internal\\utils\\misc.py",
  "classes": [
    {
      "name": "StreamWrapper",
      "docstring": null,
      "methods": [
        {
          "name": "from_stream",
          "docstring": null
        },
        {
          "name": "encoding",
          "docstring": null
        }
      ]
    },
    {
      "name": "HiddenText",
      "docstring": null,
      "methods": []
    },
    {
      "name": "ConfiguredBuildBackendHookCaller",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": null
        },
        {
          "name": "build_wheel",
          "docstring": null
        },
        {
          "name": "build_sdist",
          "docstring": null
        },
        {
          "name": "build_editable",
          "docstring": null
        },
        {
          "name": "get_requires_for_build_wheel",
          "docstring": null
        },
        {
          "name": "get_requires_for_build_sdist",
          "docstring": null
        },
        {
          "name": "get_requires_for_build_editable",
          "docstring": null
        },
        {
          "name": "prepare_metadata_for_build_wheel",
          "docstring": null
        },
        {
          "name": "prepare_metadata_for_build_editable",
          "docstring": null
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "get_pip_version",
      "docstring": null
    },
    {
      "name": "normalize_version_info",
      "docstring": "Convert a tuple of ints representing a Python version to one of length\nthree.\n\n:param py_version_info: a tuple of ints representing a Python version,\n    or None to specify no version. The tuple can have any length.\n\n:return: a tuple of length three if `py_version_info` is non-None.\n    Otherwise, return `py_version_info` unchanged (i.e. None)."
    },
    {
      "name": "ensure_dir",
      "docstring": "os.path.makedirs without EEXIST."
    },
    {
      "name": "get_prog",
      "docstring": null
    },
    {
      "name": "rmtree",
      "docstring": null
    },
    {
      "name": "rmtree_errorhandler",
      "docstring": "`rmtree` error handler to 'force' a file remove (i.e. like `rm -f`).\n\n* If a file is readonly then it's write flag is set and operation is\n  retried.\n\n* `onerror` is the original callback from `rmtree(... onerror=onerror)`\n  that is chained at the end if the \"rm -f\" still fails."
    },
    {
      "name": "display_path",
      "docstring": "Gives the display value for a given path, making it relative to cwd\nif possible."
    },
    {
      "name": "backup_dir",
      "docstring": "Figure out the name of a directory to back up the given dir to\n(adding .bak, .bak2, etc)"
    },
    {
      "name": "ask_path_exists",
      "docstring": null
    },
    {
      "name": "ask",
      "docstring": "Ask the message interactively, with the given possible responses"
    },
    {
      "name": "ask_input",
      "docstring": "Ask for input interactively."
    },
    {
      "name": "ask_password",
      "docstring": "Ask for a password interactively."
    },
    {
      "name": "strtobool",
      "docstring": "Convert a string representation of truth to true (1) or false (0).\n\nTrue values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\nare 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n'val' is anything else."
    },
    {
      "name": "format_size",
      "docstring": null
    },
    {
      "name": "tabulate",
      "docstring": "Return a list of formatted rows and a list of column sizes.\n\nFor example::\n\n>>> tabulate([['foobar', 2000], [0xdeadbeef]])\n(['foobar     2000', '3735928559'], [10, 4])"
    },
    {
      "name": "is_installable_dir",
      "docstring": "Is path is a directory containing pyproject.toml or setup.py?\n\nIf pyproject.toml exists, this is a PEP 517 project. Otherwise we look for\na legacy setuptools layout by identifying setup.py. We don't check for the\nsetup.cfg because using it without setup.py is only available for PEP 517\nprojects, which are already covered by the pyproject.toml check."
    },
    {
      "name": "read_chunks",
      "docstring": "Yield pieces of data from a file-like object until EOF."
    },
    {
      "name": "normalize_path",
      "docstring": "Convert a path to its canonical, case-normalized, absolute version."
    },
    {
      "name": "splitext",
      "docstring": "Like os.path.splitext, but take off .tar too"
    },
    {
      "name": "renames",
      "docstring": "Like os.renames(), but handles renaming across devices."
    },
    {
      "name": "is_local",
      "docstring": "Return True if path is within sys.prefix, if we're running in a virtualenv.\n\nIf we're not in a virtualenv, all paths are considered \"local.\"\n\nCaution: this function assumes the head of path has been normalized\nwith normalize_path."
    },
    {
      "name": "write_output",
      "docstring": null
    },
    {
      "name": "enum",
      "docstring": null
    },
    {
      "name": "build_netloc",
      "docstring": "Build a netloc from a host-port pair"
    },
    {
      "name": "build_url_from_netloc",
      "docstring": "Build a full URL from a netloc."
    },
    {
      "name": "parse_netloc",
      "docstring": "Return the host-port pair from a netloc."
    },
    {
      "name": "split_auth_from_netloc",
      "docstring": "Parse out and remove the auth information from a netloc.\n\nReturns: (netloc, (username, password))."
    },
    {
      "name": "redact_netloc",
      "docstring": "Replace the sensitive data in a netloc with \"****\", if it exists.\n\nFor example:\n    - \"user:pass@example.com\" returns \"user:****@example.com\"\n    - \"accesstoken@example.com\" returns \"****@example.com\""
    },
    {
      "name": "split_auth_netloc_from_url",
      "docstring": "Parse a url into separate netloc, auth, and url with no auth.\n\nReturns: (url_without_auth, netloc, (username, password))"
    },
    {
      "name": "remove_auth_from_url",
      "docstring": "Return a copy of url with 'username:password@' removed."
    },
    {
      "name": "redact_auth_from_url",
      "docstring": "Replace the password in a given url with ****."
    },
    {
      "name": "redact_auth_from_requirement",
      "docstring": "Replace the password in a given requirement url with ****."
    },
    {
      "name": "hide_value",
      "docstring": null
    },
    {
      "name": "hide_url",
      "docstring": null
    },
    {
      "name": "protect_pip_from_modification_on_windows",
      "docstring": "Protection of pip.exe from modification on Windows\n\nOn Windows, any operation modifying pip should be run as:\n    python -m pip ..."
    },
    {
      "name": "check_externally_managed",
      "docstring": "Check whether the current environment is externally managed.\n\nIf the ``EXTERNALLY-MANAGED`` config file is found, the current environment\nis considered externally managed, and an ExternallyManagedEnvironment is\nraised."
    },
    {
      "name": "is_console_interactive",
      "docstring": "Is this console interactive?"
    },
    {
      "name": "hash_file",
      "docstring": "Return (hash, length) for path using hashlib.sha256()"
    },
    {
      "name": "pairwise",
      "docstring": "Return paired elements.\n\nFor example:\n    s -> (s0, s1), (s2, s3), (s4, s5), ..."
    },
    {
      "name": "partition",
      "docstring": "Use a predicate to partition entries into false entries and true entries,\nlike\n\n    partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9"
    },
    {
      "name": "warn_if_run_as_root",
      "docstring": "Output a warning for sudo users on Unix.\n\nIn a virtual environment, sudo pip still writes to virtualenv.\nOn Windows, users may run pip as Administrator without issues.\nThis warning only applies to Unix root users outside of virtualenv."
    },
    {
      "name": "from_stream",
      "docstring": null
    },
    {
      "name": "encoding",
      "docstring": null
    },
    {
      "name": "build_wheel",
      "docstring": null
    },
    {
      "name": "build_sdist",
      "docstring": null
    },
    {
      "name": "build_editable",
      "docstring": null
    },
    {
      "name": "get_requires_for_build_wheel",
      "docstring": null
    },
    {
      "name": "get_requires_for_build_sdist",
      "docstring": null
    },
    {
      "name": "get_requires_for_build_editable",
      "docstring": null
    },
    {
      "name": "prepare_metadata_for_build_wheel",
      "docstring": null
    },
    {
      "name": "prepare_metadata_for_build_editable",
      "docstring": null
    }
  ],
  "innovations": []
}