{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\mpl_toolkits\\axes_grid1\\anchored_artists.py",
  "classes": [
    {
      "name": "AnchoredDrawingArea",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": "An anchored container with a fixed size and fillable `.DrawingArea`.\n\nArtists added to the *drawing_area* will have their coordinates\ninterpreted as pixels. Any transformations set on the artists will be\noverridden.\n\nParameters\n----------\nwidth, height : float\n    Width and height of the container, in pixels.\nxdescent, ydescent : float\n    Descent of the container in the x- and y- direction, in pixels.\nloc : str\n    Location of this artist.  Valid locations are\n    'upper left', 'upper center', 'upper right',\n    'center left', 'center', 'center right',\n    'lower left', 'lower center', 'lower right'.\n    For backward compatibility, numeric values are accepted as well.\n    See the parameter *loc* of `.Legend` for details.\npad : float, default: 0.4\n    Padding around the child objects, in fraction of the font size.\nborderpad : float, default: 0.5\n    Border padding, in fraction of the font size.\nprop : `~matplotlib.font_manager.FontProperties`, optional\n    Font property used as a reference for paddings.\nframeon : bool, default: True\n    If True, draw a box around this artist.\n**kwargs\n    Keyword arguments forwarded to `.AnchoredOffsetbox`.\n\nAttributes\n----------\ndrawing_area : `~matplotlib.offsetbox.DrawingArea`\n    A container for artists to display.\n\nExamples\n--------\nTo display blue and red circles of different sizes in the upper right\nof an Axes *ax*:\n\n>>> ada = AnchoredDrawingArea(20, 20, 0, 0,\n...                           loc='upper right', frameon=False)\n>>> ada.drawing_area.add_artist(Circle((10, 10), 10, fc=\"b\"))\n>>> ada.drawing_area.add_artist(Circle((30, 10), 5, fc=\"r\"))\n>>> ax.add_artist(ada)"
        }
      ]
    },
    {
      "name": "AnchoredAuxTransformBox",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": "An anchored container with transformed coordinates.\n\nArtists added to the *drawing_area* are scaled according to the\ncoordinates of the transformation used. The dimensions of this artist\nwill scale to contain the artists added.\n\nParameters\n----------\ntransform : `~matplotlib.transforms.Transform`\n    The transformation object for the coordinate system in use, i.e.,\n    :attr:`matplotlib.axes.Axes.transData`.\nloc : str\n    Location of this artist.  Valid locations are\n    'upper left', 'upper center', 'upper right',\n    'center left', 'center', 'center right',\n    'lower left', 'lower center', 'lower right'.\n    For backward compatibility, numeric values are accepted as well.\n    See the parameter *loc* of `.Legend` for details.\npad : float, default: 0.4\n    Padding around the child objects, in fraction of the font size.\nborderpad : float, default: 0.5\n    Border padding, in fraction of the font size.\nprop : `~matplotlib.font_manager.FontProperties`, optional\n    Font property used as a reference for paddings.\nframeon : bool, default: True\n    If True, draw a box around this artist.\n**kwargs\n    Keyword arguments forwarded to `.AnchoredOffsetbox`.\n\nAttributes\n----------\ndrawing_area : `~matplotlib.offsetbox.AuxTransformBox`\n    A container for artists to display.\n\nExamples\n--------\nTo display an ellipse in the upper left, with a width of 0.1 and\nheight of 0.4 in data coordinates:\n\n>>> box = AnchoredAuxTransformBox(ax.transData, loc='upper left')\n>>> el = Ellipse((0, 0), width=0.1, height=0.4, angle=30)\n>>> box.drawing_area.add_artist(el)\n>>> ax.add_artist(box)"
        }
      ]
    },
    {
      "name": "AnchoredSizeBar",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": "Draw a horizontal scale bar with a center-aligned label underneath.\n\nParameters\n----------\ntransform : `~matplotlib.transforms.Transform`\n    The transformation object for the coordinate system in use, i.e.,\n    :attr:`matplotlib.axes.Axes.transData`.\nsize : float\n    Horizontal length of the size bar, given in coordinates of\n    *transform*.\nlabel : str\n    Label to display.\nloc : str\n    Location of the size bar.  Valid locations are\n    'upper left', 'upper center', 'upper right',\n    'center left', 'center', 'center right',\n    'lower left', 'lower center', 'lower right'.\n    For backward compatibility, numeric values are accepted as well.\n    See the parameter *loc* of `.Legend` for details.\npad : float, default: 0.1\n    Padding around the label and size bar, in fraction of the font\n    size.\nborderpad : float, default: 0.1\n    Border padding, in fraction of the font size.\nsep : float, default: 2\n    Separation between the label and the size bar, in points.\nframeon : bool, default: True\n    If True, draw a box around the horizontal bar and label.\nsize_vertical : float, default: 0\n    Vertical length of the size bar, given in coordinates of\n    *transform*.\ncolor : str, default: 'black'\n    Color for the size bar and label.\nlabel_top : bool, default: False\n    If True, the label will be over the size bar.\nfontproperties : `~matplotlib.font_manager.FontProperties`, optional\n    Font properties for the label text.\nfill_bar : bool, optional\n    If True and if *size_vertical* is nonzero, the size bar will\n    be filled in with the color specified by the size bar.\n    Defaults to True if *size_vertical* is greater than\n    zero and False otherwise.\n**kwargs\n    Keyword arguments forwarded to `.AnchoredOffsetbox`.\n\nAttributes\n----------\nsize_bar : `~matplotlib.offsetbox.AuxTransformBox`\n    Container for the size bar.\ntxt_label : `~matplotlib.offsetbox.TextArea`\n    Container for the label of the size bar.\n\nNotes\n-----\nIf *prop* is passed as a keyword argument, but *fontproperties* is\nnot, then *prop* is assumed to be the intended *fontproperties*.\nUsing both *prop* and *fontproperties* is not supported.\n\nExamples\n--------\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from mpl_toolkits.axes_grid1.anchored_artists import (\n...     AnchoredSizeBar)\n>>> fig, ax = plt.subplots()\n>>> ax.imshow(np.random.random((10, 10)))\n>>> bar = AnchoredSizeBar(ax.transData, 3, '3 data units', 4)\n>>> ax.add_artist(bar)\n>>> fig.show()\n\nUsing all the optional parameters\n\n>>> import matplotlib.font_manager as fm\n>>> fontprops = fm.FontProperties(size=14, family='monospace')\n>>> bar = AnchoredSizeBar(ax.transData, 3, '3 units', 4, pad=0.5,\n...                       sep=5, borderpad=0.5, frameon=False,\n...                       size_vertical=0.5, color='white',\n...                       fontproperties=fontprops)"
        }
      ]
    },
    {
      "name": "AnchoredDirectionArrows",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": "Draw two perpendicular arrows to indicate directions.\n\nParameters\n----------\ntransform : `~matplotlib.transforms.Transform`\n    The transformation object for the coordinate system in use, i.e.,\n    :attr:`matplotlib.axes.Axes.transAxes`.\nlabel_x, label_y : str\n    Label text for the x and y arrows\nlength : float, default: 0.15\n    Length of the arrow, given in coordinates of *transform*.\nfontsize : float, default: 0.08\n    Size of label strings, given in coordinates of *transform*.\nloc : str, default: 'upper left'\n    Location of the arrow.  Valid locations are\n    'upper left', 'upper center', 'upper right',\n    'center left', 'center', 'center right',\n    'lower left', 'lower center', 'lower right'.\n    For backward compatibility, numeric values are accepted as well.\n    See the parameter *loc* of `.Legend` for details.\nangle : float, default: 0\n    The angle of the arrows in degrees.\naspect_ratio : float, default: 1\n    The ratio of the length of arrow_x and arrow_y.\n    Negative numbers can be used to change the direction.\npad : float, default: 0.4\n    Padding around the labels and arrows, in fraction of the font size.\nborderpad : float, default: 0.4\n    Border padding, in fraction of the font size.\nframeon : bool, default: False\n    If True, draw a box around the arrows and labels.\ncolor : str, default: 'white'\n    Color for the arrows and labels.\nalpha : float, default: 1\n    Alpha values of the arrows and labels\nsep_x, sep_y : float, default: 0.01 and 0 respectively\n    Separation between the arrows and labels in coordinates of\n    *transform*.\nfontproperties : `~matplotlib.font_manager.FontProperties`, optional\n    Font properties for the label text.\nback_length : float, default: 0.15\n    Fraction of the arrow behind the arrow crossing.\nhead_width : float, default: 10\n    Width of arrow head, sent to `.ArrowStyle`.\nhead_length : float, default: 15\n    Length of arrow head, sent to `.ArrowStyle`.\ntail_width : float, default: 2\n    Width of arrow tail, sent to `.ArrowStyle`.\ntext_props, arrow_props : dict\n    Properties of the text and arrows, passed to `.TextPath` and\n    `.FancyArrowPatch`.\n**kwargs\n    Keyword arguments forwarded to `.AnchoredOffsetbox`.\n\nAttributes\n----------\narrow_x, arrow_y : `~matplotlib.patches.FancyArrowPatch`\n    Arrow x and y\ntext_path_x, text_path_y : `~matplotlib.text.TextPath`\n    Path for arrow labels\np_x, p_y : `~matplotlib.patches.PathPatch`\n    Patch for arrow labels\nbox : `~matplotlib.offsetbox.AuxTransformBox`\n    Container for the arrows and labels.\n\nNotes\n-----\nIf *prop* is passed as a keyword argument, but *fontproperties* is\nnot, then *prop* is assumed to be the intended *fontproperties*.\nUsing both *prop* and *fontproperties* is not supported.\n\nExamples\n--------\n>>> import matplotlib.pyplot as plt\n>>> import numpy as np\n>>> from mpl_toolkits.axes_grid1.anchored_artists import (\n...     AnchoredDirectionArrows)\n>>> fig, ax = plt.subplots()\n>>> ax.imshow(np.random.random((10, 10)))\n>>> arrows = AnchoredDirectionArrows(ax.transAxes, '111', '110')\n>>> ax.add_artist(arrows)\n>>> fig.show()\n\nUsing several of the optional parameters, creating downward pointing\narrow and high contrast text labels.\n\n>>> import matplotlib.font_manager as fm\n>>> fontprops = fm.FontProperties(family='monospace')\n>>> arrows = AnchoredDirectionArrows(ax.transAxes, 'East', 'South',\n...                                  loc='lower left', color='k',\n...                                  aspect_ratio=-1, sep_x=0.02,\n...                                  sep_y=-0.01,\n...                                  text_props={'ec':'w', 'fc':'k'},\n...                                  fontproperties=fontprops)"
        }
      ]
    }
  ],
  "functions": [],
  "innovations": []
}