{
  "file_path": "c:\\Users\\sgbil\\OneDrive\\Desktop\\Negative_Space_Imaging_Project\\.venv\\Lib\\site-packages\\PIL\\ImageStat.py",
  "classes": [
    {
      "name": "Stat",
      "docstring": null,
      "methods": [
        {
          "name": "__init__",
          "docstring": "Calculate statistics for the given image. If a mask is included,\nonly the regions covered by that mask are included in the\nstatistics. You can also pass in a previously calculated histogram.\n\n:param image: A PIL image, or a precalculated histogram.\n\n    .. note::\n\n        For a PIL image, calculations rely on the\n        :py:meth:`~PIL.Image.Image.histogram` method. The pixel counts are\n        grouped into 256 bins, even if the image has more than 8 bits per\n        channel. So ``I`` and ``F`` mode images have a maximum ``mean``,\n        ``median`` and ``rms`` of 255, and cannot have an ``extrema`` maximum\n        of more than 255.\n\n:param mask: An optional mask."
        },
        {
          "name": "extrema",
          "docstring": "Min/max values for each band in the image.\n\n.. note::\n    This relies on the :py:meth:`~PIL.Image.Image.histogram` method, and\n    simply returns the low and high bins used. This is correct for\n    images with 8 bits per channel, but fails for other modes such as\n    ``I`` or ``F``. Instead, use :py:meth:`~PIL.Image.Image.getextrema` to\n    return per-band extrema for the image. This is more correct and\n    efficient because, for non-8-bit modes, the histogram method uses\n    :py:meth:`~PIL.Image.Image.getextrema` to determine the bins used."
        },
        {
          "name": "count",
          "docstring": "Total number of pixels for each band in the image."
        },
        {
          "name": "sum",
          "docstring": "Sum of all pixels for each band in the image."
        },
        {
          "name": "sum2",
          "docstring": "Squared sum of all pixels for each band in the image."
        },
        {
          "name": "mean",
          "docstring": "Average (arithmetic mean) pixel level for each band in the image."
        },
        {
          "name": "median",
          "docstring": "Median pixel level for each band in the image."
        },
        {
          "name": "rms",
          "docstring": "RMS (root-mean-square) for each band in the image."
        },
        {
          "name": "var",
          "docstring": "Variance for each band in the image."
        },
        {
          "name": "stddev",
          "docstring": "Standard deviation for each band in the image."
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "extrema",
      "docstring": "Min/max values for each band in the image.\n\n.. note::\n    This relies on the :py:meth:`~PIL.Image.Image.histogram` method, and\n    simply returns the low and high bins used. This is correct for\n    images with 8 bits per channel, but fails for other modes such as\n    ``I`` or ``F``. Instead, use :py:meth:`~PIL.Image.Image.getextrema` to\n    return per-band extrema for the image. This is more correct and\n    efficient because, for non-8-bit modes, the histogram method uses\n    :py:meth:`~PIL.Image.Image.getextrema` to determine the bins used."
    },
    {
      "name": "count",
      "docstring": "Total number of pixels for each band in the image."
    },
    {
      "name": "sum",
      "docstring": "Sum of all pixels for each band in the image."
    },
    {
      "name": "sum2",
      "docstring": "Squared sum of all pixels for each band in the image."
    },
    {
      "name": "mean",
      "docstring": "Average (arithmetic mean) pixel level for each band in the image."
    },
    {
      "name": "median",
      "docstring": "Median pixel level for each band in the image."
    },
    {
      "name": "rms",
      "docstring": "RMS (root-mean-square) for each band in the image."
    },
    {
      "name": "var",
      "docstring": "Variance for each band in the image."
    },
    {
      "name": "stddev",
      "docstring": "Standard deviation for each band in the image."
    },
    {
      "name": "minmax",
      "docstring": null
    }
  ],
  "innovations": []
}