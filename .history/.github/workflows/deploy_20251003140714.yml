name: Deployment Pipeline

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and push Docker images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    strategy:
      matrix:
        image: [api, frontend, monitoring]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.image }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.negativespaceimaging.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name negative-space-staging --region us-east-1
          
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/staging/
          kubectl rollout status deployment/api -n negative-space
          kubectl rollout status deployment/frontend -n negative-space
          
      - name: Run smoke tests
        run: |
          python tests/smoke_tests.py --environment staging
          
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Staging deployment completed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://negativespaceimaging.com
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name negative-space-production --region us-east-1
          
      - name: Create backup
        run: |
          python deployment/database_deploy.py --backup
          
      - name: Deploy to Kubernetes (Blue-Green)
        run: |
          # Deploy to green environment
          kubectl apply -f k8s/production/green/
          
          # Wait for green to be ready
          kubectl wait --for=condition=available --timeout=600s deployment/api-green -n negative-space
          kubectl wait --for=condition=available --timeout=600s deployment/frontend-green -n negative-space
          
          # Run health checks
          python tests/health_check.py --environment production-green
          
          # Switch traffic to green
          kubectl patch service api -n negative-space -p '{"spec":{"selector":{"version":"green"}}}'
          kubectl patch service frontend -n negative-space -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Wait and verify
          sleep 60
          python tests/smoke_tests.py --environment production
          
          # Scale down blue
          kubectl scale deployment api-blue --replicas=0 -n negative-space
          kubectl scale deployment frontend-blue --replicas=0 -n negative-space
          
      - name: Update DNS and CDN
        run: |
          # Update CloudFront distribution
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"
          
      - name: Create GitHub release notes
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          generate_release_notes: true
          
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'Production deployment completed: ${{ github.ref }}'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: always()

  # Database migrations
  database-migration:
    name: Database Migration
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          
      - name: Run database migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          python deployment/database_deploy.py --migrate --environment production

  # Post-deployment validation
  post-deployment-validation:
    name: Post-Deployment Validation
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install test dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest requests
          
      - name: Run end-to-end tests
        run: |
          pytest tests/e2e/ --environment production
          
      - name: Run performance tests
        run: |
          python tests/performance_tests.py --url https://negativespaceimaging.com
          
      - name: Check monitoring alerts
        run: |
          python scripts/check_alerts.py --environment production
          
      - name: Generate deployment report
        run: |
          python scripts/deployment_report.py --version ${{ github.ref_name }} --output deployment-report.md
          
      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          
  # Rollback mechanism
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    needs: [deploy-production, post-deployment-validation]
    environment:
      name: production
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Rollback to previous version
        run: |
          # Switch traffic back to blue
          kubectl patch service api -n negative-space -p '{"spec":{"selector":{"version":"blue"}}}'
          kubectl patch service frontend -n negative-space -p '{"spec":{"selector":{"version":"green"}}}'
          
          # Scale up blue
          kubectl scale deployment api-blue --replicas=3 -n negative-space
          kubectl scale deployment frontend-blue --replicas=3 -n negative-space
          
          # Restore database backup
          python deployment/database_deploy.py --restore --latest
          
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: 'ðŸš¨ ROLLBACK INITIATED: Production deployment failed and was rolled back',
              attachments: [{
                color: 'danger',
                text: 'Please investigate the deployment failure'
              }]
            }
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
